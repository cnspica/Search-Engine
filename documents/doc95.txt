http://tutorialspoint.com/nodejs/nodejs_scaling_application.htm
<!doctype html>
<!--[if lt IE 7 ]> <html lang="en" class="no-js ie6"> <![endif]-->
<!--[if IE 7 ]> <html lang="en" class="no-js ie7"> <![endif]-->
<!--[if IE 8 ]> <html lang="en" class="no-js ie8"> <![endif]-->
<!--[if IE 9 ]> <html lang="en" class="no-js ie9"> <![endif]-->
<!--[if (gt IE 9)|!(IE)]><!-->
<html lang="en">
 <!--<![endif]-->
 <head> 
  <meta charset="utf-8"> 
  <title>Node.js Scaling Application</title> 
  <meta name="description" content="Node.js Scaling Application - Learn Node.js framework in simple and easy steps starting from Introduction, Environment Setup, Node Package Manager, Node Callbacks Concept, Node Buffers Module, Node Streams, Node File System, Node Utility Modules, Node Web Module, Node Express Application, Node RESTFul API, Node Scaling Application"> 
  <meta name="keywords" content="Introduction, Environment Setup, Node Package Manager, Global vs Local Installation, Node Callbacks Concept, locking vs non-blocking Code, Event Driven Programming, Event Loop Overview, Event Emitters, Implementing Callbacks, Node Buffers Module,JSON to JS Objects, JS Objects to JSON, Buffer Objects, Node Streams, Reading Stream, Writing Stream, Piping Stream, Node File System, File System Module, Synchronous vs Asynchronous Node, Utility Modules,Node Console Module, Node Process Module, Node OS Module, Node Path Module, Node Net Module, Node DNS Module, Node Domain Module, Node Web Module,HTTP Servers with Node.js, HTTP Clients with Node.js, Node Express Application, Express Overview, Installing Express, Express Generator, Node RESTFul API, Node Scaling Application,The exec function,The spawn function,The fork function"> 
  <base href="http://www.tutorialspoint.com/"> 
  <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon"> 
  <meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes"> 
  <meta property="og:locale" content="en_US"> 
  <meta property="og:type" content="website"> 
  <meta property="fb:app_id" content="471319149685276"> 
  <meta property="og:site_name" content="www.tutorialspoint.com"> 
  <meta name="robots" content="index, follow"> 
  <meta name="apple-mobile-web-app-capable" content="yes"> 
  <meta name="apple-mobile-web-app-status-bar-style" content="black"> 
  <meta name="author" content="tutorialspoint.com"> 
  <script type="text/javascript" src="/theme/js/script-min-v4.js"></script> 
  <link rel="stylesheet" href="/theme/css/style-min.css"> 
  <!-- Head Libs --> 
  <!--[if IE 8]>
<link rel="stylesheet" type="text/css" href="/theme/css/ie8.css">
<![endif]--> 
  <style>
.fa-camera:before{content:"\f03d";font-family:FontAwesome;font-style:normal;font-size:100%}
pre.prettyprint.tryit {min-height:37px; background: #eee url(/nodejs/images/try-it.jpg) top right no-repeat !important}div.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #82af25 url(/images/pattern.png) repeat center center !important;}
.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #82af25 !important;}
.submenu-item{ border-bottom: 2px solid #82af25 !important; border-top: 2px solid #82af25 !important }
</style> 
  <script>
$(document).ready(function() {
  $('input[name="q"]').keydown(function(event){
    if(event.keyCode == 13) {
      event.preventDefault();
      return false;
    }
  });
});
</script> 
 </head> 
 <body onload="prettyPrint()"> 
  <div class="wrapLoader"> 
   <div class="imgLoader"> 
    <img src="/images/loading-cg.gif" alt="" width="70" height="70"> 
   </div> 
  </div> 
  <header> 
   <div class="submenu-item sub-main-menu" id="top-sub-menu"></div> 
   <div class="container"> 
    <h1 class="logo"> <a href="index.htm" title="tutorialspoint"> <img alt="tutorialspoint" src="/nodejs/images/logo.png"> </a> </h1> 
    <button class="btn btn-responsive-nav btn-inverse" data-toggle="collapse" data-target=".nav-main-collapse" id="pull"> <i class="icon icon-bars"></i> </button> 
    <div class="navbar nav-main"> 
     <div class="container"> 
      <nav class="nav-main mega-menu"> 
       <ul class="nav nav-pills nav-main" id="mainMenu"> 
        <li class="dropdown no-sub-menu"> <a class="dropdown" href="index.htm"><i class="icon icon-home"></i> Home</a> </li> 
        <li class="dropdown" id="liTL"><a class="dropdown" href="javascript:void(0);"><span class="tut-lib"> Tutorials Library <i class="fa-caret-down"></i></span></a></li> 
        <li class="dropdown no-sub-menu"><a class="dropdown" href="codingground.htm"><i class="fa-code"></i> Coding Ground </a> </li> 
        <li class="dropdown no-sub-menu"><a class="dropdown" href="tutor_connect/index.php"><i class="fa-user"> </i> Tutor Connect</a></li> 
        <li class="dropdown no-sub-menu"><a class="dropdown" href="online_dev_tools.htm"><span class="dev-tools-menu"> Tools</span></a></li> 
       </ul> 
      </nav> 
      <div class="searchform-popup"> 
       <input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off"> 
       <div class="magnifying-glass">
        <i class="icon-search"></i> Search 
       </div> 
      </div> 
     </div> 
    </div> 
   </div>
  </header> 
  <div style="clear:both;"></div> 
  <div role="main" class="main"> 
   <div class="container"> 
    <div class="row"> 
     <div class="col-md-2"> 
      <aside class="sidebar"> 
       <div class="mini-logo"> 
        <img src="/nodejs/images/nodejs-mini-logo.jpg" alt="Node.js Tutorial"> 
       </div> 
       <ul class="nav nav-list primary left-menu"> 
        <li class="heading">Node.js Tutorial</li> 
        <li><a href="/nodejs/index.htm">Node.js Home</a></li> 
        <li><a href="/nodejs/nodejs_introduction.htm">Node.js Introduction</a></li> 
        <li><a href="/nodejs/nodejs_environment_setup.htm">Node.js Environment Setup</a></li> 
        <li><a href="/nodejs/nodejs_first_application.htm">Node.js First Application</a></li> 
        <li><a href="/nodejs/nodejs_repl_terminal.htm">Node.js REPL Terminal</a></li> 
        <li><a href="/nodejs/nodejs_npm.htm">Node.js Package Manager (NPM)</a></li> 
        <li><a href="/nodejs/nodejs_callbacks_concept.htm">Node.js Callbacks Concept</a></li> 
        <li><a href="/nodejs/nodejs_event_loop.htm">Node.js Event Loop</a></li> 
        <li><a href="/nodejs/nodejs_event_emitter.htm">Node.js Event Emitter</a></li> 
        <li><a href="/nodejs/nodejs_buffers.htm">Node.js Buffers</a></li> 
        <li><a href="/nodejs/nodejs_streams.htm">Node.js Streams</a></li> 
        <li><a href="/nodejs/nodejs_file_system.htm">Node.js File System</a></li> 
        <li><a href="/nodejs/nodejs_global_objects.htm">Node.js Global Objects</a></li> 
        <li><a href="/nodejs/nodejs_utitlity_module.htm">Node.js Utility Modules</a></li> 
        <li><a href="/nodejs/nodejs_web_module.htm">Node.js Web Module</a></li> 
        <li><a href="/nodejs/nodejs_express_framework.htm">Node.js Express Framework</a></li> 
        <li><a href="/nodejs/nodejs_restful_api.htm">Node.js RESTFul API</a></li> 
        <li><a href="/nodejs/nodejs_scaling_application.htm">Node.js Scaling Application</a></li> 
        <li><a href="/nodejs/nodejs_packaging.htm">Node.js Packaging</a></li> 
        <li class="heading">Node.js Useful Resources</li> 
        <li><a href="/nodejs/nodejs_questions_answers.htm">Node.js - Questions and Answers</a></li> 
        <li><a href="/nodejs/nodejs_quick_guide.htm">Node.js - Quick Guide</a></li> 
        <li><a href="/nodejs/nodejs_useful_resources.htm">Node.js - Useful Resources</a></li> 
       </ul> 
       <ul class="nav nav-list primary push-bottom left-menu special"> 
        <li class="sreading">Selected Reading</li> 
        <li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li> 
        <li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li> 
        <li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li> 
        <li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li> 
        <li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li> 
        <li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li> 
       </ul> 
      </aside> 
     </div> 
     <!-- PRINTING STARTS HERE --> 
     <div class="row"> 
      <div class="content"> 
       <div class="col-md-7 middle-col"> 
        <h1>Node.js - Scaling Application</h1> 
        <hr> 
        <div class="topgooglead"> 
         <div class="topadtag">
          Advertisements
         </div> 
         <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> 
         <ins class="adsbygoogle top_ad_slot" style="display:inline-block;" data-ad-client="ca-pub-7133395778201029" data-ad-slot="2813390526"> </ins> 
         <script>(adsbygoogle = window.adsbygoogle || []).push({});</script> 
        </div> 
        <hr> 
        <div class="pre-btn"> 
         <a href="/nodejs/nodejs_restful_api.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a> 
        </div> 
        <div class="nxt-btn"> 
         <a href="/nodejs/nodejs_packaging.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a> 
        </div> 
        <div class="clearer"></div> 
        <hr> 
        <p>As Node.js runs in a single thread mode but it uses an event-driven paradigm to handle concurrency. It also facilitates creation of child processes to leverage parallel processing on multi-core cpu based systems.</p> 
        <p>Child processes always have three streams <b>child.stdin</b>, <b>child.stdout</b>, and <b>child.stderr</b> which may be shared with the stdio streams of the parent process.</p> 
        <p>Node provides <b>child_process</b> module which has following three major ways to create child process.</p> 
        <ul class="list"> 
         <li><p><b>exec</b> - child_process.exec method runs a command in a shell/console and buffers the output.</p></li> 
         <li><p><b>spawn</b> - child_process.spawn launches a new process with a given command</p></li> 
         <li><p><b>fork</b> - The child_process.fork method is a special case of the spawn() to create child processes.</p></li> 
        </ul> 
        <h2>The exec() method</h2> 
        <p>child_process.exec method runs a command in a shell and buffers the output. It has the following signature:</p> 
        <pre class="prettyprint notranslate">
child_process.exec(command[, options], callback)
</pre> 
        <h3>Parameters</h3> 
        <p>Here is the description of the parameters used:</p> 
        <ul class="list"> 
         <li><p><b>command</b> String The command to run, with space-separated arguments</p></li> 
         <li><p><b>options</b> Object may comprise one or more of the following options:</p> 
          <ul class="list"> 
           <li><p><b>cwd</b> String Current working directory of the child process</p></li> 
           <li><p><b>env</b> Object Environment key-value pairs</p></li> 
           <li><p><b>encoding</b> String (Default: 'utf8')</p></li> 
           <li><p><b>shell</b> String Shell to execute the command with (Default: '/bin/sh' on UNIX, 'cmd.exe' on Windows, The shell should understand the -c switch on UNIX or /s /c on Windows. On Windows, command line parsing should be compatible with cmd.exe.)</p></li> 
           <li><p><b>timeout</b> Number (Default: 0)</p></li> 
           <li><p><b>maxBuffer</b> Number (Default: 200*1024)</p></li> 
           <li><p><b>killSignal</b> String (Default: 'SIGTERM')</p></li> 
           <li><p><b>uid</b> Number Sets the user identity of the process. </p></li> 
           <li><p><b>gid</b> Number Sets the group identity of the process.</p></li> 
          </ul> </li> 
         <li><p><b>callback</b> Function gets three arguments <b>error</b>, <b>stdout</b> and <b>stderr</b> which is called with the following output when process terminates</p></li> 
        </ul> 
        <p>The exec() method returns a buffer with a max size and waits for the process to end and tries to return all the buffered data at once.</p> 
        <h2>Example</h2> 
        <p>Let us create two js file named support.js and master.js:</p> 
        <p><i>File: support.js</i></p> 
        <pre class="prettyprint notranslate" id="worker_js">
console.log("Child Process " + process.argv[2] + " executed." );
</pre> 
        <p><i>File: master.js</i></p> 
        <pre class="prettyprint tryit" title="worker_js">
const fs = require('fs');
const child_process = require('child_process');

for(var i=0; i&lt;3; i++) {
   var workerProcess = child_process.exec('node support.js '+i,
      function (error, stdout, stderr) {
         if (error) {
            console.log(error.stack);
            console.log('Error code: '+error.code);
            console.log('Signal received: '+error.signal);
         }
         console.log('stdout: ' + stdout);
         console.log('stderr: ' + stderr);
      });

      workerProcess.on('exit', function (code) {
      console.log('Child process exited with exit code '+code);
   });
}
</pre> 
        <p>Now run the master.js to see the result:</p> 
        <pre class="prettyprint notranslate">
$ node master.js
</pre> 
        <p>Verify the Output. Server has started</p> 
        <pre class="result notranslate">
Child process exited with exit code 0
stdout: Child Process 1 executed.

stderr:
Child process exited with exit code 0
stdout: Child Process 0 executed.

stderr:
Child process exited with exit code 0
stdout: Child Process 2 executed.
</pre> 
        <h2>The spawn() method</h2> 
        <p>child_process.spawn method launches a new process with a given command. It has the following signature:</p> 
        <pre class="prettyprint notranslate">
child_process.spawn(command[, args][, options])
</pre> 
        <h3>Parameters</h3> 
        <p>Here is the description of the parameters used:</p> 
        <ul class="list"> 
         <li><p><b>command</b> String The command to run</p></li> 
         <li><p><b>args</b> Array List of string arguments</p></li> 
         <li><p><b>options</b> Object may comprise one or more of the following options:</p> 
          <ul class="list"> 
           <li><p><b>cwd</b> String Current working directory of the child process</p></li> 
           <li><p><b>env</b> Object Environment key-value pairs</p></li> 
           <li><p><b>stdio</b> Array|String Child's stdio configuration</p></li> 
           <li><p><b>customFds</b> Array Deprecated File descriptors for the child to use for stdio</p></li> 
           <li><p><b>detached</b> Boolean The child will be a process group leader</p></li> 
           <li><p><b>uid</b> Number Sets the user identity of the process. </p></li> 
           <li><p><b>gid</b> Number Sets the group identity of the process.</p></li> 
          </ul> </li> 
        </ul> 
        <p>The spawn() method returns streams (stdout &amp; stderr) and it should be used when the process returns large amount of data. spawn() starts receiving the response as soon as the process starts executing.</p> 
        <h2>Example</h2> 
        <p>Create two js file named support.js and master.js:</p> 
        <p><i>File: support.js</i></p> 
        <pre class="prettyprint notranslate">
console.log("Child Process " + process.argv[2] + " executed." );
</pre> 
        <p><i>File: master.js</i></p> 
        <pre class="prettyprint tryit" title="worker_js">
const fs = require('fs');
const child_process = require('child_process');
 
for(var i=0; i&lt;3; i++) {
   var workerProcess = child_process.spawn('node', ['support.js', i]);

   workerProcess.stdout.on('data', function (data) {
      console.log('stdout: ' + data);
   });

   workerProcess.stderr.on('data', function (data) {
      console.log('stderr: ' + data);
   });

   workerProcess.on('close', function (code) {
      console.log('child process exited with code ' + code);
   });
}
</pre> 
        <p>Now run the master.js to see the result:</p> 
        <pre class="prettyprint notranslate">
$ node master.js
</pre> 
        <p>Verify the Output. Server has started</p> 
        <pre class="result notranslate">
stdout: Child Process 0 executed.

child process exited with code 0
stdout: Child Process 1 executed.

stdout: Child Process 2 executed.

child process exited with code 0
child process exited with code 0
</pre> 
        <h2>The fork method</h2> 
        <p>child_process.fork method is a special case of the spawn() to create Node processes. It has the following signature</p> 
        <pre class="prettyprint notranslate">
child_process.fork(modulePath[, args][, options])
</pre> 
        <h3>Parameters</h3> 
        <p>Here is the description of the parameters used:</p> 
        <ul class="list"> 
         <li><p><b>modulePath</b> String The module to run in the child</p></li> 
         <li><p><b>args</b> Array List of string arguments</p></li> 
         <li><p><b>options</b> Object may comprise one or more of the following options:</p> 
          <ul class="list"> 
           <li><p><b>cwd</b> String Current working directory of the child process</p></li> 
           <li><p><b>env</b> Object Environment key-value pairs</p></li> 
           <li><p><b>execPath</b> String Executable used to create the child process</p></li> 
           <li><p><b>execArgv</b> Array List of string arguments passed to the executable (Default: process.execArgv)</p></li> 
           <li><p><b>silent</b> Boolean If true, stdin, stdout, and stderr of the child will be piped to the parent, otherwise they will be inherited from the parent, see the "pipe" and "inherit" options for spawn()'s stdio for more details (default is false)</p></li> 
           <li><p><b>uid</b> Number Sets the user identity of the process. </p></li> 
           <li><p><b>gid</b> Number Sets the group identity of the process.</p></li> 
          </ul> </li> 
        </ul> 
        <p>The fork method returns object with a built-in communication channel in addition to having all the methods in a normal ChildProcess instance.</p> 
        <h2>Example</h2> 
        <p>Create two js file named support.js and master.js:</p> 
        <p><i>File: support.js</i></p> 
        <pre class="prettyprint notranslate">
console.log("Child Process " + process.argv[2] + " executed." );
</pre> 
        <p><i>File: master.js</i></p> 
        <pre class="prettyprint tryit" title="worker_js">
const fs = require('fs');
const child_process = require('child_process');
 
for(var i=0; i&lt;3; i++) {
   var worker_process = child_process.fork("support.js", [i]);	

   worker_process.on('close', function (code) {
      console.log('child process exited with code ' + code);
   });
}
</pre> 
        <p>Now run the master.js to see the result:</p> 
        <pre class="prettyprint notranslate">
$ node master.js
</pre> 
        <p>Verify the Output. Server has started</p> 
        <pre class="result notranslate">
Child Process 0 executed.
Child Process 1 executed.
Child Process 2 executed.
child process exited with code 0
child process exited with code 0
child process exited with code 0
</pre> 
        <hr> 
        <div class="pre-btn"> 
         <a href="/nodejs/nodejs_restful_api.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a> 
        </div>
        <div class="print-btn"> 
         <a href="/cgi-bin/printpage.cgi" target="_blank"><i class="icon icon-print big-font"></i> Print</a> 
        </div> 
        <div class="pdf-btn"> 
         <a href="/nodejs/pdf/nodejs_scaling_application.pdf" title="Node.js Scaling Application" target="_blank"><i class="icon icon-file-pdf-o big-font"></i> PDF</a> 
        </div> 
        <div class="nxt-btn"> 
         <a href="/nodejs/nodejs_packaging.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a> 
        </div> 
        <hr> 
        <!-- PRINTING ENDS HERE --> 
        <div class="bottomgooglead"> 
         <div class="bottomadtag">
          Advertisements
         </div> 
         <script type="text/javascript"><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script> 
         <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script> 
        </div> 
       </div> 
      </div> 
      <div class="row"> 
       <div class="col-md-3" id="rightbar"> 
        <div class="simple-ad"> 
         <a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('http://www.facebook.com/sharer.php?u=' + 'http://www.tutorialspoint.com/nodejs/nodejs_scaling_application.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;"> <img src="/images/facebookIcon.jpg" alt="img"> </a> 
         <a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('http://twitter.com/share?url=' + 'http://www.tutorialspoint.com/nodejs/nodejs_scaling_application.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;"> <img src="/images/twitterIcon.jpg" alt="img"> </a> 
         <a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'http://www.tutorialspoint.com/nodejs/nodejs_scaling_application.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;"> <img src="/images/linkedinIcon.jpg" alt="img"> </a> 
         <a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=http://www.tutorialspoint.com/nodejs/nodejs_scaling_application.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;"> <img src="/images/googlePlusIcon.jpg" alt="img"> </a> 
         <a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('http://www.stumbleupon.com/submit?url=http://www.tutorialspoint.com/nodejs/nodejs_scaling_application.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;"> <img src="/images/StumbleUponIcon.jpg" alt="img"> </a> 
         <a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('http://reddit.com/submit?url=http://www.tutorialspoint.com/nodejs/nodejs_scaling_application.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;"> <img src="/images/reddit.jpg" alt="img"> </a> 
        </div> 
        <div class="rightgooglead"> 
         <script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script> 
         <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script> 
        </div> 
        <div class="rightgooglead"> 
         <script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 300;
google_ad_height = 600;
google_ad_format = "300x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script> 
         <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script> 
        </div> 
        <div class="rightgooglead"> 
         <script type="text/javascript"><!--
google_ad_client = "ca-pub-2537027957187252";
/* Right Side Ad */
google_ad_slot = "right_side_ad";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script> 
         <script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js">
</script> 
        </div> 
       </div> 
      </div> 
     </div> 
    </div> 
   </div> 
   <div class="footer-copyright"> 
    <div class="container"> 
     <div class="row"> 
      <div class="col-md-1"> 
       <a href="index.htm" class="logo"> <img alt="Tutorials Point" class="img-responsive" src="/scripts/img/logo-footer.png"> </a> 
      </div> 
      <div class="col-md-4 col-sm-12 col-xs-12"> 
       <nav id="sub-menu"> 
        <ul> 
         <li><a href="/about/tutorials_writing.htm">Write for us</a></li> 
         <li><a href="/about/faq.htm">FAQ's</a></li> 
         <li><a href="/about/about_helping.htm">Helping</a></li> 
         <li><a href="/about/contact_us.htm">Contact</a></li> 
        </ul> 
       </nav> 
      </div> 
      <div class="col-md-3 col-sm-12 col-xs-12"> 
       <p>© Copyright 2016. All Rights Reserved.</p> 
      </div> 
      <div class="col-md-4 col-sm-12 col-xs-12"> 
       <div class="news-group"> 
        <input type="text" class="form-control-foot search" name="textemail" id="textemail" autocomplete="off" placeholder="Enter email for newsletter" onfocus="if (this.value == 'Enter email for newsletter...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Enter email for newsletter...';}"> 
        <span class="input-group-btn"> <button class="btn btn-default btn-footer" id="btnemail" type="submit" onclick="javascript:void(0);">go</button> </span> 
        <div id="newsresponse"></div> 
       </div> 
      </div> 
     </div> 
    </div> 
   </div> 
  </div> 
  <!-- Libs --> 
  <script type="text/javascript" src="/theme/js/custom-min.js"></script> 
  <script src="http://www.google-analytics.com/urchin.js">
</script> 
  <script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
$('.pg-icon').click(function(){
   $('.wrapLoader').show();
});
</script> 
  <script type="text/javascript" src="/theme/js/jquery.colorbox-min.js"></script> 
  <script type="text/javascript">
   var tryit = new $.TryIt('/nodejs/try_nodejs.php');
   tryit.compile();
</script>   
 </body>
</html>