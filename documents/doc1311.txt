http://tutorialspoint.com/nodejs/nodejs_buffers.htm
<!doctype html>
<!--[if lt IE 7 ]> <html lang="en" class="no-js ie6"> <![endif]-->
<!--[if IE 7 ]> <html lang="en" class="no-js ie7"> <![endif]-->
<!--[if IE 8 ]> <html lang="en" class="no-js ie8"> <![endif]-->
<!--[if IE 9 ]> <html lang="en" class="no-js ie9"> <![endif]-->
<!--[if (gt IE 9)|!(IE)]><!-->
<html lang="en">
 <!--<![endif]-->
 <head> 
  <meta charset="utf-8"> 
  <title>Node.js Buffers</title> 
  <meta name="description" content="Node.js Buffers - Learn Node.js framework in simple and easy steps starting from Introduction, Environment Setup, Node Package Manager, Node Callbacks Concept, Node Buffers Module, Node Streams, Node File System, Node Utility Modules, Node Web Module, Node Express Application, Node RESTFul API, Node Scaling Application"> 
  <meta name="keywords" content="Introduction, Environment Setup, Node Package Manager, Global vs Local Installation, Node Callbacks Concept, locking vs non-blocking Code, Event Driven Programming, Event Loop Overview, Event Emitters, Implementing Callbacks, Node Buffers Module,JSON to JS Objects, JS Objects to JSON, Buffer Objects, Node Streams, Reading Stream, Writing Stream, Piping Stream, Node File System, File System Module, Synchronous vs Asynchronous Node, Utility Modules,Node Console Module, Node Process Module, Node OS Module, Node Path Module, Node Net Module, Node DNS Module, Node Domain Module, Node Globals Module, Node Web Module,HTTP Servers with Node.js, HTTP Clients with Node.js, Node Express Application, Express Overview, Installing Express, Express Generator, Node RESTFul API, Node Scaling Application,The exec function,The spawn function,The fork function"> 
  <base href="http://www.tutorialspoint.com/"> 
  <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon"> 
  <meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes"> 
  <meta property="og:locale" content="en_US"> 
  <meta property="og:type" content="website"> 
  <meta property="fb:app_id" content="471319149685276"> 
  <meta property="og:site_name" content="www.tutorialspoint.com"> 
  <meta name="robots" content="index, follow"> 
  <meta name="apple-mobile-web-app-capable" content="yes"> 
  <meta name="apple-mobile-web-app-status-bar-style" content="black"> 
  <meta name="author" content="tutorialspoint.com"> 
  <script type="text/javascript" src="/theme/js/script-min-v4.js"></script> 
  <link rel="stylesheet" href="/theme/css/style-min.css"> 
  <!-- Head Libs --> 
  <!--[if IE 8]>
<link rel="stylesheet" type="text/css" href="/theme/css/ie8.css">
<![endif]--> 
  <style>
.fa-camera:before{content:"\f03d";font-family:FontAwesome;font-style:normal;font-size:100%}
pre.prettyprint.tryit {min-height:37px; background: #eee url(/nodejs/images/try-it.jpg) top right no-repeat !important}div.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #82af25 url(/images/pattern.png) repeat center center !important;}
.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #82af25 !important;}
.submenu-item{ border-bottom: 2px solid #82af25 !important; border-top: 2px solid #82af25 !important }
</style> 
  <script>
$(document).ready(function() {
  $('input[name="q"]').keydown(function(event){
    if(event.keyCode == 13) {
      event.preventDefault();
      return false;
    }
  });
});
</script> 
 </head> 
 <body onload="prettyPrint()"> 
  <div class="wrapLoader"> 
   <div class="imgLoader"> 
    <img src="/images/loading-cg.gif" alt="" width="70" height="70"> 
   </div> 
  </div> 
  <header> 
   <div class="submenu-item sub-main-menu" id="top-sub-menu"></div> 
   <div class="container"> 
    <h1 class="logo"> <a href="index.htm" title="tutorialspoint"> <img alt="tutorialspoint" src="/nodejs/images/logo.png"> </a> </h1> 
    <button class="btn btn-responsive-nav btn-inverse" data-toggle="collapse" data-target=".nav-main-collapse" id="pull"> <i class="icon icon-bars"></i> </button> 
    <div class="navbar nav-main"> 
     <div class="container"> 
      <nav class="nav-main mega-menu"> 
       <ul class="nav nav-pills nav-main" id="mainMenu"> 
        <li class="dropdown no-sub-menu"> <a class="dropdown" href="index.htm"><i class="icon icon-home"></i> Home</a> </li> 
        <li class="dropdown" id="liTL"><a class="dropdown" href="javascript:void(0);"><span class="tut-lib"> Tutorials Library <i class="fa-caret-down"></i></span></a></li> 
        <li class="dropdown no-sub-menu"><a class="dropdown" href="codingground.htm"><i class="fa-code"></i> Coding Ground </a> </li> 
        <li class="dropdown no-sub-menu"><a class="dropdown" href="tutor_connect/index.php"><i class="fa-user"> </i> Tutor Connect</a></li> 
        <li class="dropdown no-sub-menu"><a class="dropdown" href="online_dev_tools.htm"><span class="dev-tools-menu"> Tools</span></a></li> 
       </ul> 
      </nav> 
      <div class="searchform-popup"> 
       <input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off"> 
       <div class="magnifying-glass">
        <i class="icon-search"></i> Search 
       </div> 
      </div> 
     </div> 
    </div> 
   </div>
  </header> 
  <div style="clear:both;"></div> 
  <div role="main" class="main"> 
   <div class="container"> 
    <div class="row"> 
     <div class="col-md-2"> 
      <aside class="sidebar"> 
       <div class="mini-logo"> 
        <img src="/nodejs/images/nodejs-mini-logo.jpg" alt="Node.js Tutorial"> 
       </div> 
       <ul class="nav nav-list primary left-menu"> 
        <li class="heading">Node.js Tutorial</li> 
        <li><a href="/nodejs/index.htm">Node.js Home</a></li> 
        <li><a href="/nodejs/nodejs_introduction.htm">Node.js Introduction</a></li> 
        <li><a href="/nodejs/nodejs_environment_setup.htm">Node.js Environment Setup</a></li> 
        <li><a href="/nodejs/nodejs_first_application.htm">Node.js First Application</a></li> 
        <li><a href="/nodejs/nodejs_repl_terminal.htm">Node.js REPL Terminal</a></li> 
        <li><a href="/nodejs/nodejs_npm.htm">Node.js Package Manager (NPM)</a></li> 
        <li><a href="/nodejs/nodejs_callbacks_concept.htm">Node.js Callbacks Concept</a></li> 
        <li><a href="/nodejs/nodejs_event_loop.htm">Node.js Event Loop</a></li> 
        <li><a href="/nodejs/nodejs_event_emitter.htm">Node.js Event Emitter</a></li> 
        <li><a href="/nodejs/nodejs_buffers.htm">Node.js Buffers</a></li> 
        <li><a href="/nodejs/nodejs_streams.htm">Node.js Streams</a></li> 
        <li><a href="/nodejs/nodejs_file_system.htm">Node.js File System</a></li> 
        <li><a href="/nodejs/nodejs_global_objects.htm">Node.js Global Objects</a></li> 
        <li><a href="/nodejs/nodejs_utitlity_module.htm">Node.js Utility Modules</a></li> 
        <li><a href="/nodejs/nodejs_web_module.htm">Node.js Web Module</a></li> 
        <li><a href="/nodejs/nodejs_express_framework.htm">Node.js Express Framework</a></li> 
        <li><a href="/nodejs/nodejs_restful_api.htm">Node.js RESTFul API</a></li> 
        <li><a href="/nodejs/nodejs_scaling_application.htm">Node.js Scaling Application</a></li> 
        <li><a href="/nodejs/nodejs_packaging.htm">Node.js Packaging</a></li> 
        <li class="heading">Node.js Useful Resources</li> 
        <li><a href="/nodejs/nodejs_questions_answers.htm">Node.js - Questions and Answers</a></li> 
        <li><a href="/nodejs/nodejs_quick_guide.htm">Node.js - Quick Guide</a></li> 
        <li><a href="/nodejs/nodejs_useful_resources.htm">Node.js - Useful Resources</a></li> 
       </ul> 
       <ul class="nav nav-list primary push-bottom left-menu special"> 
        <li class="sreading">Selected Reading</li> 
        <li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li> 
        <li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li> 
        <li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li> 
        <li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li> 
        <li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li> 
        <li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li> 
       </ul> 
      </aside> 
     </div> 
     <!-- PRINTING STARTS HERE --> 
     <div class="row"> 
      <div class="content"> 
       <div class="col-md-7 middle-col"> 
        <h1>Node.js - Buffers</h1> 
        <hr> 
        <div class="topgooglead"> 
         <div class="topadtag">
          Advertisements
         </div> 
         <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> 
         <ins class="adsbygoogle top_ad_slot" style="display:inline-block;" data-ad-client="ca-pub-7133395778201029" data-ad-slot="2813390526"> </ins> 
         <script>(adsbygoogle = window.adsbygoogle || []).push({});</script> 
        </div> 
        <hr> 
        <div class="pre-btn"> 
         <a href="/nodejs/nodejs_callbacks_concept.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a> 
        </div> 
        <div class="nxt-btn"> 
         <a href="/nodejs/nodejs_streams.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a> 
        </div> 
        <div class="clearer"></div> 
        <hr> 
        <p>Pure JavaScript is Unicode friendly but not nice to binary data. When dealing with TCP streams or the file system, it's necessary to handle octet streams. Node provides Buffer class which provides instances to store raw data similar to an array of integers but corresponds to a raw memory allocation outside the V8 heap.</p> 
        <p>Buffer class is a global class and can be accessed in application without importing buffer module.</p> 
        <h2>Creating Buffers</h2> 
        <p>Node Buffer can be constructed in a variety of ways.</p> 
        <h3>Method 1</h3> 
        <p>Following is the syntax to create an uninitiated Buffer of <b>10</b> octets:</p> 
        <pre class="prettyprint notranslate">
var buf = new Buffer(10);
</pre> 
        <h3>Method 2</h3> 
        <p>Following is the syntax to create a Buffer from a given array:</p> 
        <pre class="prettyprint notranslate">
var buf = new Buffer([10, 20, 30, 40, 50]);
</pre> 
        <h3>Method 3</h3> 
        <p>Following is the syntax to create a Buffer from a given string and optionally encoding type:</p> 
        <pre class="prettyprint notranslate">
var buf = new Buffer("Simply Easy Learning", "utf-8");
</pre> 
        <p>Though "utf8" is the default encoding but you can use either of the encodings "ascii", "utf8", "utf16le", "ucs2", "base64" or "hex".</p> 
        <h2>Writing to Buffers</h2> 
        <h3>Syntax</h3> 
        <p>Following is the syntax of the method to write into a Node Buffer:</p> 
        <pre class="prettyprint notranslate">
buf.write(string[, offset][, length][, encoding])
</pre> 
        <h3>Parameters</h3> 
        <p>Here is the description of the parameters used:</p> 
        <ul class="list"> 
         <li><p><b>string</b> - This is string data to be written to buffer.</p></li> 
         <li><p><b>offset</b> - This is the index of the buffer to start writing at. Default value is 0.</p></li> 
         <li><p><b>length</b> - This is the number of bytes to write. Defaults to buffer.length</p></li> 
         <li><p><b>encoding</b> - Encoding to use. 'utf8' is the default encoding</p></li> 
        </ul> 
        <h3>Return Value</h3> 
        <p>This method returns number of octets written. If there is not enough space in the buffer to fit the entire string, it will write a part of the string.</p> 
        <h3>Example</h3> 
        <pre class="prettyprint tryit">
buf = new Buffer(256);
len = buf.write("Simply Easy Learning");

console.log("Octets written : "+  len);
</pre> 
        <p>When above program is executed, it produces following result:</p> 
        <pre class="prettyprint notranslate">
Octets written : 20
</pre> 
        <h2>Reading from Buffers</h2> 
        <h3>Syntax</h3> 
        <p>Following is the syntax of the method to read data from a Node Buffer:</p> 
        <pre class="prettyprint notranslate">
buf.toString([encoding][, start][, end])
</pre> 
        <h3>Parameters</h3> 
        <p>Here is the description of the parameters used:</p> 
        <ul class="list"> 
         <li><p><b>encoding</b> - Encoding to use. 'utf8' is the default encoding</p></li> 
         <li><p><b>start</b> - Beginning index to start reading, defaults to 0.</p></li> 
         <li><p><b>end</b> - End index to end reading, defaults is complete buffer.</p></li> 
        </ul> 
        <h3>Return Value</h3> 
        <p>This method decodes and returns a string from buffer data encoded using the specified character set encoding.</p> 
        <h3>Example</h3> 
        <pre class="prettyprint tryit">
buf = new Buffer(26);
for (var i = 0 ; i &lt; 26 ; i++) {
  buf[i] = i + 97;
}

console.log( buf.toString('ascii'));       // outputs: abcdefghijklmnopqrstuvwxyz
console.log( buf.toString('ascii',0,5));   // outputs: abcde
console.log( buf.toString('utf8',0,5));    // outputs: abcde
console.log( buf.toString(undefined,0,5)); // encoding defaults to 'utf8', outputs abcde
</pre> 
        <p>When above program is executed, it produces following result:</p> 
        <pre class="prettyprint notranslate">
abcdefghijklmnopqrstuvwxyz
abcde
abcde
abcde
</pre> 
        <h2>Convert Buffer to JSON</h2> 
        <h3>Syntax</h3> 
        <p>Following is the syntax of the method to convert a Node Buffer into JSON object:</p> 
        <pre class="prettyprint notranslate">
buf.toJSON()
</pre> 
        <h3>Return Value</h3> 
        <p>This method returns a JSON-representation of the Buffer instance.</p> 
        <h3>Example</h3> 
        <pre class="prettyprint tryit">
var buf = new Buffer('Simply Easy Learning');
var json = buf.toJSON(buf);

console.log(json);
</pre> 
        <p>When above program is executed, it produces following result:</p> 
        <pre class="prettyprint notranslate">
[ 83, 105, 109, 112, 108, 121, 32, 69, 97, 115, 121, 32, 76, 101, 97, 114, 110, 105, 110, 103 ]
</pre> 
        <h2>Concatenate Buffers</h2> 
        <h3>Syntax</h3> 
        <p>Following is the syntax of the method to concatenate Node buffers to a single Node Buffer:</p> 
        <pre class="prettyprint notranslate">
Buffer.concat(list[, totalLength])
</pre> 
        <h3>Parameters</h3> 
        <p>Here is the description of the parameters used:</p> 
        <ul class="list"> 
         <li><p><b>list</b> - Array List of Buffer objects to be concatenated </p></li> 
         <li><p><b>totalLength</b> - This is the total length of the buffers when concatenated</p></li> 
        </ul> 
        <h3>Return Value</h3> 
        <p>This method returns a Buffer instance.</p> 
        <h3>Example</h3> 
        <pre class="prettyprint tryit">
var buffer1 = new Buffer('TutorialsPoint ');
var buffer2 = new Buffer('Simply Easy Learning');
var buffer3 = Buffer.concat([buffer1,buffer2]);
console.log("buffer3 content: " + buffer3.toString());
</pre> 
        <p>When above program is executed, it produces following result:</p> 
        <pre class="prettyprint notranslate">
buffer3 content: TutorialsPoint Simply Easy Learning
</pre> 
        <h2>Compare Buffers</h2> 
        <h3>Syntax</h3> 
        <p>Following is the syntax of the method to compare two Node buffers:</p> 
        <pre class="prettyprint notranslate">
buf.compare(otherBuffer);
</pre> 
        <h3>Parameters</h3> 
        <p>Here is the description of the parameters used:</p> 
        <ul class="list"> 
         <li><p><b>otherBuffer</b> - This is the other buffer which will be compared with <b>buf</b></p></li> 
        </ul> 
        <h3>Return Value</h3> 
        <p>Returns a number indicating whether this comes before or after or is the same as the otherBuffer in sort order.</p> 
        <h3>Example</h3> 
        <pre class="prettyprint tryit">
var buffer1 = new Buffer('ABC');
var buffer2 = new Buffer('ABCD');
var result = buffer1.compare(buffer2);

if(result &lt; 0) {
   console.log(buffer1 +" comes before " + buffer2);
}else if(result == 0){
   console.log(buffer1 +" is same as " + buffer2);
}else {
   console.log(buffer1 +" comes after " + buffer2);
}
</pre> 
        <p>When above program is executed, it produces following result:</p> 
        <pre class="prettyprint notranslate">
ABC comes before ABCD
</pre> 
        <h2>Copy Buffer</h2> 
        <h3>Syntax</h3> 
        <p>Following is the syntax of the method to copy a node buffer:</p> 
        <pre class="prettyprint notranslate">
buf.copy(targetBuffer[, targetStart][, sourceStart][, sourceEnd])
</pre> 
        <h3>Parameters</h3> 
        <p>Here is the description of the parameters used:</p> 
        <ul class="list"> 
         <li><p><b>targetBuffer</b> - Buffer object where buffer will be copied.</p></li> 
         <li><p><b>targetStart</b> - Number, Optional, Default: 0</p></li> 
         <li><p><b>sourceStart</b> - Number, Optional, Default: 0</p></li> 
         <li><p><b>sourceEnd</b> - Number, Optional, Default: buffer.length</p></li> 
        </ul> 
        <h3>Return Value</h3> 
        <p>No return value. Copies data from a region of this buffer to a region in the target buffer even if the target memory region overlaps with the source. If undefined the targetStart and sourceStart parameters default to 0 while sourceEnd defaults to buffer.length.</p> 
        <h3>Example</h3> 
        <pre class="prettyprint tryit">
var buffer1 = new Buffer('ABC');
//copy a buffer
var buffer2 = new Buffer(3);
buffer1.copy(buffer2);
console.log("buffer2 content: " + buffer2.toString());
</pre> 
        <p>When above program is executed, it produces following result:</p> 
        <pre class="prettyprint notranslate">
buffer2 content: ABC
</pre> 
        <h2>Slice Buffer</h2> 
        <h3>Syntax</h3> 
        <p>Following is the syntax of the method to get a sub-buffer of a node buffer:</p> 
        <pre class="prettyprint notranslate">
buf.slice([start][, end])
</pre> 
        <h3>Parameters</h3> 
        <p>Here is the description of the parameters used:</p> 
        <ul class="list"> 
         <li><p><b>start</b> - Number, Optional, Default: 0</p></li> 
         <li><p><b>end</b> - Number, Optional, Default: buffer.length</p></li> 
        </ul> 
        <h3>Return Value</h3> 
        <p>Returns a new buffer which references the same memory as the old, but offset and cropped by the start (defaults to 0) and end (defaults to buffer.length) indexes. Negative indexes start from the end of the buffer.</p> 
        <h3>Example</h3> 
        <pre class="prettyprint tryit">
var buffer1 = new Buffer('TutorialsPoint');
//slicing a buffer
var buffer2 = buffer1.slice(0,9);
console.log("buffer2 content: " + buffer2.toString());
</pre> 
        <p>When above program is executed, it produces following result:</p> 
        <pre class="prettyprint notranslate">
buffer2 content: Tutorials
</pre> 
        <h2>Buffer Length</h2> 
        <h3>Syntax</h3> 
        <p>Following is the syntax of the method to get a size of a node buffer in bytes:</p> 
        <pre class="prettyprint notranslate">
buf.length;
</pre> 
        <h3>Return Value</h3> 
        <p>Returns a size of buffer in bytes.</p> 
        <h3>Example</h3> 
        <pre class="prettyprint tryit">
var buffer = new Buffer('TutorialsPoint');
//length of the buffer
console.log("buffer length: " + buffer.length);
</pre> 
        <p>When above program is executed, it produces following result:</p> 
        <pre class="prettyprint notranslate">
buffer length: 14
</pre> 
        <h2>Methods Reference</h2> 
        <p>Following is a reference of Buffers module available in Node.js. For a further detail you can refer to official documentation.</p> 
        <table class="src"> 
         <tbody>
          <tr>
           <th>SN</th>
           <th>Method &amp; Description</th>
          </tr> 
          <tr>
           <td>1</td>
           <td><b>new Buffer(size)</b> <br>Allocates a new buffer of size octets. Note, size must be no more than kMaxLength. Otherwise, a RangeError will be thrown here.</td>
          </tr> 
          <tr>
           <td>2</td>
           <td><b>new Buffer(buffer)</b> <br>Copies the passed buffer data onto a new Buffer instance.</td>
          </tr> 
          <tr>
           <td>3</td>
           <td><b>new Buffer(str[, encoding])</b><br> Allocates a new buffer containing the given str. encoding defaults to 'utf8'.</td>
          </tr> 
          <tr>
           <td>4</td>
           <td><b>buf.length</b><br> Returns the size of the buffer in bytes. Note that this is not necessarily the size of the contents. length refers to the amount of memory allocated for the buffer object. It does not change when the contents of the buffer are changed.</td>
          </tr> 
          <tr>
           <td>5</td>
           <td><b>buf.write(string[, offset][, length][, encoding])</b><br>Writes string to the buffer at offset using the given encoding. offset defaults to 0, encoding defaults to 'utf8'. length is the number of bytes to write. Returns number of octets written.</td>
          </tr> 
          <tr>
           <td>6</td>
           <td><b>buf.writeUIntLE(value, offset, byteLength[, noAssert])</b><br>Writes value to the buffer at the specified offset and byteLength. Supports up to 48 bits of accuracy. Set noAssert to true to skip validation of value and offset. Defaults to false.</td>
          </tr> 
          <tr>
           <td>7</td>
           <td><b>buf.writeUIntBE(value, offset, byteLength[, noAssert])</b><br>Writes value to the buffer at the specified offset and byteLength. Supports up to 48 bits of accuracy. Set noAssert to true to skip validation of value and offset. Defaults to false.</td>
          </tr> 
          <tr>
           <td>8</td>
           <td><b>buf.writeIntLE(value, offset, byteLength[, noAssert])</b><br>Writes value to the buffer at the specified offset and byteLength. Supports up to 48 bits of accuracy. Set noAssert to true to skip validation of value and offset. Defaults to false.</td>
          </tr> 
          <tr>
           <td>9</td>
           <td><b>buf.writeIntBE(value, offset, byteLength[, noAssert])</b><br>Writes value to the buffer at the specified offset and byteLength. Supports up to 48 bits of accuracy. Set noAssert to true to skip validation of value and offset. Defaults to false.</td>
          </tr> 
          <tr>
           <td>10</td>
           <td><b>buf.readUIntLE(offset, byteLength[, noAssert])</b><br>A generalized version of all numeric read methods. Supports up to 48 bits of accuracy.Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>11</td>
           <td><b>buf.readUIntBE(offset, byteLength[, noAssert])</b><br>A generalized version of all numeric read methods. Supports up to 48 bits of accuracy.Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>12</td>
           <td><b>buf.readIntLE(offset, byteLength[, noAssert])</b><br>A generalized version of all numeric read methods. Supports up to 48 bits of accuracy.Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>13</td>
           <td><b>buf.readIntBE(offset, byteLength[, noAssert])</b><br>A generalized version of all numeric read methods. Supports up to 48 bits of accuracy.Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>14</td>
           <td><b>buf.toString([encoding][, start][, end])</b><br>Decodes and returns a string from buffer data encoded using the specified character set encoding.</td>
          </tr> 
          <tr>
           <td>15</td>
           <td><b>buf.toJSON()</b><br>Returns a JSON-representation of the Buffer instance. JSON.stringify implicitly calls this function when stringifying a Buffer instance.</td>
          </tr> 
          <tr>
           <td>16</td>
           <td><b>buf[index]</b><br>Get and set the octet at index. The values refer to individual bytes, so the legal range is between 0x00 and 0xFF hex or 0 and 255.</td>
          </tr> 
          <tr>
           <td>17</td>
           <td><b>buf.equals(otherBuffer)</b><br>Returns a boolean of whether this and otherBuffer have the same bytes.</td>
          </tr> 
          <tr>
           <td>18</td>
           <td><b>buf.compare(otherBuffer)</b><br>Returns a number indicating whether this comes before or after or is the same as the otherBuffer in sort order.</td>
          </tr> 
          <tr>
           <td>19</td>
           <td><b>buf.copy(targetBuffer[, targetStart][, sourceStart][, sourceEnd])</b><br>Copies data from a region of this buffer to a region in the target buffer even if the target memory region overlaps with the source. If undefined the targetStart and sourceStart parameters default to 0 while sourceEnd defaults to buffer.length.</td>
          </tr> 
          <tr>
           <td>20</td>
           <td><b>buf.slice([start][, end])</b><br>Returns a new buffer which references the same memory as the old, but offset and cropped by the start (defaults to 0) and end (defaults to buffer.length) indexes. Negative indexes start from the end of the buffer.</td>
          </tr> 
          <tr>
           <td>21</td>
           <td><b>buf.readUInt8(offset[, noAssert])</b><br>Reads an unsigned 8 bit integer from the buffer at the specified offset. Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>22</td>
           <td><b>buf.readUInt16LE(offset[, noAssert])</b><br>Reads an unsigned 16 bit integer from the buffer at the specified offset with specified endian format. Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>23</td>
           <td><b>buf.readUInt16BE(offset[, noAssert])</b><br>Reads an unsigned 16 bit integer from the buffer at the specified offset with specified endian format. Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>24</td>
           <td><b>buf.readUInt32LE(offset[, noAssert])</b><br>Reads an unsigned 32 bit integer from the buffer at the specified offset with specified endian format. Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>25</td>
           <td><b>buf.readUInt32BE(offset[, noAssert])</b><br>Reads an unsigned 32 bit integer from the buffer at the specified offset with specified endian format. Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>26</td>
           <td><b>buf.readInt8(offset[, noAssert])</b><br>Reads a signed 8 bit integer from the buffer at the specified offset. Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>27</td>
           <td><b>buf.readInt16LE(offset[, noAssert])</b><br>Reads a signed 16 bit integer from the buffer at the specified offset with specified endian format. Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>28</td>
           <td><b>buf.readInt16BE(offset[, noAssert])</b><br>Reads a signed 16 bit integer from the buffer at the specified offset with specified endian format. Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>29</td>
           <td><b>buf.readInt32LE(offset[, noAssert])</b><br>Reads a signed 32 bit integer from the buffer at the specified offset with specified endian format. Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>30</td>
           <td><b>buf.readInt32BE(offset[, noAssert])</b><br>Reads a signed 32 bit integer from the buffer at the specified offset with specified endian format. Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>31</td>
           <td><b>buf.readFloatLE(offset[, noAssert])</b><br>Reads a 32 bit float from the buffer at the specified offset with specified endian format. Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>32</td>
           <td><b>buf.readFloatBE(offset[, noAssert])</b><br>Reads a 32 bit float from the buffer at the specified offset with specified endian format. Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>33</td>
           <td><b>buf.readDoubleLE(offset[, noAssert])</b><br>Reads a 64 bit double from the buffer at the specified offset with specified endian format. Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>34</td>
           <td><b>buf.readDoubleBE(offset[, noAssert])</b><br>Reads a 64 bit double from the buffer at the specified offset with specified endian format. Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>35</td>
           <td><b>buf.writeUInt8(value, offset[, noAssert])</b><br>Writes value to the buffer at the specified offset. Note, value must be a valid unsigned 8 bit integer. Set noAssert to true to skip validation of value and offset. This means that value may be too large for the specific function and offset may be beyond the end of the buffer leading to the values being silently dropped. This should not be used unless you are certain of correctness. Defaults to false.</td>
          </tr> 
          <tr>
           <td>36</td>
           <td><b>buf.writeUInt16LE(value, offset[, noAssert])</b><br>Writes value to the buffer at the specified offset with specified endian format. Note, value must be a valid unsigned 16 bit integer. Set noAssert to true to skip validation of value and offset. This means that value may be too large for the specific function and offset may be beyond the end of the buffer leading to the values being silently dropped. This should not be used unless you are certain of correctness. Defaults to false.</td>
          </tr> 
          <tr>
           <td>37</td>
           <td><b>buf.writeUInt16BE(value, offset[, noAssert])</b><br>Writes value to the buffer at the specified offset with specified endian format. Note, value must be a valid unsigned 16 bit integer. Set noAssert to true to skip validation of value and offset. This means that value may be too large for the specific function and offset may be beyond the end of the buffer leading to the values being silently dropped. This should not be used unless you are certain of correctness. Defaults to false.</td>
          </tr> 
          <tr>
           <td>38</td>
           <td><b>buf.writeUInt32LE(value, offset[, noAssert])</b><br>Writes value to the buffer at the specified offset with specified endian format. Note, value must be a valid unsigned 32 bit integer. Set noAssert to true to skip validation of value and offset. This means that value may be too large for the specific function and offset may be beyond the end of the buffer leading to the values being silently dropped. This should not be used unless you are certain of correctness. Defaults to false.</td>
          </tr> 
          <tr>
           <td>39</td>
           <td><b>buf.writeUInt32BE(value, offset[, noAssert])</b><br>Writes value to the buffer at the specified offset with specified endian format. Note, value must be a valid unsigned 32 bit integer. Set noAssert to true to skip validation of value and offset. This means that value may be too large for the specific function and offset may be beyond the end of the buffer leading to the values being silently dropped. This should not be used unless you are certain of correctness. Defaults to false.</td>
          </tr> 
          <tr>
           <td>40</td>
           <td><b>buf.writeInt8(value, offset[, noAssert])</b><br>Writes value to the buffer at the specified offset with specified endian format. Note, value must be a valid signed 8 bit integer. Set noAssert to true to skip validation of value and offset. This means that value may be too large for the specific function and offset may be beyond the end of the buffer leading to the values being silently dropped. This should not be used unless you are certain of correctness. Defaults to false.</td>
          </tr> 
          <tr>
           <td>41</td>
           <td><b>buf.writeInt16LE(value, offset[, noAssert])</b><br>Writes value to the buffer at the specified offset with specified endian format. Note, value must be a valid signed 16 bit integer. Set noAssert to true to skip validation of value and offset. This means that value may be too large for the specific function and offset may be beyond the end of the buffer leading to the values being silently dropped. This should not be used unless you are certain of correctness. Defaults to false.</td>
          </tr> 
          <tr>
           <td>42</td>
           <td><b>buf.writeInt16BE(value, offset[, noAssert])</b><br>Writes value to the buffer at the specified offset with specified endian format. Note, value must be a valid signed 16 bit integer. Set noAssert to true to skip validation of value and offset. This means that value may be too large for the specific function and offset may be beyond the end of the buffer leading to the values being silently dropped. This should not be used unless you are certain of correctness. Defaults to false.</td>
          </tr> 
          <tr>
           <td>43</td>
           <td><b>buf.writeInt32LE(value, offset[, noAssert])</b><br>Writes value to the buffer at the specified offset with specified endian format. Note, value must be a valid signed 32 bit integer. Set noAssert to true to skip validation of value and offset. This means that value may be too large for the specific function and offset may be beyond the end of the buffer leading to the values being silently dropped. This should not be used unless you are certain of correctness. Defaults to false.</td>
          </tr> 
          <tr>
           <td>44</td>
           <td><b>buf.writeInt32BE(value, offset[, noAssert])</b><br>Writes value to the buffer at the specified offset with specified endian format. Note, value must be a valid signed 32 bit integer. Set noAssert to true to skip validation of value and offset. This means that value may be too large for the specific function and offset may be beyond the end of the buffer leading to the values being silently dropped. This should not be used unless you are certain of correctness. Defaults to false.</td>
          </tr> 
          <tr>
           <td>45</td>
           <td><b>buf.writeFloatLE(value, offset[, noAssert])</b><br>Writes value to the buffer at the specified offset with specified endian format. Note, value must be a valid 32 bit float. Set noAssert to true to skip validation of value and offset. This means that value may be too large for the specific function and offset may be beyond the end of the buffer leading to the values being silently dropped. This should not be used unless you are certain of correctness. Defaults to false.</td>
          </tr> 
          <tr>
           <td>46</td>
           <td><b>buf.writeFloatBE(value, offset[, noAssert])</b><br>Writes value to the buffer at the specified offset with specified endian format. Note, value must be a valid 32 bit float. Set noAssert to true to skip validation of value and offset. This means that value may be too large for the specific function and offset may be beyond the end of the buffer leading to the values being silently dropped. This should not be used unless you are certain of correctness. Defaults to false.</td>
          </tr> 
          <tr>
           <td>47</td>
           <td><b>buf.writeDoubleLE(value, offset[, noAssert])</b><br>Writes value to the buffer at the specified offset with specified endian format. Note, value must be a valid 64 bit double. Set noAssert to true to skip validation of value and offset. This means that value may be too large for the specific function and offset may be beyond the end of the buffer leading to the values being silently dropped. This should not be used unless you are certain of correctness. Defaults to false.</td>
          </tr> 
          <tr>
           <td>48</td>
           <td><b>buf.writeDoubleBE(value, offset[, noAssert])</b><br>Writes value to the buffer at the specified offset with specified endian format. Note, value must be a valid 64 bit double. Set noAssert to true to skip validation of value and offset. This means that value may be too large for the specific function and offset may be beyond the end of the buffer leading to the values being silently dropped. This should not be used unless you are certain of correctness. Defaults to false.</td>
          </tr> 
          <tr>
           <td>49</td>
           <td><b>buf.fill(value[, offset][, end])</b><br>Fills the buffer with the specified value. If the offset (defaults to 0) and end (defaults to buffer.length) are not given it will fill the entire buffer.</td>
          </tr> 
         </tbody>
        </table> 
        <h2>Class Methods</h2> 
        <table class="src"> 
         <tbody>
          <tr>
           <th>SN</th>
           <th>Method &amp; Description</th>
          </tr> 
          <tr>
           <td>1</td>
           <td><b>Buffer.isEncoding(encoding)</b><br>Returns true if the encoding is a valid encoding argument, or false otherwise.</td>
          </tr> 
          <tr>
           <td>2</td>
           <td><b>Buffer.isBuffer(obj)</b><br>Tests if obj is a Buffer.</td>
          </tr> 
          <tr>
           <td>3</td>
           <td><b>Buffer.byteLength(string[, encoding])</b><br>Gives the actual byte length of a string. encoding defaults to 'utf8'. This is not the same as String.prototype.length since that returns the number of characters in a string.</td>
          </tr> 
          <tr>
           <td>4</td>
           <td><b>Buffer.concat(list[, totalLength])</b><br>Returns a buffer which is the result of concatenating all the buffers in the list together.</td>
          </tr> 
          <tr>
           <td>5</td>
           <td><b>Buffer.compare(buf1, buf2)</b><br>The same as buf1.compare(buf2). Useful for sorting an Array of Buffers.</td>
          </tr> 
         </tbody>
        </table> 
        <hr> 
        <div class="pre-btn"> 
         <a href="/nodejs/nodejs_callbacks_concept.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a> 
        </div>
        <div class="print-btn"> 
         <a href="/cgi-bin/printpage.cgi" target="_blank"><i class="icon icon-print big-font"></i> Print</a> 
        </div> 
        <div class="pdf-btn"> 
         <a href="/nodejs/pdf/nodejs_buffers.pdf" title="Node.js Buffers" target="_blank"><i class="icon icon-file-pdf-o big-font"></i> PDF</a> 
        </div> 
        <div class="nxt-btn"> 
         <a href="/nodejs/nodejs_streams.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a> 
        </div> 
        <hr> 
        <!-- PRINTING ENDS HERE --> 
        <div class="bottomgooglead"> 
         <div class="bottomadtag">
          Advertisements
         </div> 
         <script type="text/javascript"><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script> 
         <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script> 
        </div> 
       </div> 
      </div> 
      <div class="row"> 
       <div class="col-md-3" id="rightbar"> 
        <div class="simple-ad"> 
         <a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('http://www.facebook.com/sharer.php?u=' + 'http://www.tutorialspoint.com/nodejs/nodejs_buffers.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;"> <img src="/images/facebookIcon.jpg" alt="img"> </a> 
         <a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('http://twitter.com/share?url=' + 'http://www.tutorialspoint.com/nodejs/nodejs_buffers.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;"> <img src="/images/twitterIcon.jpg" alt="img"> </a> 
         <a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'http://www.tutorialspoint.com/nodejs/nodejs_buffers.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;"> <img src="/images/linkedinIcon.jpg" alt="img"> </a> 
         <a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=http://www.tutorialspoint.com/nodejs/nodejs_buffers.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;"> <img src="/images/googlePlusIcon.jpg" alt="img"> </a> 
         <a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('http://www.stumbleupon.com/submit?url=http://www.tutorialspoint.com/nodejs/nodejs_buffers.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;"> <img src="/images/StumbleUponIcon.jpg" alt="img"> </a> 
         <a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('http://reddit.com/submit?url=http://www.tutorialspoint.com/nodejs/nodejs_buffers.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;"> <img src="/images/reddit.jpg" alt="img"> </a> 
        </div> 
        <div class="rightgooglead"> 
         <script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script> 
         <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script> 
        </div> 
        <div class="rightgooglead"> 
         <script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 300;
google_ad_height = 600;
google_ad_format = "300x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script> 
         <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script> 
        </div> 
        <div class="rightgooglead"> 
         <script type="text/javascript"><!--
google_ad_client = "ca-pub-2537027957187252";
/* Right Side Ad */
google_ad_slot = "right_side_ad";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script> 
         <script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js">
</script> 
        </div> 
       </div> 
      </div> 
     </div> 
    </div> 
   </div> 
   <div class="footer-copyright"> 
    <div class="container"> 
     <div class="row"> 
      <div class="col-md-1"> 
       <a href="index.htm" class="logo"> <img alt="Tutorials Point" class="img-responsive" src="/scripts/img/logo-footer.png"> </a> 
      </div> 
      <div class="col-md-4 col-sm-12 col-xs-12"> 
       <nav id="sub-menu"> 
        <ul> 
         <li><a href="/about/tutorials_writing.htm">Write for us</a></li> 
         <li><a href="/about/faq.htm">FAQ's</a></li> 
         <li><a href="/about/about_helping.htm">Helping</a></li> 
         <li><a href="/about/contact_us.htm">Contact</a></li> 
        </ul> 
       </nav> 
      </div> 
      <div class="col-md-3 col-sm-12 col-xs-12"> 
       <p>© Copyright 2016. All Rights Reserved.</p> 
      </div> 
      <div class="col-md-4 col-sm-12 col-xs-12"> 
       <div class="news-group"> 
        <input type="text" class="form-control-foot search" name="textemail" id="textemail" autocomplete="off" placeholder="Enter email for newsletter" onfocus="if (this.value == 'Enter email for newsletter...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Enter email for newsletter...';}"> 
        <span class="input-group-btn"> <button class="btn btn-default btn-footer" id="btnemail" type="submit" onclick="javascript:void(0);">go</button> </span> 
        <div id="newsresponse"></div> 
       </div> 
      </div> 
     </div> 
    </div> 
   </div> 
  </div> 
  <!-- Libs --> 
  <script type="text/javascript" src="/theme/js/custom-min.js"></script> 
  <script src="http://www.google-analytics.com/urchin.js">
</script> 
  <script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
$('.pg-icon').click(function(){
   $('.wrapLoader').show();
});
</script> 
  <script type="text/javascript" src="/theme/js/jquery.colorbox-min.js"></script> 
  <script type="text/javascript">
   var tryit = new $.TryIt('/nodejs/try_nodejs.php');
   tryit.compile();
</script>   
 </body>
</html>