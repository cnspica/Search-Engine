http://tutorialspoint.com/nodejs/nodejs_quick_guide.htm
<!doctype html>
<!--[if lt IE 7 ]> <html lang="en" class="no-js ie6"> <![endif]-->
<!--[if IE 7 ]> <html lang="en" class="no-js ie7"> <![endif]-->
<!--[if IE 8 ]> <html lang="en" class="no-js ie8"> <![endif]-->
<!--[if IE 9 ]> <html lang="en" class="no-js ie9"> <![endif]-->
<!--[if (gt IE 9)|!(IE)]><!-->
<html lang="en">
 <!--<![endif]-->
 <head> 
  <meta charset="utf-8"> 
  <title>Node.js Quick Guide</title> 
  <meta name="description" content="Node.js Quick Guide - Learn Node.js framework in simple and easy steps starting from Introduction, Environment Setup, Node Package Manager, Node Callbacks Concept, Node Buffers Module, Node Streams, Node File System, Node Utility Modules, Node Web Module, Node Express Application, Node RESTFul API, Node Scaling Application"> 
  <meta name="keywords" content="Introduction, Environment Setup, Node Package Manager, Global vs Local Installation, Node Callbacks Concept, locking vs non-blocking Code, Event Driven Programming, Event Loop Overview, Event Emitters, Implementing Callbacks, Node Buffers Module,JSON to JS Objects, JS Objects to JSON, Buffer Objects, Node Streams, Reading Stream, Writing Stream, Piping Stream, Node File System, File System Module, Synchronous vs Asynchronous Node, Utility Modules,Node Console Module, Node Process Module, Node OS Module, Node Path Module, Node Net Module, Node DNS Module, Node Domain Module, Node Web Module,HTTP Servers with Node.js, HTTP Clients with Node.js, Node Express Application, Express Overview, Installing Express, Express Generator, Node RESTFul API, Node Scaling Application,The exec function,The spawn function,The fork function"> 
  <base href="http://www.tutorialspoint.com/"> 
  <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon"> 
  <meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes"> 
  <meta property="og:locale" content="en_US"> 
  <meta property="og:type" content="website"> 
  <meta property="fb:app_id" content="471319149685276"> 
  <meta property="og:site_name" content="www.tutorialspoint.com"> 
  <meta name="robots" content="index, follow"> 
  <meta name="apple-mobile-web-app-capable" content="yes"> 
  <meta name="apple-mobile-web-app-status-bar-style" content="black"> 
  <meta name="author" content="tutorialspoint.com"> 
  <script type="text/javascript" src="/theme/js/script-min-v4.js"></script> 
  <link rel="stylesheet" href="/theme/css/style-min.css"> 
  <!-- Head Libs --> 
  <!--[if IE 8]>
<link rel="stylesheet" type="text/css" href="/theme/css/ie8.css">
<![endif]--> 
  <style>
.fa-camera:before{content:"\f03d";font-family:FontAwesome;font-style:normal;font-size:100%}
pre.prettyprint.tryit {min-height:37px; background: #eee url(/nodejs/images/try-it.jpg) top right no-repeat !important}div.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #82af25 url(/images/pattern.png) repeat center center !important;}
.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #82af25 !important;}
.submenu-item{ border-bottom: 2px solid #82af25 !important; border-top: 2px solid #82af25 !important }
</style> 
  <script>
$(document).ready(function() {
  $('input[name="q"]').keydown(function(event){
    if(event.keyCode == 13) {
      event.preventDefault();
      return false;
    }
  });
});
</script> 
 </head> 
 <body onload="prettyPrint()"> 
  <div class="wrapLoader"> 
   <div class="imgLoader"> 
    <img src="/images/loading-cg.gif" alt="" width="70" height="70"> 
   </div> 
  </div> 
  <header> 
   <div class="submenu-item sub-main-menu" id="top-sub-menu"></div> 
   <div class="container"> 
    <h1 class="logo"> <a href="index.htm" title="tutorialspoint"> <img alt="tutorialspoint" src="/nodejs/images/logo.png"> </a> </h1> 
    <button class="btn btn-responsive-nav btn-inverse" data-toggle="collapse" data-target=".nav-main-collapse" id="pull"> <i class="icon icon-bars"></i> </button> 
    <div class="navbar nav-main"> 
     <div class="container"> 
      <nav class="nav-main mega-menu"> 
       <ul class="nav nav-pills nav-main" id="mainMenu"> 
        <li class="dropdown no-sub-menu"> <a class="dropdown" href="index.htm"><i class="icon icon-home"></i> Home</a> </li> 
        <li class="dropdown" id="liTL"><a class="dropdown" href="javascript:void(0);"><span class="tut-lib"> Tutorials Library <i class="fa-caret-down"></i></span></a></li> 
        <li class="dropdown no-sub-menu"><a class="dropdown" href="codingground.htm"><i class="fa-code"></i> Coding Ground </a> </li> 
        <li class="dropdown no-sub-menu"><a class="dropdown" href="tutor_connect/index.php"><i class="fa-user"> </i> Tutor Connect</a></li> 
        <li class="dropdown no-sub-menu"><a class="dropdown" href="online_dev_tools.htm"><span class="dev-tools-menu"> Tools</span></a></li> 
       </ul> 
      </nav> 
      <div class="searchform-popup"> 
       <input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off"> 
       <div class="magnifying-glass">
        <i class="icon-search"></i> Search 
       </div> 
      </div> 
     </div> 
    </div> 
   </div>
  </header> 
  <div style="clear:both;"></div> 
  <div role="main" class="main"> 
   <div class="container"> 
    <div class="row"> 
     <div class="col-md-2"> 
      <aside class="sidebar"> 
       <div class="mini-logo"> 
        <img src="/nodejs/images/nodejs-mini-logo.jpg" alt="Node.js Tutorial"> 
       </div> 
       <ul class="nav nav-list primary left-menu"> 
        <li class="heading">Node.js Tutorial</li> 
        <li><a href="/nodejs/index.htm">Node.js Home</a></li> 
        <li><a href="/nodejs/nodejs_introduction.htm">Node.js Introduction</a></li> 
        <li><a href="/nodejs/nodejs_environment_setup.htm">Node.js Environment Setup</a></li> 
        <li><a href="/nodejs/nodejs_first_application.htm">Node.js First Application</a></li> 
        <li><a href="/nodejs/nodejs_repl_terminal.htm">Node.js REPL Terminal</a></li> 
        <li><a href="/nodejs/nodejs_npm.htm">Node.js Package Manager (NPM)</a></li> 
        <li><a href="/nodejs/nodejs_callbacks_concept.htm">Node.js Callbacks Concept</a></li> 
        <li><a href="/nodejs/nodejs_event_loop.htm">Node.js Event Loop</a></li> 
        <li><a href="/nodejs/nodejs_event_emitter.htm">Node.js Event Emitter</a></li> 
        <li><a href="/nodejs/nodejs_buffers.htm">Node.js Buffers</a></li> 
        <li><a href="/nodejs/nodejs_streams.htm">Node.js Streams</a></li> 
        <li><a href="/nodejs/nodejs_file_system.htm">Node.js File System</a></li> 
        <li><a href="/nodejs/nodejs_global_objects.htm">Node.js Global Objects</a></li> 
        <li><a href="/nodejs/nodejs_utitlity_module.htm">Node.js Utility Modules</a></li> 
        <li><a href="/nodejs/nodejs_web_module.htm">Node.js Web Module</a></li> 
        <li><a href="/nodejs/nodejs_express_framework.htm">Node.js Express Framework</a></li> 
        <li><a href="/nodejs/nodejs_restful_api.htm">Node.js RESTFul API</a></li> 
        <li><a href="/nodejs/nodejs_scaling_application.htm">Node.js Scaling Application</a></li> 
        <li><a href="/nodejs/nodejs_packaging.htm">Node.js Packaging</a></li> 
        <li class="heading">Node.js Useful Resources</li> 
        <li><a href="/nodejs/nodejs_questions_answers.htm">Node.js - Questions and Answers</a></li> 
        <li><a href="/nodejs/nodejs_quick_guide.htm">Node.js - Quick Guide</a></li> 
        <li><a href="/nodejs/nodejs_useful_resources.htm">Node.js - Useful Resources</a></li> 
       </ul> 
       <ul class="nav nav-list primary push-bottom left-menu special"> 
        <li class="sreading">Selected Reading</li> 
        <li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li> 
        <li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li> 
        <li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li> 
        <li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li> 
        <li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li> 
        <li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li> 
       </ul> 
      </aside> 
     </div> 
     <!-- PRINTING STARTS HERE --> 
     <div class="row"> 
      <div class="content"> 
       <div class="col-md-7 middle-col"> 
        <h1>Node.js - Quick Guide</h1> 
        <hr> 
        <div class="topgooglead"> 
         <div class="topadtag">
          Advertisements
         </div> 
         <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> 
         <ins class="adsbygoogle top_ad_slot" style="display:inline-block;" data-ad-client="ca-pub-7133395778201029" data-ad-slot="2813390526"> </ins> 
         <script>(adsbygoogle = window.adsbygoogle || []).push({});</script> 
        </div> 
        <hr> 
        <div class="pre-btn"> 
         <a href="/nodejs/nodejs_questions_answers.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a> 
        </div> 
        <div class="nxt-btn"> 
         <a href="/nodejs/nodejs_useful_resources.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a> 
        </div> 
        <div class="clearer"></div> 
        <hr> 
        <h1>Node.js - Introduction</h1> 
        <h2>What is Node.js?</h2> 
        <p>Node.js is a web application framework built on Google Chrome's JavaScript Engine(V8 Engine). Its latest version is v0.10.36. Defintion of Node.js as put by its <a href="http://nodejs.org/" target="_blank" rel="nofollow">official documentation</a> is as follows:</p> 
        <blockquote> 
         <p>Node.js® is a platform built on <a href="http://code.google.com/p/v8/">Chrome's JavaScript runtime</a> for easily building fast, scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.</p> 
        </blockquote> 
        <p>Node.js comes with runtime environment on which a Javascript based script can be interpreted and executed (It is analogus to JVM to JAVA byte code). This runtime allows to execute a JavaScript code on any machine outside a browser. Because of this runtime of Node.js, JavaScript is now can be executed on server as well.</p> 
        <p>Node.js also provides a rich library of various javascript modules which eases the developement of web application using Node.js to great extents.</p> 
        <p></p>
        <center>
         Node.js = Runtime Environment + JavaScript Library
        </center>
        <p></p> 
        <h2>Features of Node.js</h2> 
        <ul class="list"> 
         <li><p><b>Aynchronous and Event Driven</b>All APIs of Node.js library are aynchronous that is non-blocking. It essentially means a Node.js based server never waits for a API to return data. Server moves to next API after calling it and a notification mechanism of Events of Node.js helps server to get response from the previous API call.</p></li> 
         <li><p><b>Very Fast</b> Being built on Google Chrome's V8 JavaScript Engine, Node.js library is very fast in code execution.</p></li> 
         <li><p><b>Single Threaded but highly Scalable</b> - Node.js uses a single threaded model with event looping. Event mechanism helps server to respond in a non-bloking ways and makes server highly scalable as opposed to traditional servers which create limited threads to handle requests. Node.js uses a single threaded program and same program can services much larger number of requests than traditional server like Apache HTTP Server.</p></li> 
         <li><p><b>No Buffering</b> - Node.js applications never buffer any data. These applications simply output the data in chunks.</p></li> 
         <li><p><b>License</b> - Node.js is released under the <a href="https://raw.githubusercontent.com/joyent/node/v0.12.0/LICENSE">MIT license</a>.</p></li> 
        </ul> 
        <h2>Who Uses Node.js?</h2> 
        <p>Following is the link on github wiki containing an exhaustive list of projects, application and companies which are using Node.js. This list include eBay, General Electric, GoDaddy, Microsoft, PayPal, Uber, Wikipins, Yahoo!, Yammer and the list continues.</p> 
        <a href="https://github.com/joyent/node/wiki/projects,-applications,-and-companies-using-node">Projects, Applications, and Companies Using Node</a> 
        <h2>Concepts</h2> 
        <p>The following diagram depicts some important parts of Node.js which we will discuss in detail in the subsequent chapters.</p> 
        <img src="/nodejs/images/nodejs_concepts.jpg" alt="Node.js Concepts"> 
        <h2>Where to Use Node.js?</h2> 
        <p>Following are the areas where Node.js is proving itself a perfect technology partner.</p> 
        <ul class="list"> 
         <li><p>I/O bound Applications</p></li> 
         <li><p>Data Streaming Applications</p></li> 
         <li><p>Data Intensive Realtime Applications (DIRT)</p></li> 
         <li><p>JSON APIs based Applications</p></li> 
         <li><p>Single Page Applications</p></li> 
        </ul> 
        <h2>Where Not to Use Node.js?</h2> 
        <p>It is not advisable to use Node.js for CPU intensive applications.</p> 
        <h1>Node.js - Environment Setup</h1> 
        <h2>Try it Option Online</h2> 
        <p>You really do not need to set up your own environment to start learning Node.js. Reason is very simple, we already have set up Node.js environment online, so that you can compile and execute all the available examples online at the same time when you are doing your theory work. This gives you confidence in what you are reading and to check the result with different options. Feel free to modify any example and execute it online.</p> 
        <p>Try following example using <b>Try it</b> option available at the top right corner of the below sample code box:</p> 
        <pre class="prettyprint tryit">
console.log("Hello World!");
</pre> 
        <p>For most of the examples given in this tutorial, you will find <b>Try it</b> option, so just make use of it and enjoy your learning.</p>  
        <h2>Local Environment Setup</h2> 
        <p>If you are still willing to set up your environment for Node.js, you need the following two softwares available on your computer, (a) Text Editor and (b) The Node.js binary installables.</p> 
        <h2>Text Editor</h2> 
        <p>This will be used to type your program. Examples of few editors include Windows Notepad, OS Edit command, Brief, Epsilon, EMACS, and vim or vi.</p> 
        <p>Name and version of text editor can vary on different operating systems. For example, Notepad will be used on Windows, and vim or vi can be used on windows as well as Linux or UNIX.</p> 
        <p>The files you create with your editor are called source files and contain program source code. The source files for Node.js programs are typically named with the extension "<b>.js</b>".</p> 
        <p>Before starting your programming, make sure you have one text editor in place and you have enough experience to write a computer program, save it in a file, compile it and finally execute it.</p> 
        <h2>The Node.js Runtime</h2> 
        <p>The source code written in source file is simply javascript. The Node.js interpreter will be used to interpret and execute your javascript code.</p> 
        <p>Node.js distribution comes as a binary installable for SunOS , Linux, Mac OS X, and Windows operating systems with the 32-bit (386) and 64-bit (amd64) x86 processor architectures. </p> 
        <p>Following section guides you on how to install Node.js binary distribution on various OS.</p> 
        <h2>Download Node.js archive</h2> 
        <p>Download latest version of Node.js installable archive file from <a target="_blank" rel="nofollow" href="http://nodejs.org/download/">Node.js Downloads</a>. At the time of writing this tutorial, I downloaded <i>node-v0.12.0-x64.msi</i> and copied it into C:\&gt;nodejs folder.</p> 
        <table class="src"> 
         <tbody>
          <tr>
           <th style="width:20%">OS</th>
           <th>Archive name</th>
          </tr> 
          <tr>
           <td>Windows</td>
           <td>node-v0.12.0-x64.msi</td>
          </tr> 
          <tr>
           <td>Linux</td>
           <td>node-v0.12.0-linux-x86.tar.gz</td>
          </tr> 
          <tr>
           <td>Mac</td>
           <td>node-v0.12.0-darwin-x86.tar.gz</td>
          </tr> 
          <tr>
           <td>SunOS</td>
           <td>node-v0.12.0-sunos-x86.tar.gz</td>
          </tr> 
         </tbody>
        </table> 
        <h2>Installation on UNIX/Linux/Mac OS X, and SunOS</h2> 
        <p>Extract the download archive into /usr/local, creating a NodeJs tree in /usr/local/nodejs. For example:</p> 
        <p>tar -C /usr/local -xzf node-v0.12.0-linux-x86.tar.gz</p> 
        <p>Add /usr/local/nodejs to the PATH environment variable.</p> 
        <table class="src"> 
         <tbody>
          <tr>
           <th style="width:20%">OS</th>
           <th>Output</th>
          </tr> 
          <tr>
           <td>Linux</td>
           <td>export PATH=$PATH:/usr/local/nodejs</td>
          </tr> 
          <tr>
           <td>Mac</td>
           <td>export PATH=$PATH:/usr/local/nodejs</td>
          </tr> 
          <tr>
           <td>FreeBSD</td>
           <td>export PATH=$PATH:/usr/local/nodejs</td>
          </tr> 
         </tbody>
        </table> 
        <h2>Installation on Windows</h2> 
        <p>Use the MSI file and follow the prompts to install the Node.js. By default, the installer uses the Node.js distribution in C:\Program Files\nodejs. The installer should set the C:\Program Files\nodejs directory in window's PATH environment variable. Restart any open command prompts for the change to take effect.</p> 
        <h2>Verify installation: Executing a File</h2> 
        <p>Create a js file named test.js in <b>C:\&gt;Nodejs_WorkSpace</b>.</p> 
        <p><i>File: test.js</i></p> 
        <pre class="prettyprint tryit">
console.log("Hello World")
</pre> 
        <p>Now run the test.js to see the result:</p> 
        <pre class="result notranslate">
C:\Nodejs_WorkSpace&gt;node test.js
</pre> 
        <p>Verify the Output</p> 
        <pre class="result notranslate">
Hello, World!
</pre> 
        <h1>Node.js - First Application</h1> 
        <p>Before creating actual Hello World ! application using Node.js, let us see the parts of a Node.js application. A Node.js application consists of following three important parts:</p> 
        <ul class="list"> 
         <li><p><b>import required module: </b> use require directive to load a javascript module</p></li> 
         <li><p><b>create server:</b> A server which will listen to client's request similar to Apache HTTP Server.</p></li> 
         <li><p><b>read request and return response:</b> server created in earlier step will read HTTP request made by client which can be a browser or console and return the response.</p></li> 
        </ul> 
        <h2>Creating Node.js Application</h2> 
        <p>Step 1: import required module</p> 
        <p>use require directive to load http module.</p> 
        <pre class="prettyprint notranslate">
var http = require("http")
</pre> 
        <p>Step 2: create an HTTP server using http.createServer method. Pass it a function with parameters request and response. Write the sample implementation to always return "Hello World". Pass a port 8081 to listen method.</p> 
        <pre class="prettyprint notranslate">
http.createServer(function (request, response) {
   // HTTP Status: 200 : OK
   // Content Type: text/plain
   response.writeHead(200, {'Content-Type': 'text/plain'});
   // send the response body as "Hello World"
   response.end('Hello World\n');
}).listen(8081);
// console will print the message
console.log('Server running at http://127.0.0.1:8081/');
</pre> 
        <p>Step 3: Create a js file named test.js in <b>C:\&gt;Nodejs_WorkSpace</b>.</p> 
        <p><i>File: test.js</i></p> 
        <pre class="prettyprint tryit">
var http = require("http")
http.createServer(function (request, response) {  
   response.writeHead(200, {'Content-Type': 'text/plain'});  
   response.end('Hello World\n');
}).listen(8081);
console.log('Server running at http://127.0.0.1:8081/');
</pre> 
        <p>Now run the test.js to see the result:</p> 
        <pre class="prettyprint notranslate">
C:\Nodejs_WorkSpace&gt;node test.js
</pre> 
        <p>Verify the Output. Server has started</p> 
        <pre class="result notranslate">
Server running at http://127.0.0.1:8081/
</pre> 
        <h2>Make a request to Node.js server</h2> 
        <p>Open http://127.0.0.1:8081/ in any browser and see the below result.</p> 
        <img src="/nodejs/images/nodejs_sample.jpg" alt="First Application"> 
        <h1>Node.js - REPL</h1> 
        <p>REPL stands for Read Eval Print Loop and it represents a computer environment like a window console or unix/linux shell where a command is entered and system responds with an output. Node.js or Node comes bundled with a REPL environment. It performs the following desired tasks.</p> 
        <ul class="list"> 
         <li><p><b>Read</b> - Reads user's input, parse the input into JavaScript data-structure and stores in memory.</p></li> 
         <li><p><b>Eval</b> - Takes and evaluates the data structure</p></li> 
         <li><p><b>Print</b> - Prints the result</p></li> 
         <li><p><b>Loop</b> - Loops the above command until user press ctrl-c twice.</p></li> 
        </ul> 
        <p>REPL feature of Node is very useful in experimenting with Node.js codes and to debug JavaScript codes.</p> 
        <h2>Features</h2> 
        <p>REPL can be started by simply running node on shell/console without any argument.</p> 
        <pre class="result notranslate">
C:\Nodejs_WorkSpace&gt; node
</pre> 
        <p>You will see the REPL Command prompt:</p> 
        <pre class="result notranslate">
C:\Nodejs_WorkSpace&gt; node
&gt;
</pre> 
        <h3>Simple Expression</h3> 
        <p>Let's try simple mathematics at REPL command prompt:</p> 
        <pre class="result notranslate">
C:\Nodejs_WorkSpace&gt;node
&gt; 1 + 3
4
&gt; 1 + ( 2 * 3 ) - 4
3
&gt;
</pre> 
        <h3>Use variables</h3> 
        <p>Use variables to store values and print later. if var keyword is not used then value is stored in the variable and printed. Wheras if var keyword is used then value is stored but not printed. You can use both variables later. Print anything usind console.log()</p> 
        <pre class="result notranslate">
C:\Nodejs_WorkSpace&gt; node
&gt; x = 10
10
&gt; var y = 10
undefined
&gt; x + y
20
&gt; console.log("Hello World")
Hello Workd
undefined
</pre> 
        <h3>Multiline Expression</h3> 
        <p>Node REPL supports multiline expression similar to JavaScript. See the following do-while loop in action:</p> 
        <pre class="result notranslate">
C:\Nodejs_WorkSpace&gt; node
&gt; var x = 0
undefined
&gt; do {
... x++;
... console.log("x: " + x);
... } while ( x &lt; 5 );
x: 1
x: 2
x: 3
x: 4
x: 5
undefined
&gt;
</pre> 
        <p><b>...</b> comes automatically when you press enters after opening bracket. Node automatically checks the continuity of expressions.</p> 
        <h3>Underscore variable</h3> 
        <p>Use <b>_</b> to get the last result.</p> 
        <pre class="result notranslate">
C:\Nodejs_WorkSpace&gt;node
&gt; var x = 10
undefined
&gt; var y = 20
undefined
&gt; x + y
30
&gt; var sum = _
undefined
&gt; console.log(sum)
30
undefined
&gt;
</pre> 
        <h2>REPL Commands</h2> 
        <ul class="list"> 
         <li><p><b>ctrl + c</b> - terminate the current command.</p></li> 
         <li><p><b>ctrl + c twice</b> - terminate the Node REPL.</p></li> 
         <li><p><b>ctrl + d</b> - terminate the Node REPL.</p></li> 
         <li><p><b>Up/Down Keys</b> - see command history and modify previous commands.</p></li> 
         <li><p><b>tab Keys</b> - list of current commands.</p></li> 
         <li><p><b>.help</b> - list of all commands.</p></li> 
         <li><p><b>.break</b> - exit from multiline expression.</p></li> 
         <li><p><b>.clear</b> - exit from multiline expression</p></li> 
         <li><p><b>.save</b> - save current Node REPL session to a file.</p></li> 
         <li><p><b>.load</b> - load file content in current Node REPL session.</p></li> 
        </ul> 
        <pre class="result notranslate">
C:\Nodejs_WorkSpace&gt;node
&gt; var x = 10
undefined
&gt; var y = 20
undefined
&gt; x + y
30
&gt; var sum = _
undefined
&gt; console.log(sum)
30
undefined
&gt; .save test.js
Session saved to:test.js
&gt; .load test.js
&gt; var x = 10
undefined
&gt; var y = 20
undefined
&gt; x + y
30
&gt; var sum = _
undefined
&gt; console.log(sum)
30
undefined
&gt;
</pre> 
        <h1>Node.js - npm</h1> 
        <p>npm stands for Node Package Manager. npm provides following two main functionalities:</p> 
        <ul class="list"> 
         <li><p>Online repositories for node.js packages/modules which are searchable on <a href="http://search.nodejs.org" alt="node js repositories">search.nodejs.org</a></p></li> 
         <li><p>Command line utility to install packages, do version management and dependency management of Node.js packages.</p></li> 
        </ul> 
        <p>npm comes bundled with Node.js installables after v0.6.3 version. To verify the same, open console and type following command and see the result:</p> 
        <pre class="result notranslate">
C:\Nodejs_WorkSpace&gt;npm --version
2.5.1
</pre> 
        <h2>Global vs Local installation</h2> 
        <p>By default, npm installs any dependency in the local mode. Here local mode refers to the package installation in node_modules directory lying in the folder where Node application is present. Locally deployed packages are accessible via require().</p> 
        <p>Globally installed packages/dependencies are stored in <b>&lt;user-directory&gt;</b>/npm directory. Such dependencies can be used in CLI (Command Line Interface) function of any node.js but can not be imported using require() in Node application directly.</p> 
        <p>Let's install express, a popular web framework using local installation.</p> 
        <pre class="result notranslate">
C:\Nodejs_WorkSpace&gt;npm install express
express@4.11.2 node_modules\express
|-- merge-descriptors@0.0.2
|-- utils-merge@1.0.0
|-- methods@1.1.1
|-- escape-html@1.0.1
|-- fresh@0.2.4
|-- cookie@0.1.2
|-- range-parser@1.0.2
|-- media-typer@0.3.0
|-- cookie-signature@1.0.5
|-- vary@1.0.0
|-- finalhandler@0.3.3
|-- parseurl@1.3.0
|-- serve-static@1.8.1
|-- content-disposition@0.5.0
|-- path-to-regexp@0.1.3
|-- depd@1.0.0
|-- qs@2.3.3
|-- debug@2.1.1 (ms@0.6.2)
|-- send@0.11.1 (destroy@1.0.3, ms@0.7.0, mime@1.2.11)
|-- on-finished@2.2.0 (ee-first@1.1.0)
|-- type-is@1.5.7 (mime-types@2.0.9)
|-- accepts@1.2.3 (negotiator@0.5.0, mime-types@2.0.9)
|-- etag@1.5.1 (crc@3.2.1)
|-- proxy-addr@1.0.6 (forwarded@0.1.0, ipaddr.js@0.1.8)
</pre> 
        <p>Once npm completes the download, you can verify by looking at the content of C:\Nodejs_WorkSpace\node_modules. Or type the following command:</p> 
        <pre class="result notranslate">
C:\Nodejs_WorkSpace&gt;npm ls
C:\Nodejs_WorkSpace
|-- express@4.11.2
  |-- accepts@1.2.3
  | |-- mime-types@2.0.9
  | | |-- mime-db@1.7.0
  | |-- negotiator@0.5.0
  |-- content-disposition@0.5.0
  |-- cookie@0.1.2
  |-- cookie-signature@1.0.5
  |-- debug@2.1.1
  | |-- ms@0.6.2
  |-- depd@1.0.0
  |-- escape-html@1.0.1
  |-- etag@1.5.1
  | |-- crc@3.2.1
  |-- finalhandler@0.3.3
  |-- fresh@0.2.4
  |-- media-typer@0.3.0
  |-- merge-descriptors@0.0.2
  |-- methods@1.1.1
  |-- on-finished@2.2.0
  | |-- ee-first@1.1.0
  |-- parseurl@1.3.0
  |-- path-to-regexp@0.1.3
  |-- proxy-addr@1.0.6
  | |-- forwarded@0.1.0
  | |-- ipaddr.js@0.1.8
  |-- qs@2.3.3
  |-- range-parser@1.0.2
  |-- send@0.11.1
  | |-- destroy@1.0.3
  | |-- mime@1.2.11
  | |-- ms@0.7.0
  |-- serve-static@1.8.1
  |-- type-is@1.5.7
  | |-- mime-types@2.0.9
  |   |-- mime-db@1.7.0
  |-- utils-merge@1.0.0
  |-- vary@1.0.0
</pre> 
        <p>Now Let's try installing express, a popular web framework using global installation.</p> 
        <pre class="result notranslate">
C:\Nodejs_WorkSpace&gt;npm install express - g
</pre> 
        <p>Once npm completes the download, you can verify by looking at the content of <b>&lt;user-directory&gt;</b>/npm/node_modules. Or type the following command:</p> 
        <pre class="result notranslate">
C:\Nodejs_WorkSpace&gt;npm ls -g
</pre> 
        <h2>Installing a module</h2> 
        <p>Installation of any module is as simple as typing the following command.</p> 
        <pre class="result notranslate">
C:\Nodejs_WorkSpace&gt;npm install express
</pre> 
        <p>Now you can use it in your js file as following:</p> 
        <pre class="prettyprint notranslate">
var express = require('express');
</pre> 
        <h2>Using package.json</h2> 
        <p>package.json is present in the root directoryt of any Node application/module and is used to define the properties of a package. Let's open package.json of express package present in C:\Nodejs_Workspace\node_modules\express\</p> 
        <pre class="prettyprint notranslate">
{
  "name": "express",
  "description": "Fast, unopinionated, minimalist web framework",
  "version": "4.11.2",
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@vision-media.ca"
  },
  "contributors": [
    {
      "name": "Aaron Heckmann",
      "email": "aaron.heckmann+github@gmail.com"
    },
    {
      "name": "Ciaran Jessup",
      "email": "ciaranj@gmail.com"
    },
    {
      "name": "Douglas Christopher Wilson",
      "email": "doug@somethingdoug.com"
    },
    {
      "name": "Guillermo Rauch",
      "email": "rauchg@gmail.com"
    },
    {
      "name": "Jonathan Ong",
      "email": "me@jongleberry.com"
    },
    {
      "name": "Roman Shtylman",
      "email": "shtylman+expressjs@gmail.com"
    },
    {
      "name": "Young Jae Sim",
      "email": "hanul@hanul.me"
    }
  ],
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/strongloop/express"
  },
  "homepage": "http://expressjs.com/",
  "keywords": [
    "express",
    "framework",
    "sinatra",
    "web",
    "rest",
    "restful",
    "router",
    "app",
    "api"
  ],
  "dependencies": {
    "accepts": "~1.2.3",
    "content-disposition": "0.5.0",
    "cookie-signature": "1.0.5",
    "debug": "~2.1.1",
    "depd": "~1.0.0",
    "escape-html": "1.0.1",
    "etag": "~1.5.1",
    "finalhandler": "0.3.3",
    "fresh": "0.2.4",
    "media-typer": "0.3.0",
    "methods": "~1.1.1",
    "on-finished": "~2.2.0",
    "parseurl": "~1.3.0",
    "path-to-regexp": "0.1.3",
    "proxy-addr": "~1.0.6",
    "qs": "2.3.3",
    "range-parser": "~1.0.2",
    "send": "0.11.1",
    "serve-static": "~1.8.1",
    "type-is": "~1.5.6",
    "vary": "~1.0.0",
    "cookie": "0.1.2",
    "merge-descriptors": "0.0.2",
    "utils-merge": "1.0.0"
  },
  "devDependencies": {
    "after": "0.8.1",
    "ejs": "2.1.4",
    "istanbul": "0.3.5",
    "marked": "0.3.3",
    "mocha": "~2.1.0",
    "should": "~4.6.2",
    "supertest": "~0.15.0",
    "hjs": "~0.0.6",
    "body-parser": "~1.11.0",
    "connect-redis": "~2.2.0",
    "cookie-parser": "~1.3.3",
    "express-session": "~1.10.2",
    "jade": "~1.9.1",
    "method-override": "~2.3.1",
    "morgan": "~1.5.1",
    "multiparty": "~4.1.1",
    "vhost": "~3.0.0"
  },
  "engines": {
    "node": "&gt;= 0.10.0"
  },
  "files": [
    "LICENSE",
    "History.md",
    "Readme.md",
    "index.js",
    "lib/"
  ],
  "scripts": {
    "test": "mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --require test/support/env --reporter dot --check-leaks test/ test/acceptance/",
    "test-tap": "mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/",
    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/"
  },
  "gitHead": "63ab25579bda70b4927a179b580a9c580b6c7ada",
  "bugs": {
    "url": "https://github.com/strongloop/express/issues"
  },
  "_id": "express@4.11.2",
  "_shasum": "8df3d5a9ac848585f00a0777601823faecd3b148",
  "_from": "express@*",
  "_npmVersion": "1.4.28",
  "_npmUser": {
    "name": "dougwilson",
    "email": "doug@somethingdoug.com"
  },
  "maintainers": [
    {
      "name": "tjholowaychuk",
      "email": "tj@vision-media.ca"
    },
    {
      "name": "jongleberry",
      "email": "jonathanrichardong@gmail.com"
    },
    {
      "name": "shtylman",
      "email": "shtylman@gmail.com"
    },
    {
      "name": "dougwilson",
      "email": "doug@somethingdoug.com"
    },
    {
      "name": "aredridel",
      "email": "aredridel@nbtsc.org"
    },
    {
      "name": "strongloop",
      "email": "callback@strongloop.com"
    },
    {
      "name": "rfeng",
      "email": "enjoyjava@gmail.com"
    }
  ],
  "dist": {
    "shasum": "8df3d5a9ac848585f00a0777601823faecd3b148",
    "tarball": "http://registry.npmjs.org/express/-/express-4.11.2.tgz"
  },
  "directories": {},
  "_resolved": "https://registry.npmjs.org/express/-/express-4.11.2.tgz",
  "readme": "ERROR: No README data found!"
}
</pre> 
        <h2>Attributes of Package.json</h2> 
        <ul class="list"> 
         <li><p><b>name</b> - name of the package</p></li> 
         <li><p><b>version</b> - version of the package</p></li> 
         <li><p><b>description</b> - description of the package</p></li> 
         <li><p><b>homepage</b> - homepage of the package</p></li> 
         <li><p><b>author</b> - author of the package</p></li> 
         <li><p><b>contributors</b> - name of the contributors to the package</p></li> 
         <li><p><b>dependencies</b> - list of dependencies. npm automatically installs all the dependencies mentioned here in the node_module folder of the package.</p></li> 
         <li><p><b>repository</b> - repository type and url of the package</p></li> 
         <li><p><b>main</b> - entry point of the package</p></li> 
         <li><p><b>keywords</b> - keywords</p></li> 
        </ul> 
        <h2>Uninstalling a module</h2> 
        <p>Use following command to uninstall a module.</p> 
        <pre class="result notranslate">
C:\Nodejs_WorkSpace&gt;npm uninstall express
</pre> 
        <p>Once npm uninstall the package, you can verify by looking at the content of <b>&lt;user-directory&gt;</b>/npm/node_modules. Or type the following command:</p> 
        <pre class="result notranslate">
C:\Nodejs_WorkSpace&gt;npm ls
</pre> 
        <h2>Updating a module</h2> 
        <p>Update package.json and change the version of the dependency which to be updated and run the following command.</p> 
        <pre class="result notranslate">
C:\Nodejs_WorkSpace&gt;npm update
</pre> 
        <h2>Search a module</h2> 
        <p>Search package name using npm.</p> 
        <pre class="result notranslate">
C:\Nodejs_WorkSpace&gt;npm search express
</pre> 
        <h2>Create a module</h2> 
        <p>Creation of module requires package.json to be generated. Let's generate package.json using npm.</p> 
        <pre class="result notranslate">
C:\Nodejs_WorkSpace&gt;npm init
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sane defaults.

See 'npm help json' for definitive documentation on these fields
and exactly what they do.

Use 'npm install &lt;pkg&gt; --save' afterwards to install a package and
save it as a dependency in the package.json file.

Press ^C at any time to quit.
name: (Nodejs_WorkSpace)
</pre> 
        <p>Once package.json is generated. Use following command to register yourself with npm repository site using a valid email address.</p> 
        <pre class="result notranslate">
C:\Nodejs_WorkSpace&gt;npm adduser
</pre> 
        <p>Now its time to publish your module:</p> 
        <pre class="result notranslate">
C:\Nodejs_WorkSpace&gt;npm publish
</pre> 
        <h1>Node.js - Callbacks Concept</h1> 
        <h2>What is Callback?</h2> 
        <p>Callback is an asynchronous equivalent for a function. A callback function is called at the completion of a given task. Node makes heavy use of callbacks. All APIs of Node are written is such a way that they supports callbacks. For example, a function to read a file may start reading file and return the control to execution environment immidiately so that next instruction can be executed. Once file I/O is complete, it will call the callback function while passing the callback function, the content of the file as parameter. So there is no blocking or wait for File I/O. This makes Node.js highly scalable, as it can process high number of request without waiting for any function to return result.</p> 
        <h2>Blocking Code Example</h2> 
        <p>Create a txt file named test.txt in <b>C:\&gt;Nodejs_WorkSpace</b></p> 
        <pre class="prettyprint notranslate">
TutorialsPoint.Com 
</pre> 
        <p>Create a js file named test.js in <b>C:\&gt;Nodejs_WorkSpace</b></p> 
        <pre class="prettyprint tryit">
var fs = require("fs");
var data = fs.readFileSync('test.txt');
console.log(data.toString());
console.log("Program Ended");
</pre> 
        <p>Now run the test.js to see the result:</p> 
        <pre class="prettyprint notranslate">
C:\Nodejs_WorkSpace&gt;node test.js
</pre> 
        <p>Verify the Output</p> 
        <pre class="result notranslate">
TutorialsPoint.Com
Program Ended
</pre> 
        <h2>Non-Blocking Code Example</h2> 
        <p>Create a txt file named test.txt in <b>C:\&gt;Nodejs_WorkSpace</b></p> 
        <pre class="prettyprint notranslate">
TutorialsPoint.Com 
</pre> 
        <p>Update test.js in <b>C:\&gt;Nodejs_WorkSpace</b></p> 
        <pre class="prettyprint tryit">
var fs = require("fs");

fs.readFile('test.txt', function (err, data) {
    if (err) return console.error(err);
    console.log(data.toString());
});
console.log("Program Ended");
</pre> 
        <p>Now run the test.js to see the result:</p> 
        <pre class="prettyprint notranslate">
C:\Nodejs_WorkSpace&gt;node test.js
</pre> 
        <p>Verify the Output</p> 
        <pre class="result notranslate">
Program Ended
TutorialsPoint.Com
</pre> 
        <h2>Event Loop Overview</h2> 
        <p>Node js is a single threaded application but it support concurrency via concept of event and callbacks. As every API of Node js are asynchronous and being a single thread, it uses async function calls to maintain the concurrency. Node uses observer pattern. Node thread keeps an event loop and whenever any task get completed, it fires the corresponding event which signals the event listener function to get executed.</p> 
        <h2>Event Driven Programming</h2> 
        <p>Node.js uses Events heavily and it is also one of the reason why Node.js is pretty fast compared to other similar technologies. As soon as Node starts its server, it simply initiates its variables, delcares functions and then simply waits for event to occur. </p> 
        <p>While Events seems similar to what callbacks are. The difference lies in the fact that callback functions are called when an asynchronous function returns its result where event handling works on the observer pattern. The functions which listens to events acts as observer. Whenever an event got fired, its listener function starts executing. Node.js has multiple in-built event. The primary actor is EventEmitter which can be imported using following syntax</p> 
        <pre class="prettyprint notranslate">
//import events module
var events = require('events');
//create an eventEmitter object
var eventEmitter = new events.EventEmitter();
</pre> 
        <h2>Example</h2> 
        <p>Create a js file named test.js in <b>C:\&gt;Nodejs_WorkSpace</b>.</p> 
        <p><i>File: test.js</i></p> 
        <pre class="prettyprint tryit">
//import events module
var events = require('events');
//create an eventEmitter object
var eventEmitter = new events.EventEmitter();

//create a function connected which is to be executed 
//when 'connection' event occurs
var connected = function connected() {
   console.log('connection succesful.');
  
   // fire the data_received event 
   eventEmitter.emit('data_received.');
}

// bind the connection event with the connected function
eventEmitter.on('connection', connected);
 
// bind the data_received event with the anonymous function
eventEmitter.on('data_received', function(){
   console.log('data received succesfully.');
});

// fire the connection event 
eventEmitter.emit('connection');

console.log("Program Ended.");
</pre> 
        <p>Now run the test.js to see the result:</p> 
        <pre class="prettyprint notranslate">
C:\Nodejs_WorkSpace&gt;node test.js
</pre> 
        <p>Verify the Output. Server has started</p> 
        <pre class="result notranslate">
connection succesful.
data received succesfully.
Program Ended.
</pre> 
        <h2>How Node Applications Work?</h2> 
        <p>In Node Application, any async function accepts a callback as a last parameter and the callback function accepts error as a first parameter. Let's revisit the previous example again.</p> 
        <pre class="prettyprint tryit">
var fs = require("fs");

fs.readFile('test.txt', function (err, data) {
    if (err){
	   console.log(err.stack);
	   return;
	}
    console.log(data.toString());
});
console.log("Program Ended");
</pre> 
        <p>Here fs.readFile is a async function whose purpose is to read a file. If an error occur during read of file, then err object will contain the corresponding error else data will contain the contents of the file. readFile passes err and data to callback function after file read operation is complete.</p> 
        <h1>Node.js - Event Emitter</h1> 
        <p>EventEmitter class lies in <b>events</b> module. It is accessibly via following syntax:</p> 
        <pre class="prettyprint notranslate">
//import events module
var events = require('events');
//create an eventEmitter object
var eventEmitter = new events.EventEmitter();
</pre> 
        <p>When an EventEmitter instance faces any error, it emits an 'error' event. When new listener is added, 'newListener' event is fired and when a listener is removed, 'removeListener' event is fired.</p> 
        <p>EventEmitter provides multiple properties like <b>on</b> and <b>emit</b>. <b>on</b> property is used to bind a function with the event and <b>emit</b> is used to fire an event.</p> 
        <h2>Methods</h2> 
        <table class="src"> 
         <tbody>
          <tr>
           <th>Sr. No.</th>
           <th>method</th>
           <th>Description</th>
          </tr> 
          <tr>
           <td>1</td>
           <td><b>addListener(event, listener)</b></td>
           <td>Adds a listener to the end of the listeners array for the specified event. No checks are made to see if the listener has already been added. Multiple calls passing the same combination of event and listener will result in the listener being added multiple times. Returns emitter, so calls can be chained.</td>
          </tr> 
          <tr>
           <td>2</td>
           <td><b>on(event, listener)</b></td>
           <td>Adds a listener to the end of the listeners array for the specified event. No checks are made to see if the listener has already been added. Multiple calls passing the same combination of event and listener will result in the listener being added multiple times. Returns emitter, so calls can be chained.</td>
          </tr> 
          <tr>
           <td>3</td>
           <td><b>once(event, listener)</b></td>
           <td>Adds a one time listener for the event. This listener is invoked only the next time the event is fired, after which it is removed. Returns emitter, so calls can be chained.</td>
          </tr> 
          <tr>
           <td>4</td>
           <td><b>removeListener(event, listener)</b></td>
           <td>Remove a listener from the listener array for the specified event. Caution: changes array indices in the listener array behind the listener. removeListener will remove, at most, one instance of a listener from the listener array. If any single listener has been added multiple times to the listener array for the specified event, then removeListener must be called multiple times to remove each instance. Returns emitter, so calls can be chained.</td>
          </tr> 
          <tr>
           <td>5</td>
           <td><b>removeAllListeners([event])</b></td>
           <td>Removes all listeners, or those of the specified event. It's not a good idea to remove listeners that were added elsewhere in the code, especially when it's on an emitter that you didn't create (e.g. sockets or file streams). Returns emitter, so calls can be chained.</td>
          </tr> 
          <tr>
           <td>6</td>
           <td><b>setMaxListeners(n)</b></td>
           <td>By default EventEmitters will print a warning if more than 10 listeners are added for a particular event. This is a useful default which helps finding memory leaks. Obviously not all Emitters should be limited to 10. This function allows that to be increased. Set to zero for unlimited.</td>
          </tr> 
          <tr>
           <td>7</td>
           <td><b>listeners(event)</b></td>
           <td>Returns an array of listeners for the specified event.</td>
          </tr> 
          <tr>
           <td>8</td>
           <td><b>emit(event, [arg1], [arg2], [...])</b></td>
           <td>Execute each of the listeners in order with the supplied arguments. Returns true if event had listeners, false otherwise.</td>
          </tr> 
         </tbody>
        </table> 
        <h2>Class Methods</h2> 
        <table class="src"> 
         <tbody>
          <tr>
           <th>Sr. No.</th>
           <th>method</th>
           <th>Description</th>
          </tr> 
          <tr>
           <td>1</td>
           <td><b>listenerCount(emitter, event)</b></td>
           <td>Return the number of listeners for a given event.</td>
          </tr> 
         </tbody>
        </table> 
        <h2>Events</h2> 
        <table class="src"> 
         <tbody>
          <tr>
           <th>Sr. No.</th>
           <th>event name</th>
           <th>Parameters</th>
           <th>Description</th>
          </tr> 
          <tr>
           <td>1</td>
           <td><b>newListener</b></td> 
           <td> 
            <ul class="list"> 
             <li><p><b>event</b> - String The event name</p></li> 
             <li><p><b>listener</b> - Function The event handler function</p></li> 
            </ul> </td> 
           <td>This event is emitted any time a listener is added. When this event is triggered, the listener may not yet have been added to the array of listeners for the event.</td>
          </tr> 
          <tr>
           <td>2</td>
           <td><b>removeListener</b></td> 
           <td> 
            <ul class="list"> 
             <li><p><b>event</b> - String The event name</p></li> 
             <li><p><b>listener</b> - Function The event handler function</p></li> 
            </ul> </td> 
           <td>This event is emitted any time someone removes a listener. When this event is triggered, the listener may not yet have been removed from the array of listeners for the event.</td>
          </tr> 
         </tbody>
        </table> 
        <h2>Example</h2> 
        <p>Create a js file named test.js in <b>C:\&gt;Nodejs_WorkSpace</b>.</p> 
        <p><i>File: test.js</i></p> 
        <pre class="prettyprint tryit">
var events = require('events');
var eventEmitter = new events.EventEmitter();

//listener #1
var listner1 = function listner1() {
   console.log('listner1 executed.');
}

//listener #2
var listner2 = function listner2() {
  console.log('listner2 executed.');
}

// bind the connection event with the listner1 function
eventEmitter.addListener('connection', listner1);

// bind the connection event with the listner2 function
eventEmitter.on('connection', listner2);

var eventListeners = require('events').EventEmitter.listenerCount(eventEmitter,'connection');
console.log(eventListeners + " Listner(s) listening to connection event");

// fire the connection event 
eventEmitter.emit('connection');

// remove the binding of listner1 function
eventEmitter.removeListener('connection', listner1);
console.log("Listner1 will not listen now.");

// fire the connection event 
eventEmitter.emit('connection');

eventListeners = require('events').EventEmitter.listenerCount(eventEmitter,'connection');
console.log(eventListeners + " Listner(s) listening to connection event");

console.log("Program Ended.");
</pre> 
        <p>Now run the test.js to see the result:</p> 
        <pre class="prettyprint notranslate">
C:\Nodejs_WorkSpace&gt;node test.js
</pre> 
        <p>Verify the Output. Server has started</p> 
        <pre class="result notranslate">
2 Listner(s) listening to connection event
listner1 executed.
listner2 executed.
Listner1 will not listen now.
listner2 executed.
1 Listner(s) listening to connection event
Program Ended.
</pre> 
        <h1>Node.js - Buffer Module</h1> 
        <p><b>buffer</b> module can be used to create Buffer and SlowBuffer classes. Buffer module can be imported using following syntax. </p> 
        <pre class="prettyprint notranslate">
var buffer = require("buffer")
</pre> 
        <h2>Buffer class</h2> 
        <p>Buffer class is a global class and can be accessed in application without importing buffer module. A Buffer is a kind of an array of integers and corresponds to a raw memory allocation outside the V8 heap. A Buffer cannot be resized.</p> 
        <h2>Methods</h2> 
        <table class="src"> 
         <tbody>
          <tr>
           <th>Sr. No.</th>
           <th>method</th>
           <th>Parameters</th>
           <th>Description</th>
          </tr> 
          <tr>
           <td>1</td>
           <td><b>new Buffer(size)</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>size Number</p></li> 
            </ul> </td> 
           <td>Allocates a new buffer of size octets. Note, size must be no more than kMaxLength. Otherwise, a RangeError will be thrown here.</td>
          </tr> 
          <tr>
           <td>2</td>
           <td><b>new Buffer(buffer)</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>buffer Buffer</p></li> 
            </ul> </td>
           <td>Copies the passed buffer data onto a new Buffer instance.</td>
          </tr> 
          <tr>
           <td>3</td>
           <td><b>new Buffer(str[, encoding])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>str String - string to encode.</p></li> 
             <li><p>encoding String - encoding to use, Optional.</p></li> 
            </ul></td>
           <td>Allocates a new buffer containing the given str. encoding defaults to 'utf8'.</td>
          </tr> 
          <tr>
           <td>4</td>
           <td><b>buf.length</b></td> 
           <td>Return: Number</td> 
           <td>The size of the buffer in bytes. Note that this is not necessarily the size of the contents. length refers to the amount of memory allocated for the buffer object. It does not change when the contents of the buffer are changed.</td>
          </tr> 
          <tr>
           <td>5</td>
           <td><b>buf.write(string[, offset][, length][, encoding])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>string String - data to be written to buffer</p></li> 
             <li><p>offset Number, Optional, Default: 0</p></li> 
             <li><p>length Number, Optional, Default: buffer.length - offset</p></li> 
             <li><p>encoding String, Optional, Default: 'utf8'</p></li> 
            </ul> </td>
           <td>Allocates a new buffer containing the given str. encoding defaults to 'utf8'.</td>
          </tr> 
          <tr>
           <td>6</td>
           <td><b>buf.writeUIntLE(value, offset, byteLength[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>value {Number} Bytes to be written to buffer</p></li> 
             <li><p>offset {Number} 0 &lt;= offset &lt;= buf.length</p></li> 
             <li><p>byteLength {Number} 0 &lt; byteLength &lt;= 6</p></li> 
             <li><p>noAssert {Boolean} Default: false</p></li> 
             <li><p>Return: {Number}</p></li> 
            </ul> </td>
           <td>Writes value to the buffer at the specified offset and byteLength. Supports up to 48 bits of accuracy. Set noAssert to true to skip validation of value and offset. Defaults to false.</td>
          </tr> 
          <tr>
           <td>7</td>
           <td><b>buf.writeUIntBE(value, offset, byteLength[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>value {Number} Bytes to be written to buffer</p></li> 
             <li><p>offset {Number} 0 &lt;= offset &lt;= buf.length</p></li> 
             <li><p>byteLength {Number} 0 &lt; byteLength &lt;= 6</p></li> 
             <li><p>noAssert {Boolean} Default: false</p></li> 
             <li><p>Return: {Number}</p></li> 
            </ul> </td>
           <td>Writes value to the buffer at the specified offset and byteLength. Supports up to 48 bits of accuracy. Set noAssert to true to skip validation of value and offset. Defaults to false.</td>
          </tr> 
          <tr>
           <td>8</td>
           <td><b>buf.writeIntLE(value, offset, byteLength[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>value {Number} Bytes to be written to buffer</p></li> 
             <li><p>offset {Number} 0 &lt;= offset &lt;= buf.length</p></li> 
             <li><p>byteLength {Number} 0 &lt; byteLength &lt;= 6</p></li> 
             <li><p>noAssert {Boolean} Default: false</p></li> 
             <li><p>Return: {Number}</p></li> 
            </ul> </td>
           <td>Writes value to the buffer at the specified offset and byteLength. Supports up to 48 bits of accuracy. Set noAssert to true to skip validation of value and offset. Defaults to false.</td>
          </tr> 
          <tr>
           <td>9</td>
           <td><b>buf.writeIntBE(value, offset, byteLength[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>value {Number} Bytes to be written to buffer</p></li> 
             <li><p>offset {Number} 0 &lt;= offset &lt;= buf.length</p></li> 
             <li><p>byteLength {Number} 0 &lt; byteLength &lt;= 6</p></li> 
             <li><p>noAssert {Boolean} Default: false</p></li> 
             <li><p>Return: {Number}</p></li> 
            </ul> </td>
           <td>Writes value to the buffer at the specified offset and byteLength. Supports up to 48 bits of accuracy. Set noAssert to true to skip validation of value and offset. Defaults to false.</td>
          </tr> 
          <tr>
           <td>10</td>
           <td><b>buf.readUIntLE(offset, byteLength[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>offset {Number} 0 &lt;= offset &lt;= buf.length</p></li> 
             <li><p>byteLength {Number} 0 &lt; byteLength &lt;= 6</p></li> 
             <li><p>noAssert {Boolean} Default: false</p></li> 
             <li><p>Return: {Number}</p></li> 
            </ul> </td>
           <td>A generalized version of all numeric read methods. Supports up to 48 bits of accuracy.Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>11</td>
           <td><b>buf.readUIntBE(offset, byteLength[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>offset {Number} 0 &lt;= offset &lt;= buf.length</p></li> 
             <li><p>byteLength {Number} 0 &lt; byteLength &lt;= 6</p></li> 
             <li><p>noAssert {Boolean} Default: false</p></li> 
             <li><p>Return: {Number}</p></li> 
            </ul> </td>
           <td>A generalized version of all numeric read methods. Supports up to 48 bits of accuracy.Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>12</td>
           <td><b>buf.readIntLE(offset, byteLength[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>offset {Number} 0 &lt;= offset &lt;= buf.length</p></li> 
             <li><p>byteLength {Number} 0 &lt; byteLength &lt;= 6</p></li> 
             <li><p>noAssert {Boolean} Default: false</p></li> 
             <li><p>Return: {Number}</p></li> 
            </ul> </td>
           <td>A generalized version of all numeric read methods. Supports up to 48 bits of accuracy.Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>13</td>
           <td><b>buf.readIntBE(offset, byteLength[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>offset {Number} 0 &lt;= offset &lt;= buf.length</p></li> 
             <li><p>byteLength {Number} 0 &lt; byteLength &lt;= 6</p></li> 
             <li><p>noAssert {Boolean} Default: false</p></li> 
             <li><p>Return: {Number}</p></li> 
            </ul> </td>
           <td>A generalized version of all numeric read methods. Supports up to 48 bits of accuracy.Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>14</td>
           <td><b>buf.toString([encoding][, start][, end])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>encoding String, Optional, Default: 'utf8'</p></li> 
             <li><p>start Number, Optional, Default: 0</p></li> 
             <li><p>end Number, Optional, Default: buffer.length</p></li> 
            </ul> </td>
           <td>Decodes and returns a string from buffer data encoded using the specified character set encoding.</td>
          </tr> 
          <tr>
           <td>15</td>
           <td><b>buf.toJSON()</b></td> 
           <td>&nbsp;</td>
           <td>Returns a JSON-representation of the Buffer instance. JSON.stringify implicitly calls this function when stringifying a Buffer instance.</td>
          </tr> 
          <tr>
           <td>16</td>
           <td><b>buf[index]</b></td> 
           <td>&nbsp;</td>
           <td>Get and set the octet at index. The values refer to individual bytes, so the legal range is between 0x00 and 0xFF hex or 0 and 255.</td>
          </tr> 
          <tr>
           <td>17</td>
           <td><b>buf.equals(otherBuffer)</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>otherBuffer Buffer</p></li> 
            </ul> </td>
           <td>Returns a boolean of whether this and otherBuffer have the same bytes.</td>
          </tr> 
          <tr>
           <td>18</td>
           <td><b>buf.compare(otherBuffer)</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>otherBuffer Buffer</p></li> 
            </ul> </td>
           <td>Returns a number indicating whether this comes before or after or is the same as the otherBuffer in sort order.</td>
          </tr> 
          <tr>
           <td>19</td>
           <td><b>buf.copy(targetBuffer[, targetStart][, sourceStart][, sourceEnd])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>targetBuffer Buffer object - Buffer to copy into</p></li> 
             <li><p>targetStart Number, Optional, Default: 0</p></li> 
             <li><p>sourceStart Number, Optional, Default: 0</p></li> 
             <li><p>sourceEnd Number, Optional, Default: buffer.length</p></li> 
            </ul> </td>
           <td>Copies data from a region of this buffer to a region in the target buffer even if the target memory region overlaps with the source. If undefined the targetStart and sourceStart parameters default to 0 while sourceEnd defaults to buffer.length.</td>
          </tr> 
          <tr>
           <td>20</td>
           <td><b>buf.slice([start][, end])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>start Number, Optional, Default: 0</p></li> 
             <li><p>end Number, Optional, Default: buffer.length</p></li> 
            </ul> </td>
           <td>Returns a new buffer which references the same memory as the old, but offset and cropped by the start (defaults to 0) and end (defaults to buffer.length) indexes. Negative indexes start from the end of the buffer.</td>
          </tr> 
          <tr>
           <td>21</td>
           <td><b>buf.readUInt8(offset[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>offset Number</p></li> 
             <li><p>noAssert Boolean, Optional, Default: false</p></li> 
             <li><p>Return: Number</p></li> 
            </ul> </td>
           <td>Reads an unsigned 8 bit integer from the buffer at the specified offset. Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>22</td>
           <td><b>buf.readUInt16LE(offset[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>offset Number</p></li> 
             <li><p>noAssert Boolean, Optional, Default: false</p></li> 
             <li><p>Return: Number</p></li> 
            </ul> </td>
           <td>Reads an unsigned 16 bit integer from the buffer at the specified offset with specified endian format. Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>23</td>
           <td><b>buf.readUInt16BE(offset[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>offset Number</p></li> 
             <li><p>noAssert Boolean, Optional, Default: false</p></li> 
             <li><p>Return: Number</p></li> 
            </ul> </td>
           <td>Reads an unsigned 16 bit integer from the buffer at the specified offset with specified endian format. Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>24</td>
           <td><b>buf.readUInt32LE(offset[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>offset Number</p></li> 
             <li><p>noAssert Boolean, Optional, Default: false</p></li> 
             <li><p>Return: Number</p></li> 
            </ul> </td>
           <td>Reads an unsigned 32 bit integer from the buffer at the specified offset with specified endian format. Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>25</td>
           <td><b>buf.readUInt32BE(offset[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>offset Number</p></li> 
             <li><p>noAssert Boolean, Optional, Default: false</p></li> 
             <li><p>Return: Number</p></li> 
            </ul> </td>
           <td>Reads an unsigned 32 bit integer from the buffer at the specified offset with specified endian format. Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>26</td>
           <td><b>buf.readInt8(offset[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>offset Number</p></li> 
             <li><p>noAssert Boolean, Optional, Default: false</p></li> 
             <li><p>Return: Number</p></li> 
            </ul> </td>
           <td>Reads a signed 8 bit integer from the buffer at the specified offset. Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>27</td>
           <td><b>buf.readInt16LE(offset[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>offset Number</p></li> 
             <li><p>noAssert Boolean, Optional, Default: false</p></li> 
             <li><p>Return: Number</p></li> 
            </ul> </td>
           <td>Reads a signed 16 bit integer from the buffer at the specified offset with specified endian format. Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>28</td>
           <td><b>buf.readInt16BE(offset[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>offset Number</p></li> 
             <li><p>noAssert Boolean, Optional, Default: false</p></li> 
             <li><p>Return: Number</p></li> 
            </ul> </td>
           <td>Reads a signed 16 bit integer from the buffer at the specified offset with specified endian format. Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>29</td>
           <td><b>buf.readInt32LE(offset[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>offset Number</p></li> 
             <li><p>noAssert Boolean, Optional, Default: false</p></li> 
             <li><p>Return: Number</p></li> 
            </ul> </td>
           <td>Reads a signed 32 bit integer from the buffer at the specified offset with specified endian format. Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>30</td>
           <td><b>buf.readInt32BE(offset[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>offset Number</p></li> 
             <li><p>noAssert Boolean, Optional, Default: false</p></li> 
             <li><p>Return: Number</p></li> 
            </ul> </td>
           <td>Reads a signed 32 bit integer from the buffer at the specified offset with specified endian format. Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>31</td>
           <td><b>buf.readFloatLE(offset[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>offset Number</p></li> 
             <li><p>noAssert Boolean, Optional, Default: false</p></li> 
             <li><p>Return: Number</p></li> 
            </ul> </td>
           <td>Reads a 32 bit float from the buffer at the specified offset with specified endian format. Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>32</td>
           <td><b>buf.readFloatBE(offset[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>offset Number</p></li> 
             <li><p>noAssert Boolean, Optional, Default: false</p></li> 
             <li><p>Return: Number</p></li> 
            </ul> </td>
           <td>Reads a 32 bit float from the buffer at the specified offset with specified endian format. Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>33</td>
           <td><b>buf.readDoubleLE(offset[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>offset Number</p></li> 
             <li><p>noAssert Boolean, Optional, Default: false</p></li> 
             <li><p>Return: Number</p></li> 
            </ul> </td>
           <td>Reads a 64 bit double from the buffer at the specified offset with specified endian format. Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>34</td>
           <td><b>buf.readDoubleBE(offset[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>offset Number</p></li> 
             <li><p>noAssert Boolean, Optional, Default: false</p></li> 
             <li><p>Return: Number</p></li> 
            </ul> </td>
           <td>Reads a 64 bit double from the buffer at the specified offset with specified endian format. Set noAssert to true to skip validation of offset. This means that offset may be beyond the end of the buffer. Defaults to false.</td>
          </tr> 
          <tr>
           <td>35</td>
           <td><b>buf.writeUInt8(value, offset[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>value Number</p></li> 
             <li><p>offset Number</p></li> 
             <li><p>noAssert Boolean, Optional, Default: false</p></li> 
            </ul> </td>
           <td>Writes value to the buffer at the specified offset. Note, value must be a valid unsigned 8 bit integer. Set noAssert to true to skip validation of value and offset. This means that value may be too large for the specific function and offset may be beyond the end of the buffer leading to the values being silently dropped. This should not be used unless you are certain of correctness. Defaults to false.</td>
          </tr> 
          <tr>
           <td>36</td>
           <td><b>buf.writeUInt16LE(value, offset[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>value Number</p></li> 
             <li><p>offset Number</p></li> 
             <li><p>noAssert Boolean, Optional, Default: false</p></li> 
            </ul> </td>
           <td>Writes value to the buffer at the specified offset with specified endian format. Note, value must be a valid unsigned 16 bit integer. Set noAssert to true to skip validation of value and offset. This means that value may be too large for the specific function and offset may be beyond the end of the buffer leading to the values being silently dropped. This should not be used unless you are certain of correctness. Defaults to false.</td>
          </tr> 
          <tr>
           <td>37</td>
           <td><b>buf.writeUInt16BE(value, offset[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>value Number</p></li> 
             <li><p>offset Number</p></li> 
             <li><p>noAssert Boolean, Optional, Default: false</p></li> 
            </ul> </td>
           <td>Writes value to the buffer at the specified offset with specified endian format. Note, value must be a valid unsigned 16 bit integer. Set noAssert to true to skip validation of value and offset. This means that value may be too large for the specific function and offset may be beyond the end of the buffer leading to the values being silently dropped. This should not be used unless you are certain of correctness. Defaults to false.</td>
          </tr> 
          <tr>
           <td>38</td>
           <td><b>buf.writeUInt32LE(value, offset[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>value Number</p></li> 
             <li><p>offset Number</p></li> 
             <li><p>noAssert Boolean, Optional, Default: false</p></li> 
            </ul> </td>
           <td>Writes value to the buffer at the specified offset with specified endian format. Note, value must be a valid unsigned 32 bit integer. Set noAssert to true to skip validation of value and offset. This means that value may be too large for the specific function and offset may be beyond the end of the buffer leading to the values being silently dropped. This should not be used unless you are certain of correctness. Defaults to false.</td>
          </tr> 
          <tr>
           <td>39</td>
           <td><b>buf.writeUInt32BE(value, offset[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>value Number</p></li> 
             <li><p>offset Number</p></li> 
             <li><p>noAssert Boolean, Optional, Default: false</p></li> 
            </ul> </td>
           <td>Writes value to the buffer at the specified offset with specified endian format. Note, value must be a valid unsigned 32 bit integer. Set noAssert to true to skip validation of value and offset. This means that value may be too large for the specific function and offset may be beyond the end of the buffer leading to the values being silently dropped. This should not be used unless you are certain of correctness. Defaults to false.</td>
          </tr> 
          <tr>
           <td>40</td>
           <td><b>buf.writeInt8(value, offset[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>value Number</p></li> 
             <li><p>offset Number</p></li> 
             <li><p>noAssert Boolean, Optional, Default: false</p></li> 
            </ul> </td>
           <td>Writes value to the buffer at the specified offset with specified endian format. Note, value must be a valid signed 8 bit integer. Set noAssert to true to skip validation of value and offset. This means that value may be too large for the specific function and offset may be beyond the end of the buffer leading to the values being silently dropped. This should not be used unless you are certain of correctness. Defaults to false.</td>
          </tr> 
          <tr>
           <td>41</td>
           <td><b>buf.writeInt16LE(value, offset[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>value Number</p></li> 
             <li><p>offset Number</p></li> 
             <li><p>noAssert Boolean, Optional, Default: false</p></li> 
            </ul> </td>
           <td>Writes value to the buffer at the specified offset with specified endian format. Note, value must be a valid signed 16 bit integer. Set noAssert to true to skip validation of value and offset. This means that value may be too large for the specific function and offset may be beyond the end of the buffer leading to the values being silently dropped. This should not be used unless you are certain of correctness. Defaults to false.</td>
          </tr> 
          <tr>
           <td>42</td>
           <td><b>buf.writeInt16BE(value, offset[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>value Number</p></li> 
             <li><p>offset Number</p></li> 
             <li><p>noAssert Boolean, Optional, Default: false</p></li> 
            </ul> </td>
           <td>Writes value to the buffer at the specified offset with specified endian format. Note, value must be a valid signed 16 bit integer. Set noAssert to true to skip validation of value and offset. This means that value may be too large for the specific function and offset may be beyond the end of the buffer leading to the values being silently dropped. This should not be used unless you are certain of correctness. Defaults to false.</td>
          </tr> 
          <tr>
           <td>43</td>
           <td><b>buf.writeInt32LE(value, offset[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>value Number</p></li> 
             <li><p>offset Number</p></li> 
             <li><p>noAssert Boolean, Optional, Default: false</p></li> 
            </ul> </td>
           <td>Writes value to the buffer at the specified offset with specified endian format. Note, value must be a valid signed 32 bit integer. Set noAssert to true to skip validation of value and offset. This means that value may be too large for the specific function and offset may be beyond the end of the buffer leading to the values being silently dropped. This should not be used unless you are certain of correctness. Defaults to false.</td>
          </tr> 
          <tr>
           <td>44</td>
           <td><b>buf.writeInt32BE(value, offset[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>value Number</p></li> 
             <li><p>offset Number</p></li> 
             <li><p>noAssert Boolean, Optional, Default: false</p></li> 
            </ul> </td>
           <td>Writes value to the buffer at the specified offset with specified endian format. Note, value must be a valid signed 32 bit integer. Set noAssert to true to skip validation of value and offset. This means that value may be too large for the specific function and offset may be beyond the end of the buffer leading to the values being silently dropped. This should not be used unless you are certain of correctness. Defaults to false.</td>
          </tr> 
          <tr>
           <td>45</td>
           <td><b>buf.writeFloatLE(value, offset[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>value Number</p></li> 
             <li><p>offset Number</p></li> 
             <li><p>noAssert Boolean, Optional, Default: false</p></li> 
            </ul> </td>
           <td>Writes value to the buffer at the specified offset with specified endian format. Note, value must be a valid 32 bit float. Set noAssert to true to skip validation of value and offset. This means that value may be too large for the specific function and offset may be beyond the end of the buffer leading to the values being silently dropped. This should not be used unless you are certain of correctness. Defaults to false.</td>
          </tr> 
          <tr>
           <td>46</td>
           <td><b>buf.writeFloatBE(value, offset[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>value Number</p></li> 
             <li><p>offset Number</p></li> 
             <li><p>noAssert Boolean, Optional, Default: false</p></li> 
            </ul> </td>
           <td>Writes value to the buffer at the specified offset with specified endian format. Note, value must be a valid 32 bit float. Set noAssert to true to skip validation of value and offset. This means that value may be too large for the specific function and offset may be beyond the end of the buffer leading to the values being silently dropped. This should not be used unless you are certain of correctness. Defaults to false.</td>
          </tr> 
          <tr>
           <td>47</td>
           <td><b>buf.writeDoubleLE(value, offset[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>value Number</p></li> 
             <li><p>offset Number</p></li> 
             <li><p>noAssert Boolean, Optional, Default: false</p></li> 
            </ul> </td>
           <td>Writes value to the buffer at the specified offset with specified endian format. Note, value must be a valid 64 bit double. Set noAssert to true to skip validation of value and offset. This means that value may be too large for the specific function and offset may be beyond the end of the buffer leading to the values being silently dropped. This should not be used unless you are certain of correctness. Defaults to false.</td>
          </tr> 
          <tr>
           <td>48</td>
           <td><b>buf.writeDoubleBE(value, offset[, noAssert])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>value Number</p></li> 
             <li><p>offset Number</p></li> 
             <li><p>noAssert Boolean, Optional, Default: false</p></li> 
            </ul> </td>
           <td>Writes value to the buffer at the specified offset with specified endian format. Note, value must be a valid 64 bit double. Set noAssert to true to skip validation of value and offset. This means that value may be too large for the specific function and offset may be beyond the end of the buffer leading to the values being silently dropped. This should not be used unless you are certain of correctness. Defaults to false.</td>
          </tr> 
          <tr>
           <td>49</td>
           <td><b>buf.fill(value[, offset][, end])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>value Number</p></li> 
             <li><p>offset Number, Optional</p></li> 
             <li><p>end Number, Optional</p></li> 
            </ul> </td>
           <td>Fills the buffer with the specified value. If the offset (defaults to 0) and end (defaults to buffer.length) are not given it will fill the entire buffer.</td>
          </tr> 
         </tbody>
        </table> 
        <h2>Class Methods</h2> 
        <table class="src"> 
         <tbody>
          <tr>
           <th>Sr. No.</th>
           <th>method</th>
           <th>Parameters</th>
           <th>Description</th>
          </tr> 
          <tr>
           <td>1</td>
           <td><b>Buffer.isEncoding(encoding)</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>encoding String The encoding string to test</p></li> 
            </ul> </td> 
           <td>Returns true if the encoding is a valid encoding argument, or false otherwise.</td>
          </tr> 
          <tr>
           <td>2</td>
           <td><b>Buffer.isBuffer(obj)</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>obj Object</p></li> 
             <li><p>Return: Boolean</p></li> 
            </ul> </td> 
           <td>Tests if obj is a Buffer.</td>
          </tr> 
          <tr>
           <td>3</td>
           <td><b>Buffer.byteLength(string[, encoding])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>string String</p></li> 
             <li><p>encoding String, Optional, Default: 'utf8'</p></li> 
             <li><p>Return: Number</p></li> 
            </ul> </td> 
           <td>Gives the actual byte length of a string. encoding defaults to 'utf8'. This is not the same as String.prototype.length since that returns the number of characters in a string.</td>
          </tr> 
          <tr>
           <td>4</td>
           <td><b>Buffer.concat(list[, totalLength])</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>list Array List of Buffer objects to concat</p></li> 
             <li><p>totalLength Number Total length of the buffers when concatenated</p></li> 
            </ul> </td> 
           <td>Returns a buffer which is the result of concatenating all the buffers in the list together.</td>
          </tr> 
          <tr>
           <td>5</td>
           <td><b>Buffer.compare(buf1, buf2)</b></td> 
           <td> 
            <ul class="list"> 
             <li><p>buf1 Buffer</p></li> 
             <li><p>buf2 Buffer</p></li> 
            </ul> </td> 
           <td>The same as buf1.compare(buf2). Useful for sorting an Array of Buffers.</td>
          </tr> 
         </tbody>
        </table> 
        <h2>Example</h2> 
        <p>Create a js file named test.js in <b>C:\&gt;Nodejs_WorkSpace</b>.</p> 
        <p><i>File: test.js</i></p> 
        <pre class="prettyprint tryit">
//create a buffer
var buffer = new Buffer(26);
console.log("buffer length: " + buffer.length);

//write to buffer
var data = "TutorialsPoint.com";
buffer.write(data);
console.log(data + ": " + data.length + " characters, " + Buffer.byteLength(data, 'utf8') + " bytes");

//slicing a buffer
var buffer1 = buffer.slice(0,14);
console.log("buffer1 length: " + buffer1.length);
console.log("buffer1 content: " + buffer1.toString());

//modify buffer by indexes
for (var i = 0 ; i &lt; 26 ; i++) {
  buffer[i] = i + 97; // 97 is ASCII a
}
console.log("buffer content: " + buffer.toString('ascii'));

var buffer2 = new Buffer(4);

buffer2[0] = 0x3;
buffer2[1] = 0x4;
buffer2[2] = 0x23;
buffer2[3] = 0x42;

//reading from buffer
console.log(buffer2.readUInt16BE(0));
console.log(buffer2.readUInt16LE(0));
console.log(buffer2.readUInt16BE(1));
console.log(buffer2.readUInt16LE(1));
console.log(buffer2.readUInt16BE(2));
console.log(buffer2.readUInt16LE(2));


var buffer3 = new Buffer(4);
buffer3.writeUInt16BE(0xdead, 0);
buffer3.writeUInt16BE(0xbeef, 2);

console.log(buffer3);

buffer3.writeUInt16LE(0xdead, 0);
buffer3.writeUInt16LE(0xbeef, 2);

console.log(buffer3);
//convert to a JSON Object
var json = buffer3.toJSON();
console.log("JSON Representation : ");
console.log(json);

//Get a buffer from JSON Object
var buffer6 = new Buffer(json);
console.log(buffer6);

//copy a buffer
var buffer4 = new Buffer(26);
buffer.copy(buffer4);
console.log("buffer4 content: " + buffer4.toString());

//concatenate a buffer
var buffer5 = Buffer.concat([buffer,buffer4]);
console.log("buffer5 content: " + buffer5.toString());
</pre> 
        <p>Now run the test.js to see the result:</p> 
        <pre class="prettyprint notranslate">
C:\Nodejs_WorkSpace&gt;node test.js
</pre> 
        <p>Verify the Output.</p> 
        <pre class="result notranslate">
buffer length: 26
TutorialsPoint.com: 18 characters, 18 bytes
buffer1 length: 14
buffer1 content: TutorialsPoint
buffer content: abcdefghijklmnopqrstuvwxyz
772
1027
1059
8964
9026
16931
&lt;Buffer de ad be ef&gt;
&lt;Buffer ad de ef be&gt;
buffer4 content: abcdefghijklmnopqrstuvwxyz
buffer5 content: abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz
</pre> 
        <h1>Node.js - Streams</h1> 
        <h2>What are Streams?</h2> 
        <p>Streams are objects that let yu read data from a source or write data to destination in continous fashion. In Node, there are four types of streams.</p> 
        <ul class="list"> 
         <li><p><b>Readable</b> - Stream which is used for read operation.</p></li> 
         <li><p><b>Writable</b> - Stream which is used for write operation.</p></li> 
         <li><p><b>Duplex</b> - Stream which can be used for both read and write operation.</p></li> 
         <li><p><b>Transform</b> - A type of duplex stream where the output is computed based on input.</p></li> 
        </ul> 
        <p>Each type of Stream is an EventEmitter and throws several events at times. For example, some of the commonly used events are:</p> 
        <ul class="list"> 
         <li><p><b>data</b> - This event is fired when there is data is available to read.</p></li> 
         <li><p><b>end</b> - This event is fired when there is no more data to read.</p></li> 
         <li><p><b>error</b> - This event is fired when there is any error receiving or writing data.</p></li> 
         <li><p><b>finish</b> - This event is fired when all data has been flushed to underlying system</p></li> 
        </ul> 
        <h2>Reading from stream</h2> 
        <p>Create a txt file named test.txt in <b>C:\&gt;Nodejs_WorkSpace</b></p> 
        <pre class="prettyprint notranslate">
TutorialsPoint.Com
</pre> 
        <p>Create test.js in <b>C:\&gt;Nodejs_WorkSpace</b></p> 
        <pre class="prettyprint tryit">
var fs = require("fs");
var data = '';
//create a readable stream
var readerStream = fs.createReadStream('test.txt');

//set the encoding to be utf8. 
readerStream.setEncoding('UTF8');

//handle stream events
readerStream.on('data', function(chunk) {
   data += chunk;
});

readerStream.on('end',function(){
   console.log(data);
});

readerStream.on('error', function(err){
   console.log(err.stack);
});
console.log("Program Ended");
</pre> 
        <p>Now run the test.js to see the result:</p> 
        <pre class="prettyprint notranslate">
C:\Nodejs_WorkSpace&gt;node test.js
</pre> 
        <p>Verify the Output</p> 
        <pre class="result notranslate">
Program Ended
TutorialsPoint.Com
</pre> 
        <h2>Writing to stream</h2> 
        <p>Update test.js in <b>C:\&gt;Nodejs_WorkSpace</b></p> 
        <pre class="prettyprint tryit">
var fs = require("fs");
var data = 'TutorialsPoint.Com';
//create a writable stream
var writerStream = fs.createWriteStream('test1.txt');

//write the data to stream
//set the encoding to be utf8. 
writerStream.write(data,'UTF8');

//mark the end of file
writerStream.end();

//handle stream events
writerStream.on('finish', function() {
    console.log("Write completed.");
});

writerStream.on('error', function(err){
   console.log(err.stack);
});
console.log("Program Ended");
</pre> 
        <p>Now run the test.js to see the result:</p> 
        <pre class="prettyprint notranslate">
C:\Nodejs_WorkSpace&gt;node test.js
</pre> 
        <p>Verify the Output</p> 
        <pre class="result notranslate">
Program Ended
Write completed.
</pre> 
        <p>Open test1.txt in <b>C:\&gt;Nodejs_WorkSpace</b>.Verify the result.</p> 
        <pre class="prettyprint notranslate">
TutorialsPoint.Com
</pre> 
        <h2>Piping streams</h2> 
        <p>Piping is a mechanism to connect output of one stream to another stream. It is normally used to get data from one stream and to pass output of that stream to another stream. There is no limit on piping operations. Consider the above example, where we've read test.txt using readerStream and write test1.txt using writerStream. Now we'll use the piping to simplify our operation or reading from one file and writing to another file.</p> 
        <p>Update test.js in <b>C:\&gt;Nodejs_WorkSpace</b></p> 
        <pre class="prettyprint tryit">
var fs = require("fs");

//create a readable stream
var readerStream = fs.createReadStream('test.txt');

//create a writable stream
var writerStream = fs.createWriteStream('test2.txt');

//pipe the read and write operations
//read test.txt and write data to test2.txt
readerStream.pipe(writerStream);

console.log("Program Ended");
</pre> 
        <p>Now run the test.js to see the result:</p> 
        <pre class="prettyprint notranslate">
C:\Nodejs_WorkSpace&gt;node test.js
</pre> 
        <p>Verify the Output</p> 
        <pre class="result notranslate">
Program Ended
</pre> 
        <p>Open test2.txt in <b>C:\&gt;Nodejs_WorkSpace</b>. Verify the result.</p> 
        <pre class="prettyprint notranslate">
TutorialsPoint.Com
</pre> 
        <h1>Node.js - File System</h1> 
        <p><b>fs</b> module is used for File I/O. fs module can be imported using following syntax. </p> 
        <pre class="prettyprint notranslate">
var fs = require("fs")
</pre> 
        <h2>Synchronous vs Asynchronous</h2> 
        <p>Every method in fs module have synchronous as well as asynchronous form. Asynchronous methods takes a last parameter as completion function callback and first parameter of the callback function is error. It is preferred to use asynchronous method instead of synchronous method as former never block the program execution where the latter one does.</p> 
        <h2>Example</h2> 
        <p>Create a js file named test.js in <b>C:\&gt;Nodejs_WorkSpace</b>.</p> 
        <p><i>File: test.js</i></p> 
        <pre class="prettyprint tryit">
var fs = require("fs");

//Asynchronous read
fs.readFile('test.txt', function (err, data) {
    if (err) return console.error(err);
    console.log("Asynchronous read: " + data.toString());
});

//Synchronous read
var data = fs.readFileSync('test.txt');
console.log("Synchronous read: " + data.toString());

console.log("Program Ended");
</pre>  
        <p>Now run the test.js to see the result:</p> 
        <pre class="prettyprint notranslate">
C:\Nodejs_WorkSpace&gt;node test.js
</pre> 
        <p>Verify the Output.</p> 
        <pre class="result notranslate">
Synchronous read: TutorialsPoint.Com
Program Ended
Asynchronous read: TutorialsPoint.Com
</pre> 
        <h2>Methods</h2> 
        <table class="src"> 
         <tbody>
          <tr>
           <th>Sr. No.</th>
           <th>method</th>
           <th>Description</th>
          </tr> 
          <tr>
           <td>1</td>
           <td><b>fs.rename(oldPath, newPath, callback)</b></td>
           <td>Asynchronous rename(). No arguments other than a possible exception are given to the completion callback.</td>
          </tr> 
          <tr>
           <td>2</td>
           <td><b>fs.ftruncate(fd, len, callback)</b></td>
           <td>Asynchronous ftruncate(). No arguments other than a possible exception are given to the completion callback.</td>
          </tr> 
          <tr>
           <td>3</td>
           <td><b>fs.ftruncateSync(fd, len)</b></td>
           <td>Synchronous ftruncate()</td>
          </tr> 
          <tr>
           <td>4</td>
           <td><b>fs.truncate(path, len, callback)</b></td>
           <td>Asynchronous truncate(). No arguments other than a possible exception are given to the completion callback.</td>
          </tr> 
          <tr>
           <td>5</td>
           <td><b>fs.truncateSync(path, len)</b></td>
           <td>Synchronous truncate()</td>
          </tr> 
          <tr>
           <td>6</td>
           <td><b>fs.chown(path, uid, gid, callback)</b></td>
           <td>Asynchronous chown(). No arguments other than a possible exception are given to the completion callback.</td>
          </tr> 
          <tr>
           <td>7</td>
           <td><b>fs.chownSync(path, uid, gid)</b></td>
           <td>Synchronous chown()</td>
          </tr> 
          <tr>
           <td>8</td>
           <td><b>fs.fchown(fd, uid, gid, callback)</b></td>
           <td>Asynchronous fchown(). No arguments other than a possible exception are given to the completion callback.</td>
          </tr> 
          <tr>
           <td>9</td>
           <td><b>fs.fchownSync(fd, uid, gid)</b></td>
           <td>Synchronous fchown()</td>
          </tr> 
          <tr>
           <td>10</td>
           <td><b>fs.lchown(path, uid, gid, callback)</b></td>
           <td>Asynchronous lchown(). No arguments other than a possible exception are given to the completion callback.</td>
          </tr> 
          <tr>
           <td>11</td>
           <td><b>fs.lchownSync(path, uid, gid)</b></td>
           <td>Synchronous lchown()</td>
          </tr> 
          <tr>
           <td>12</td>
           <td><b>fs.chmod(path, mode, callback)</b></td>
           <td>Asynchronous chmod(). No arguments other than a possible exception are given to the completion callback.</td>
          </tr> 
          <tr>
           <td>13</td>
           <td><b>fs.chmodSync(path, mode)</b></td>
           <td>Synchronous chmod().</td>
          </tr> 
          <tr>
           <td>14</td>
           <td><b>fs.fchmod(fd, mode, callback)</b></td>
           <td>Asynchronous fchmod(). No arguments other than a possible exception are given to the completion callback.</td>
          </tr> 
          <tr>
           <td>15</td>
           <td><b>fs.fchmodSync(fd, mode)</b></td>
           <td>Synchronous fchmod().</td>
          </tr> 
          <tr>
           <td>16</td>
           <td><b>fs.lchmod(path, mode, callback)</b></td>
           <td>Asynchronous lchmod(). No arguments other than a possible exception are given to the completion callback.Only available on Mac OS X.</td>
          </tr> 
          <tr>
           <td>17</td>
           <td><b>fs.lchmodSync(path, mode)</b></td>
           <td>Synchronous lchmod().</td>
          </tr> 
          <tr>
           <td>18</td>
           <td><b>fs.stat(path, callback)</b></td>
           <td>Asynchronous stat(). The callback gets two arguments (err, stats) where stats is a fs.Stats object.</td>
          </tr> 
          <tr>
           <td>19</td>
           <td><b>fs.lstat(path, callback)</b></td>
           <td>Asynchronous lstat(). The callback gets two arguments (err, stats) where stats is a fs.Stats object. lstat() is identical to stat(), except that if path is a symbolic link, then the link itself is stat-ed, not the file that it refers to.</td>
          </tr> 
          <tr>
           <td>20</td>
           <td><b>fs.fstat(fd, callback)</b></td>
           <td>Asynchronous fstat(). The callback gets two arguments (err, stats) where stats is a fs.Stats object. fstat() is identical to stat(), except that the file to be stat-ed is specified by the file descriptor fd.</td>
          </tr> 
          <tr>
           <td>21</td>
           <td><b>fs.statSync(path)</b></td>
           <td>Synchronous stat(). Returns an instance of fs.Stats.</td>
          </tr> 
          <tr>
           <td>22</td>
           <td><b>fs.lstatSync(path)</b></td>
           <td>Synchronous lstat(). Returns an instance of fs.Stats.</td>
          </tr> 
          <tr>
           <td>23</td>
           <td><b>fs.fstatSync(fd)</b></td>
           <td>Synchronous fstat(). Returns an instance of fs.Stats.</td>
          </tr> 
          <tr>
           <td>24</td>
           <td><b>fs.link(srcpath, dstpath, callback)</b></td>
           <td>Asynchronous link(). No arguments other than a possible exception are given to the completion callback.</td>
          </tr> 
          <tr>
           <td>25</td>
           <td><b>fs.linkSync(srcpath, dstpath)</b></td>
           <td>Synchronous link().</td>
          </tr> 
          <tr>
           <td>26</td>
           <td><b>fs.symlink(srcpath, dstpath[, type], callback)</b></td>
           <td>Asynchronous symlink(). No arguments other than a possible exception are given to the completion callback. The type argument can be set to 'dir', 'file', or 'junction' (default is 'file') and is only available on Windows (ignored on other platforms). Note that Windows junction points require the destination path to be absolute. When using 'junction', the destination argument will automatically be normalized to absolute path.</td>
          </tr> 
          <tr>
           <td>27</td>
           <td><b>fs.symlinkSync(srcpath, dstpath[, type])</b></td>
           <td>Synchronous symlink().</td>
          </tr> 
          <tr>
           <td>28</td>
           <td><b>fs.readlink(path, callback)</b></td>
           <td>Asynchronous readlink(). The callback gets two arguments (err, linkString).</td>
          </tr> 
          <tr>
           <td>29</td>
           <td><b>fs.realpath(path[, cache], callback)</b></td>
           <td>Asynchronous realpath(). The callback gets two arguments (err, resolvedPath). May use process.cwd to resolve relative paths. cache is an object literal of mapped paths that can be used to force a specific path resolution or avoid additional fs.stat calls for known real paths.</td>
          </tr> 
          <tr>
           <td>30</td>
           <td><b>fs.realpathSync(path[, cache])</b></td>
           <td>Synchronous realpath(). Returns the resolved path.</td>
          </tr> 
          <tr>
           <td>31</td>
           <td><b>fs.unlink(path, callback)</b></td>
           <td>Asynchronous unlink(). No arguments other than a possible exception are given to the completion callback.</td>
          </tr> 
          <tr>
           <td>32</td>
           <td><b>fs.unlinkSync(path)</b></td>
           <td>Synchronous unlink().</td>
          </tr> 
          <tr>
           <td>33</td>
           <td><b>fs.rmdir(path, callback)</b></td>
           <td>Asynchronous rmdir(). No arguments other than a possible exception are given to the completion callback.</td>
          </tr> 
          <tr>
           <td>34</td>
           <td><b>fs.rmdirSync(path)</b></td>
           <td>Synchronous rmdir().</td>
          </tr> 
          <tr>
           <td>35</td>
           <td><b>fs.mkdir(path[, mode], callback)</b></td>
           <td>SAsynchronous mkdir(2). No arguments other than a possible exception are given to the completion callback. mode defaults to 0777.</td>
          </tr> 
          <tr>
           <td>36</td>
           <td><b>fs.mkdirSync(path[, mode])</b></td>
           <td>Synchronous mkdir().</td>
          </tr> 
          <tr>
           <td>37</td>
           <td><b>fs.readdir(path, callback)</b></td>
           <td>Asynchronous readdir(3). Reads the contents of a directory. The callback gets two arguments (err, files) where files is an array of the names of the files in the directory excluding '.' and '..'.</td>
          </tr> 
          <tr>
           <td>38</td>
           <td><b>fs.readdirSync(path)</b></td>
           <td>Synchronous readdir(). Returns an array of filenames excluding '.' and '..'.</td>
          </tr> 
          <tr>
           <td>39</td>
           <td><b>fs.close(fd, callback)</b></td>
           <td>Asynchronous close(). No arguments other than a possible exception are given to the completion callback.</td>
          </tr> 
          <tr>
           <td>40</td>
           <td><b>fs.closeSync(fd)</b></td>
           <td>Synchronous close().</td>
          </tr> 
          <tr>
           <td>41</td>
           <td><b>fs.open(path, flags[, mode], callback)</b></td>
           <td>Asynchronous file open.</td>
          </tr> 
          <tr>
           <td>42</td>
           <td><b>fs.openSync(path, flags[, mode])</b></td>
           <td>Synchronous version of fs.open().</td>
          </tr> 
          <tr>
           <td>43</td>
           <td><b>fs.utimes(path, atime, mtime, callback)</b></td>
           <td>&nbsp;</td>
          </tr> 
          <tr>
           <td>44</td>
           <td><b>fs.utimesSync(path, atime, mtime)</b></td>
           <td>Change file timestamps of the file referenced by the supplied path.</td>
          </tr> 
          <tr>
           <td>45</td>
           <td><b>fs.futimes(fd, atime, mtime, callback)</b></td>
           <td>&nbsp;</td>
          </tr> 
          <tr>
           <td>46</td>
           <td><b>fs.futimesSync(fd, atime, mtime)</b></td>
           <td>Change the file timestamps of a file referenced by the supplied file descriptor.</td>
          </tr> 
          <tr>
           <td>47</td>
           <td><b>fs.fsync(fd, callback)</b></td>
           <td>Asynchronous fsync(2). No arguments other than a possible exception are given to the completion callback.</td>
          </tr> 
          <tr>
           <td>48</td>
           <td><b>fs.fsyncSync(fd)</b></td>
           <td>Synchronous fsync(2).</td>
          </tr> 
          <tr>
           <td>49</td>
           <td><b>fs.write(fd, buffer, offset, length[, position], callback)</b></td>
           <td>Write buffer to the file specified by fd.</td>
          </tr> 
          <tr>
           <td>50</td>
           <td><b>fs.write(fd, data[, position[, encoding]], callback)</b></td>
           <td>Write data to the file specified by fd. If data is not a Buffer instance then the value will be coerced to a string.</td>
          </tr> 
          <tr>
           <td>51</td>
           <td><b>fs.writeSync(fd, buffer, offset, length[, position])</b></td>
           <td>Synchronous versions of fs.write(). Returns the number of bytes written.</td>
          </tr> 
          <tr>
           <td>52</td>
           <td><b>fs.writeSync(fd, data[, position[, encoding]])</b></td>
           <td>Synchronous versions of fs.write(). Returns the number of bytes written.</td>
          </tr> 
          <tr>
           <td>53</td>
           <td><b>fs.read(fd, buffer, offset, length, position, callback)</b></td>
           <td>Read data from the file specified by fd.</td>
          </tr> 
          <tr>
           <td>54</td>
           <td><b>fs.readSync(fd, buffer, offset, length, position)</b></td>
           <td>Synchronous version of fs.read. Returns the number of bytesRead.</td>
          </tr> 
          <tr>
           <td>55</td>
           <td><b>fs.readFile(filename[, options], callback)</b></td>
           <td>Asynchronously reads the entire contents of a file.</td>
          </tr> 
          <tr>
           <td>56</td>
           <td><b>fs.readFileSync(filename[, options])</b></td>
           <td>Synchronous version of fs.readFile. Returns the contents of the filename.</td>
          </tr> 
          <tr>
           <td>57</td>
           <td><b>fs.writeFile(filename, data[, options], callback)</b></td>
           <td>Asynchronously writes data to a file, replacing the file if it already exists. data can be a string or a buffer.</td>
          </tr> 
          <tr>
           <td>58</td>
           <td><b>fs.writeFileSync(filename, data[, options])</b></td>
           <td>The synchronous version of fs.writeFile.</td>
          </tr> 
          <tr>
           <td>59</td>
           <td><b>fs.appendFile(filename, data[, options], callback)</b></td>
           <td>Asynchronously append data to a file, creating the file if it not yet exists. data can be a string or a buffer.</td>
          </tr> 
          <tr>
           <td>60</td>
           <td><b>fs.appendFileSync(filename, data[, options])</b></td>
           <td>The synchronous version of fs.appendFile.</td>
          </tr> 
          <tr>
           <td>61</td>
           <td><b>fs.watchFile(filename[, options], listener)</b></td>
           <td>Watch for changes on filename. The callback listener will be called each time the file is accessed.</td>
          </tr> 
          <tr>
           <td>62</td>
           <td><b>fs.unwatchFile(filename[, listener])</b></td>
           <td>Stop watching for changes on filename. If listener is specified, only that particular listener is removed. Otherwise, all listeners are removed and you have effectively stopped watching filename.</td>
          </tr> 
          <tr>
           <td>63</td>
           <td><b>fs.watch(filename[, options][, listener])</b></td>
           <td>Watch for changes on filename, where filename is either a file or a directory. The returned object is a fs.FSWatcher.</td>
          </tr> 
          <tr>
           <td>64</td>
           <td><b>fs.exists(path, callback)</b></td>
           <td>Test whether or not the given path exists by checking with the file system. Then call the callback argument with either true or false.</td>
          </tr> 
          <tr>
           <td>65</td>
           <td><b>fs.existsSync(path)</b></td>
           <td>Synchronous version of fs.exists.</td>
          </tr> 
          <tr>
           <td>66</td>
           <td><b>fs.access(path[, mode], callback)</b></td>
           <td>Tests a user's permissions for the file specified by path. mode is an optional integer that specifies the accessibility checks to be performed.</td>
          </tr> 
          <tr>
           <td>67</td>
           <td><b>fs.accessSync(path[, mode])</b></td>
           <td>Synchronous version of fs.access. This throws if any accessibility checks fail, and does nothing otherwise.</td>
          </tr> 
          <tr>
           <td>68</td>
           <td><b>fs.createReadStream(path[, options])</b></td>
           <td>Returns a new ReadStream object.</td>
          </tr> 
          <tr>
           <td>69</td>
           <td><b>fs.createWriteStream(path[, options])</b></td>
           <td>Returns a new WriteStream object.</td>
          </tr> 
          <tr>
           <td>70</td>
           <td><b>fs.symlink(srcpath, dstpath[, type], callback)</b></td>
           <td>Asynchronous symlink(). No arguments other than a possible exception are given to the completion callback. The type argument can be set to 'dir', 'file', or 'junction' (default is 'file') and is only available on Windows (ignored on other platforms). Note that Windows junction points require the destination path to be absolute. When using 'junction', the destination argument will automatically be normalized to absolute path.</td>
          </tr> 
         </tbody>
        </table> 
        <h2>Flags</h2> 
        <p>flags for read/write operations are:</p> 
        <ul class="list"> 
         <li><p><b>r</b> - Open file for reading. An exception occurs if the file does not exist.</p></li> 
         <li><p><b>r+</b> - Open file for reading and writing. An exception occurs if the file does not exist.</p></li> 
         <li><p><b>rs</b> - Open file for reading in synchronous mode. Instructs the operating system to bypass the local file system cache. This is primarily useful for opening files on NFS mounts as it allows you to skip the potentially stale local cache. It has a very real impact on I/O performance so don't use this flag unless you need it. Note that this doesn't turn fs.open() into a synchronous blocking call. If that's what you want then you should be using fs.openSync()</p></li> 
         <li><p><b>rs+</b> - Open file for reading and writing, telling the OS to open it synchronously. See notes for 'rs' about using this with caution.</p></li> 
         <li><p><b>w</b> - Open file for writing. The file is created (if it does not exist) or truncated (if it exists).</p></li> 
         <li><p><b>wx</b> - Like 'w' but fails if path exists.</p></li> 
         <li><p><b>w+</b> - Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists).</p></li> 
         <li><p><b>wx+</b> - Like 'w+' but fails if path exists.</p></li> 
         <li><p><b>a</b> - Open file for appending. The file is created if it does not exist.</p></li> 
         <li><p><b>ax</b> - Like 'a' but fails if path exists.</p></li> 
         <li><p><b>a+</b> - Open file for reading and appending. The file is created if it does not exist.</p></li> 
         <li><p><b>ax+'</b> - Like 'a+' but fails if path exists.</p></li> 
        </ul> 
        <h2>Example</h2> 
        <p>Create a txt file named test.txt in <b>C:\&gt;Nodejs_WorkSpace</b></p> 
        <pre class="prettyprint notranslate">
TutorialsPoint.Com 
</pre> 
        <p>Create a js file named test.js in <b>C:\&gt;Nodejs_WorkSpace</b>.</p> 
        <p><i>File: test.js</i></p> 
        <pre class="prettyprint tryit">
var fs = require("fs");
var buffer = new Buffer(1024);

//Example: Opening File
function openFile(){
   console.log("\nOpen file");
   fs.open('test.txt', 'r+', function(err,fd) {
      if (err) console.log(err.stack);
	  console.log("File opened");     
   });
}

//Example: Getting File Info
function getStats(){
   console.log("\nGetting File Info");
   fs.stat('test.txt', function (err, stats) {
      if (err) console.log(err.stack);
      console.log(stats);
      console.log("isFile ? "+stats.isFile());
      console.log("isDirectory ? "+stats.isDirectory());
   });
}

//Example: Writing File
function writeFile(){
   console.log("\nWrite file");
   fs.open('test1.txt', 'w+', function(err,fd) {
      var data = "TutorialsPoint.com - Simply Easy Learning!";
      buffer.write(data); 
      
      fs.write(fd, buffer,0,data.length,0,function(err, bytes){
         if (err) console.log(err.stack);
	     console.log(bytes + " written!");	     
      });	
   });
}

//Example: Read File
function readFile(){
   console.log("\nRead file");
   fs.open('test1.txt', 'r+', function(err,fd) {
      if (err) console.log(err.stack);
      fs.read(fd, buffer,0,buffer.length,0,function(err, bytes){
         if (err) console.log(err.stack);
	     console.log(bytes + " read!");
	     if(bytes &gt; 0){
            console.log(buffer.slice(0,bytes).toString());
	     }
      });	
   });
}

function closeFile(){
   console.log("\nClose file");
   fs.open('test.txt', 'r+', function(err,fd) {
      if (err) console.log(err.stack);	  
	  fs.close(fd,function(){
	     if (err) console.log(err.stack);	  
		 console.log("File closed!");
	  });
   });
}

function deleteFile(){
   console.log("\nDelete file");
   fs.open('test1.txt', 'r+', function(err,fd) {
	   fs.unlink('test1.txt', function(err) {
		  if (err) console.log(err.stack);	  	  	  
		  console.log("File deleted!");	 
	   });
   });
}

function truncateFile(){
   console.log("\nTruncate file");
   fs.open('test.txt', 'r+', function(err,fd) {
	   fs.ftruncate(fd, function(err) {
		  if (err) console.log(err.stack);	  	  	  
		  console.log("File truncated!");	 
	   });
   });
}

function createDirectory(){
	console.log("\nCreate Directory");
	fs.mkdir('test',function(err){
      if(!err){
	     console.log("Directory created!");
	  }
      if(err &amp;&amp; err.code === 'EEXIST'){
         console.log("Directory exists!");	
      } else if (err) {       
         console.log(err.stack);	  	 
      }
	});
}

function removeDirectory(){
	console.log("\nRemove Directory");
	fs.rmdir('test',function(err){
      if(!err){
	     console.log("Directory removed!");
	  }
      if (err) {      
		 console.log("Directory do not exist!");		           
      }
	});
}

function watchFile(){
   fs.watch('test.txt', function (event, filename) {
      console.log('event is: ' + event);   
   });
}

//Opening file
openFile();

//Writing File
writeFile();

//Reading File   
readFile();

//Closing Files
closeFile();

//Getting file information
getStats();
   
//Deleting Files
deleteFile();
   
//Truncating Files
truncateFile();
   
//Creating Directories
createDirectory();

//Removing Directories
removeDirectory();
   
//Watching File Changes
watchFile();
</pre> 
        <p>Now run the test.js to see the result:</p> 
        <pre class="prettyprint notranslate">
C:\Nodejs_WorkSpace&gt;node test.js
</pre> 
        <p>Verify the Output.</p> 
        <pre class="result notranslate">

Open file

Write file

Read file

Close file

Getting File Info

Delete file

Truncate file

Create Directory

Remove Directory
File opened
{ dev: 0,
  mode: 33206,
  nlink: 1,
  uid: 0,
  gid: 0,
  rdev: 0,
  ino: 0,
  size: 0,
  atime: Fri Jan 01 2010 00:02:15 GMT+0530 (India Standard Time),
  mtime: Sun Feb 15 2015 13:33:09 GMT+0530 (India Standard Time),
  ctime: Fri Jan 01 2010 00:02:15 GMT+0530 (India Standard Time) }
isFile ? true
isDirectory ? false
Directory created!
Directory removed!
event is: rename
event is: rename
42 written!
42 read!
TutorialsPoint.com - Simply Easy Learning!
File closed!
File deleted!
File truncated!
event is: change
</pre> 
        <h1>Node.js - Utility Modules</h1> 
        <p>In this article, we'll discuss some of the utility modules provided by Node.js library which are very common and are frequently used across the applications.</p> 
        <table class="src"> 
         <tbody>
          <tr>
           <th>Sr.No.</th>
           <th>Module Name &amp; Description</th>
          </tr> 
          <tr>
           <td>1</td>
           <td><b>Console</b><br> Used to print information on stdout and stderr.</td>
          </tr> 
          <tr>
           <td>2</td>
           <td><b>Process</b><br> Used to get information on current process. Provides multiple events related to process activities.</td>
          </tr> 
          <tr>
           <td>3</td>
           <td><b>OS Module</b><br> Provides basic operating-system related utility functions.</td>
          </tr> 
          <tr>
           <td>4</td>
           <td><b>Path Module</b><br> Provides utilities for handling and transforming file paths.</td>
          </tr> 
          <tr>
           <td>5</td>
           <td><b>Net Module</b><br> Provides both servers and clients as streams. Acts as a network wrapper.</td>
          </tr> 
          <tr>
           <td>6</td>
           <td><b>DNS Module</b><br> Provides functions to do actual DNS lookup as well as to use underlying operating system name resolution functionalities.</td>
          </tr> 
          <tr>
           <td>7</td>
           <td><b>Domain Module</b><br> Provides way to handle multiple different I/O operations as a single group.</td>
          </tr> 
         </tbody>
        </table> 
        <h1>Node.js - Console</h1> 
        <p><b>console</b> is a global object and is used to print to stdout and stderr. It is used in synchronous way when destination is file or a terminal and asynchronous way when destination is a pipe. </p> 
        <h2>Methods</h2> 
        <table class="src"> 
         <tbody>
          <tr>
           <th>Sr. No.</th>
           <th>method</th>
           <th>Description</th>
          </tr> 
          <tr>
           <td>1</td>
           <td><b>console.log([data][, ...])</b></td>
           <td>Prints to stdout with newline. This function can take multiple arguments in a printf()-like way.</td>
          </tr> 
          <tr>
           <td>2</td>
           <td><b>console.info([data][, ...])</b></td>
           <td>Prints to stdout with newline. This function can take multiple arguments in a printf()-like way.</td>
          </tr> 
          <tr>
           <td>3</td>
           <td><b>console.error([data][, ...])</b></td>
           <td>Prints to stderr with newline. This function can take multiple arguments in a printf()-like way.</td>
          </tr> 
          <tr>
           <td>4</td>
           <td><b>console.warn([data][, ...])</b></td>
           <td>Prints to stderr with newline. This function can take multiple arguments in a printf()-like way</td>
          </tr> 
          <tr>
           <td>5</td>
           <td><b>console.dir(obj[, options])</b></td>
           <td>Uses util.inspect on obj and prints resulting string to stdout.</td>
          </tr> 
          <tr>
           <td>6</td>
           <td><b>console.time(label)</b></td>
           <td>Mark a time.</td>
          </tr> 
          <tr>
           <td>7</td>
           <td><b>console.timeEnd(label)</b></td>
           <td>Finish timer, record output.</td>
          </tr> 
          <tr>
           <td>8</td>
           <td><b>console.trace(message[, ...])</b></td>
           <td>Print to stderr 'Trace :', followed by the formatted message and stack trace to the current position.</td>
          </tr> 
          <tr>
           <td>9</td>
           <td><b>console.assert(value[, message][, ...])</b></td>
           <td>Similar to assert.ok(), but the error message is formatted as util.format(message...).</td>
          </tr> 
         </tbody>
        </table>
        <h2>Example</h2>
        <p>Create a js file named test.js in <b>C:\&gt;Nodejs_WorkSpace</b>.</p>
        <p><i>File: test.js</i></p>
        <pre class="prettyprint tryit">
var counter = 10;

console.log("Counter: %d", counter);

console.time("Getting data");
//make a database call to retrive the data
//getDataFromDataBase();
console.timeEnd('Getting data');

console.info("Program Ended!")
</pre>
        <p>Now run the test.js to see the result:</p>
        <pre class="prettyprint notranslate">
C:\Nodejs_WorkSpace&gt;node test.js
</pre>
        <p>Verify the Output.</p>
        <pre class="result notranslate">
Counter: 10
Getting data: 0ms
Program Ended!
</pre>
        <h1>Node.js - Process</h1>
        <p><b>process</b> is a global object and is used to represent Node process. </p>
        <h2>Exit Codes</h2>
        <p>Node normally exit with a 0 status code when no more async operations are pending. There are other exit codes which are described below:</p>
        <table>             
        </table>
        <table class="src"> 
         <tbody>
          <tr>
           <th>Code</th>
           <th>Name</th>
           <th>Description</th>
          </tr> 
          <tr>
           <td>1</td>
           <td><b>Uncaught Fatal Exception</b></td>
           <td>There was an uncaught exception, and it was not handled by a domain or an uncaughtException event handler.</td>
          </tr> 
          <tr>
           <td>2</td>
           <td><b>Unused</b></td>
           <td>reserved by Bash for builtin misuse</td>
          </tr> 
          <tr>
           <td>3</td>
           <td><b>Internal JavaScript Parse Error</b></td>
           <td>The JavaScript source code internal in Node's bootstrapping process caused a parse error. This is extremely rare, and generally can only happen during development of Node itself.</td>
          </tr> 
          <tr>
           <td>4</td>
           <td><b>Internal JavaScript Evaluation Failure</b></td>
           <td>The JavaScript source code internal in Node's bootstrapping process failed to return a function value when evaluated. This is extremely rare, and generally can only happen during development of Node itself.</td>
          </tr> 
          <tr>
           <td>5</td>
           <td><b>Fatal Error</b></td>
           <td>There was a fatal unrecoverable error in V8. Typically a message will be printed to stderr with the prefix FATAL ERROR.</td>
          </tr> 
          <tr>
           <td>6</td>
           <td><b>Non-function Internal Exception Handler</b></td>
           <td>There was an uncaught exception, but the internal fatal exception handler function was somehow set to a non-function, and could not be called.</td>
          </tr> 
          <tr>
           <td>7</td>
           <td><b>Internal Exception Handler Run-Time Failure</b></td>
           <td>here was an uncaught exception, and the internal fatal exception handler function itself threw an error while attempting to handle it.</td>
          </tr> 
          <tr>
           <td>8</td>
           <td><b>Unused</b></td>
           <td>&nbsp;</td>
          </tr> 
          <tr>
           <td>9</td>
           <td><b>Invalid Argument</b></td>
           <td>Either an unknown option was specified, or an option requiring a value was provided without a value.</td>
          </tr> 
          <tr>
           <td>10</td>
           <td><b>Internal JavaScript Run-Time Failure</b></td>
           <td>The JavaScript source code internal in Node's bootstrapping process threw an error when the bootstrapping function was called. This is extremely rare, and generally can only happen during development of Node itself.</td>
          </tr> 
          <tr>
           <td>12</td>
           <td><b>Invalid Debug Argument</b> </td>
           <td>The --debug and/or --debug-brk options were set, but an invalid port number was chosen.</td>
          </tr> 
          <tr>
           <td>&gt;128</td>
           <td><b>Signal Exits</b></td>
           <td>If Node receives a fatal signal such as SIGKILL or SIGHUP, then its exit code will be 128 plus the value of the signal code. This is a standard Unix practice, since exit codes are defined to be 7-bit integers, and signal exits set the high-order bit, and then contain the value of the signal code.</td>
          </tr> 
         </tbody>
        </table> 
        <h2>Events</h2> 
        <p>Process is an eventEmitter and it emits the following events.</p> 
        <table class="src"> 
         <tbody>
          <tr>
           <th>Sr.No.</th>
           <th>Event</th>
           <th>Description</th>
          </tr> 
          <tr>
           <td>1</td>
           <td><b>exit</b></td>
           <td>Emitted when the process is about to exit. There is no way to prevent the exiting of the event loop at this point, and once all exit listeners have finished running the process will exit.</td>
          </tr> 
          <tr>
           <td>2</td>
           <td><b>beforeExit</b></td>
           <td>This event is emitted when node empties it's event loop and has nothing else to schedule. Normally, node exits when there is no work scheduled, but a listener for 'beforeExit' can make asynchronous calls, and cause node to continue.</td>
          </tr> 
          <tr>
           <td>3</td>
           <td><b>uncaughtException</b></td>
           <td>Emitted when an exception bubbles all the way back to the event loop. If a listener is added for this exception, the default action (which is to print a stack trace and exit) will not occur.</td>
          </tr> 
          <tr>
           <td>4</td>
           <td><b>Signal Events</b></td>
           <td>Emitted when the processes receives a signal such as SIGINT, SIGHUP, etc.</td>
          </tr> 
         </tbody>
        </table> 
        <h2>Properties</h2> 
        <p>Process provides many useful properties to get better control over system interactions.</p> 
        <table class="src"> 
         <tbody>
          <tr>
           <th>Sr.No.</th>
           <th>Property</th>
           <th>Description</th>
          </tr> 
          <tr>
           <td>1</td>
           <td><b>stdout</b></td>
           <td>A Writable Stream to stdout.</td>
          </tr> 
          <tr>
           <td>2</td>
           <td><b>stderr</b></td>
           <td>A Writable Stream to stderr.</td>
          </tr> 
          <tr>
           <td>3</td>
           <td><b>stdin</b></td>
           <td>A Writable Stream to stdin.</td>
          </tr> 
          <tr>
           <td>4</td>
           <td><b>argv</b></td>
           <td>An array containing the command line arguments. The first element will be 'node', the second element will be the name of the JavaScript file. The next elements will be any additional command line arguments.</td>
          </tr> 
          <tr>
           <td>5</td>
           <td><b>execPath</b></td>
           <td>This is the absolute pathname of the executable that started the process.</td>
          </tr> 
          <tr>
           <td>6</td>
           <td><b>execArgv</b></td>
           <td>This is the set of node-specific command line options from the executable that started the process.</td>
          </tr> 
          <tr>
           <td>7</td>
           <td><b>env</b></td>
           <td>An object containing the user environment.</td>
          </tr> 
          <tr>
           <td>8</td>
           <td><b>exitCode</b></td>
           <td>A number which will be the process exit code, when the process either exits gracefully, or is exited via process.exit() without specifying a code.</td>
          </tr> 
          <tr>
           <td>9</td>
           <td><b>version</b></td>
           <td>A compiled-in property that exposes NODE_VERSION.</td>
          </tr> 
          <tr>
           <td>10</td>
           <td><b>versions</b></td>
           <td>A property exposing version strings of node and its dependencies.</td>
          </tr> 
          <tr>
           <td>11</td>
           <td><b>config</b></td>
           <td>An Object containing the JavaScript representation of the configure options that were used to compile the current node executable. This is the same as the "config.gypi" file that was produced when running the ./configure script.</td>
          </tr> 
          <tr>
           <td>12</td>
           <td><b>pid</b></td>
           <td>The PID of the process.</td>
          </tr> 
          <tr>
           <td>13</td>
           <td><b>title</b></td>
           <td>Getter/setter to set what is displayed in 'ps'.</td>
          </tr> 
          <tr>
           <td>14</td>
           <td><b>arch</b></td>
           <td>What processor architecture you're running on: 'arm', 'ia32', or 'x64'.</td>
          </tr> 
          <tr>
           <td>15</td>
           <td><b>platform</b></td>
           <td>What platform you're running on: 'darwin', 'freebsd', 'linux', 'sunos' or 'win32'</td>
          </tr> 
          <tr>
           <td>16</td>
           <td><b>mainModule</b></td>
           <td>Alternate way to retrieve require.main. The difference is that if the main module changes at runtime, require.main might still refer to the original main module in modules that were required before the change occurred. Generally it's safe to assume that the two refer to the same module.</td>
          </tr> 
         </tbody>
        </table> 
        <h2>Methods</h2> 
        <p>Process provides many useful methods to get better control over system interactions.</p> 
        <table class="src"> 
         <tbody>
          <tr>
           <th>Sr.No.</th>
           <th>Method</th>
           <th>Description</th>
          </tr> 
          <tr>
           <td>1</td>
           <td><b>abort()</b></td>
           <td>This causes node to emit an abort. This will cause node to exit and generate a core file.</td>
          </tr> 
          <tr>
           <td>2</td>
           <td><b>chdir(directory)</b></td>
           <td>Changes the current working directory of the process or throws an exception if that fails.</td>
          </tr> 
          <tr>
           <td>3</td>
           <td><b>cwd()</b></td>
           <td>Returns the current working directory of the process.</td>
          </tr> 
          <tr>
           <td>4</td>
           <td><b>exit([code])</b></td>
           <td>Ends the process with the specified code. If omitted, exit uses the 'success' code 0.</td>
          </tr> 
          <tr>
           <td>5</td>
           <td><b>getgid()</b></td>
           <td>Gets the group identity of the process. This is the numerical group id, not the group name.This function is only available on POSIX platforms (i.e. not Windows, Android).</td>
          </tr> 
          <tr>
           <td>6</td>
           <td><b>setgid(id)</b></td>
           <td>Sets the group identity of the process. (See setgid(2).) This accepts either a numerical ID or a groupname string. If a groupname is specified, this method blocks while resolving it to a numerical ID.This function is only available on POSIX platforms (i.e. not Windows, Android).</td>
          </tr> 
          <tr>
           <td>7</td>
           <td><b>getuid()</b></td>
           <td>Gets the user identity of the process. This is the numerical id, not the username.This function is only available on POSIX platforms (i.e. not Windows, Android).</td>
          </tr> 
          <tr>
           <td>8</td>
           <td><b>setuid(id)</b></td>
           <td>Sets the user identity of the process. (See setgid(2).) This accepts either a numerical ID or a username string. If a username is specified, this method blocks while resolving it to a numerical ID.This function is only available on POSIX platforms (i.e. not Windows, Android).</td>
          </tr> 
          <tr>
           <td>9</td>
           <td><b>getgroups()</b></td>
           <td>Returns an array with the supplementary group IDs. POSIX leaves it unspecified if the effective group ID is included but node.js ensures it always is.This function is only available on POSIX platforms (i.e. not Windows, Android).</td>
          </tr> 
          <tr>
           <td>10</td>
           <td><b>setgroups(groups)</b></td>
           <td>Sets the supplementary group IDs. This is a privileged operation, meaning you need to be root or have the CAP_SETGID capability.This function is only available on POSIX platforms (i.e. not Windows, Android).</td>
          </tr> 
          <tr>
           <td>11</td>
           <td><b>initgroups(user, extra_group)</b></td>
           <td>Reads /etc/group and initializes the group access list, using all groups of which the user is a member. This is a privileged operation, meaning you need to be root or have the CAP_SETGID capability.This function is only available on POSIX platforms (i.e. not Windows, Android).</td>
          </tr> 
          <tr>
           <td>12</td>
           <td><b>kill(pid[, signal])</b></td>
           <td>Send a signal to a process. pid is the process id and signal is the string describing the signal to send. Signal names are strings like 'SIGINT' or 'SIGHUP'. If omitted, the signal will be 'SIGTERM'.</td>
          </tr> 
          <tr>
           <td>13</td>
           <td><b>memoryUsage()</b></td>
           <td>Returns an object describing the memory usage of the Node process measured in bytes.</td>
          </tr> 
          <tr>
           <td>14</td>
           <td><b>nextTick(callback)</b></td>
           <td>Once the current event loop turn runs to completion, call the callback function.</td>
          </tr> 
          <tr>
           <td>15</td>
           <td><b>umask([mask])</b></td>
           <td>Sets or reads the process's file mode creation mask. Child processes inherit the mask from the parent process. Returns the old mask if mask argument is given, otherwise returns the current mask.</td>
          </tr> 
          <tr>
           <td>16</td>
           <td><b>uptime()</b></td>
           <td>Number of seconds Node has been running.</td>
          </tr> 
          <tr>
           <td>17</td>
           <td><b>hrtime()</b></td>
           <td>Returns the current high-resolution real time in a [seconds, nanoseconds] tuple Array. It is relative to an arbitrary time in the past. It is not related to the time of day and therefore not subject to clock drift. The primary use is for measuring performance between intervals.</td>
          </tr> 
         </tbody>
        </table> 
        <h2>Example</h2> 
        <p>Create a js file named test.js in <b>C:\&gt;Nodejs_WorkSpace</b>.</p> 
        <p><i>File: test.js</i></p> 
        <pre class="prettyprint tryit">
var util = require('util');

//printing to console
process.stdout.write("Hello World!" + "\n");

//reading passed parameter
process.argv.forEach(function(val, index, array) {
   console.log(index + ': ' + val);
});

//executable path
console.log(process.execPath);

//print the current directory
console.log('Current directory: ' + process.cwd());
	
//print the process version
console.log('Current version: ' + process.version);

//print the memory usage
console.log(util.inspect(process.memoryUsage()));
</pre> 
        <p>Now run the test.js to see the result:</p> 
        <pre class="prettyprint notranslate">
C:\Nodejs_WorkSpace&gt;node test.js
</pre> 
        <p>Verify the Output.</p> 
        <pre class="result notranslate">
Hello World!
0: node
1: C:\Nodejs_WorkSpace\test.js
2: one
3: 2
4: three
C:\Program Files\nodejs\node.exe
Current directory: C:\Nodejs_WorkSpace
Current version: v0.10.36
{ rss: 9314304, heapTotal: 3047296, heapUsed: 1460196 }
</pre> 
        <h1>Node.js - OS Module</h1> 
        <p><b>os</b> module is used for few basic operating-system related utility functions. os module can be imported using following syntax. </p> 
        <pre class="prettyprint notranslate">
var os = require("os")
</pre> 
        <h2>Methods</h2> 
        <table class="src"> 
         <tbody>
          <tr>
           <th>Sr. No.</th>
           <th>method</th>
           <th>Description</th>
          </tr> 
          <tr>
           <td>1</td>
           <td><b>os.tmpdir()</b></td>
           <td>Returns the operating system's default directory for temp files.</td>
          </tr> 
          <tr>
           <td>2</td>
           <td><b>os.endianness()</b></td>
           <td>Returns the endianness of the CPU. Possible values are "BE" or "LE".</td>
          </tr> 
          <tr>
           <td>3</td>
           <td><b>os.hostname()</b></td>
           <td>Returns the hostname of the operating system.</td>
          </tr> 
          <tr>
           <td>4</td>
           <td><b>os.type()</b></td>
           <td>Returns the operating system name.</td>
          </tr> 
          <tr>
           <td>5</td>
           <td><b>os.platform()</b></td>
           <td>Returns the operating system platform.</td>
          </tr> 
          <tr>
           <td>6</td>
           <td><b>os.arch()</b></td>
           <td>Returns the operating system CPU architecture. Possible values are "x64", "arm" and "ia32".</td>
          </tr> 
          <tr>
           <td>7</td>
           <td><b>os.release()</b></td>
           <td>Returns the operating system release.</td>
          </tr> 
          <tr>
           <td>8</td>
           <td><b>os.uptime()</b></td>
           <td>Returns the system uptime in seconds.</td>
          </tr> 
          <tr>
           <td>9</td>
           <td><b>os.loadavg()</b></td>
           <td>Returns an array containing the 1, 5, and 15 minute load averages.</td>
          </tr> 
          <tr>
           <td>10</td>
           <td><b>os.totalmem()</b></td>
           <td>Returns the total amount of system memory in bytes.</td>
          </tr> 
          <tr>
           <td>11</td>
           <td><b>os.freemem()</b></td>
           <td>Returns the amount of free system memory in bytes.</td>
          </tr> 
          <tr>
           <td>12</td>
           <td><b>os.cpus()</b></td>
           <td>Returns an array of objects containing information about each CPU/core installed: model, speed (in MHz), and times (an object containing the number of milliseconds the CPU/core spent in: user, nice, sys, idle, and irq).</td>
          </tr> 
          <tr>
           <td>13</td>
           <td><b>os.networkInterfaces()</b></td>
           <td>Get a list of network interfaces.</td>
          </tr> 
         </tbody>
        </table> 
        <h2>Properties</h2> 
        <table class="src"> 
         <tbody>
          <tr>
           <th>Sr. No.</th>
           <th>property</th>
           <th>Description</th>
          </tr> 
          <tr>
           <td>1</td>
           <td><b>os.EOL</b></td>
           <td>A constant defining the appropriate End-of-line marker for the operating system.</td>
          </tr> 
         </tbody>
        </table> 
        <h2>Example</h2> 
        <p>Create a js file named test.js in <b>C:\&gt;Nodejs_WorkSpace</b>.</p> 
        <p><i>File: test.js</i></p> 
        <pre class="prettyprint tryit">
var os = require("os");

//endianness
console.log('endianness : ' + os.endianness());

//type
console.log('type : ' + os.type());

//platform
console.log('platform : ' + os.platform());

//totalmem
console.log('total memory : ' + os.totalmem() + " bytes.");

//freemem
console.log('free memory : ' + os.freemem() + " bytes.");
</pre> 
        <p>Now run the test.js to see the result:</p> 
        <pre class="prettyprint notranslate">
C:\Nodejs_WorkSpace&gt;node test.js
</pre> 
        <p>Verify the Output.</p> 
        <pre class="result notranslate">
endianness : LE
type : Windows_NT
platform : win32
total memory : 1072152576 bytes.
free memory : 461508608 bytes.
</pre> 
        <h1>Node.js - Path Module</h1> 
        <p><b>path</b> module is used for handling and transforming file paths. path module can be imported using following syntax. </p> 
        <pre class="prettyprint notranslate">
var path = require("path")
</pre> 
        <h2>Properties</h2> 
        <p>Process provides many useful properties to get better control over system interactions.</p> 
        <table class="src"> 
         <tbody>
          <tr>
           <th>Sr.No.</th>
           <th>Property</th>
           <th>Description</th>
          </tr> 
          <tr>
           <td>1</td>
           <td><b>path.sep</b></td>
           <td>The platform-specific file separator. '\\' or '/'.</td>
          </tr> 
          <tr>
           <td>2</td>
           <td><b>path.delimiter</b></td>
           <td>The platform-specific path delimiter, ; or ':'.</td>
          </tr> 
          <tr>
           <td>3</td>
           <td><b>path.posix</b></td>
           <td>Provide access to aforementioned path methods but always interact in a posix compatible way.</td>
          </tr> 
          <tr>
           <td>4</td>
           <td><b>path.win32</b></td>
           <td>Provide access to aforementioned path methods but always interact in a win32 compatible way.</td>
          </tr> 
         </tbody>
        </table> 
        <h2>Methods</h2> 
        <table class="src"> 
         <tbody>
          <tr>
           <th>Sr. No.</th>
           <th>method</th>
           <th>Description</th>
          </tr> 
          <tr>
           <td>1</td>
           <td><b>path.normalize(p)</b></td>
           <td>Normalize a string path, taking care of '..' and '.' parts.</td>
          </tr> 
          <tr>
           <td>2</td>
           <td><b>path.join([path1][, path2][, ...])</b></td>
           <td>Join all arguments together and normalize the resulting path.</td>
          </tr> 
          <tr>
           <td>3</td>
           <td><b>path.resolve([from ...], to)</b></td>
           <td>Resolves to to an absolute path.</td>
          </tr> 
          <tr>
           <td>4</td>
           <td><b>path.isAbsolute(path)</b></td>
           <td>Determines whether path is an absolute path. An absolute path will always resolve to the same location, regardless of the working directory.</td>
          </tr> 
          <tr>
           <td>5</td>
           <td><b>path.relative(from, to)</b></td>
           <td>Solve the relative path from from to to.</td>
          </tr> 
          <tr>
           <td>6</td>
           <td><b>path.dirname(p)</b></td>
           <td>Return the directory name of a path. Similar to the Unix dirname command.</td>
          </tr> 
          <tr>
           <td>7</td>
           <td><b>path.basename(p[, ext])</b></td>
           <td>Return the last portion of a path. Similar to the Unix basename command.</td>
          </tr> 
          <tr>
           <td>8</td>
           <td><b>path.extname(p)</b></td>
           <td>Return the extension of the path, from the last '.' to end of string in the last portion of the path. If there is no '.' in the last portion of the path or the first character of it is '.', then it returns an empty string.</td>
          </tr> 
          <tr>
           <td>9</td>
           <td><b>path.parse(pathString)</b></td>
           <td>Returns an object from a path string.</td>
          </tr> 
          <tr>
           <td>10</td>
           <td><b>path.format(pathObject)</b></td>
           <td>Returns a path string from an object, the opposite of path.parse above.</td>
          </tr> 
         </tbody>
        </table> 
        <h2>Example</h2> 
        <p>Create a js file named test.js in <b>C:\&gt;Nodejs_WorkSpace</b>.</p> 
        <p><i>File: test.js</i></p> 
        <pre class="prettyprint tryit">
var path = require("path");

//normalization
console.log('normalization : ' + path.normalize('/test/test1//2slashes/1slash/tab/..'));

//join
console.log('joint path : ' + path.join('/test', 'test1', '2slashes/1slash', 'tab', '..'));

//resolve
console.log('resolve : ' + path.resolve('test.js'));

//extName
console.log('ext name : ' + path.extname('test.js'));
</pre> 
        <p>Now run the test.js to see the result:</p> 
        <pre class="prettyprint notranslate">
C:\Nodejs_WorkSpace&gt;node test.js
</pre> 
        <p>Verify the Output.</p> 
        <pre class="result notranslate">
normalization : \test\test1\2slashes\1slash
joint path : \test\test1\2slashes\1slash
resolve : C:\Nodejs_WorkSpace\test.js
ext name : .js
</pre> 
        <h1>Node.js - Net Module</h1> 
        <p><b>net</b> module is used to create both servers and clients. It provides an aynchronous network wrapper. net module can be imported using following syntax. </p> 
        <pre class="prettyprint notranslate">
var net = require("net")
</pre> 
        <h2>Methods</h2> 
        <table class="src"> 
         <tbody>
          <tr>
           <th>Sr. No.</th>
           <th>method</th>
           <th>Description</th>
          </tr> 
          <tr>
           <td>1</td>
           <td><b>net.createServer([options][, connectionListener])</b></td>
           <td>Creates a new TCP server. The connectionListener argument is automatically set as a listener for the 'connection' event.</td>
          </tr> 
          <tr>
           <td>2</td>
           <td><b>net.connect(options[, connectionListener])</b></td>
           <td>A factory method, which returns a new 'net.Socket' and connects to the supplied address and port.</td>
          </tr> 
          <tr>
           <td>3</td>
           <td><b>net.createConnection(options[, connectionListener])</b></td>
           <td>A factory method, which returns a new 'net.Socket' and connects to the supplied address and port.</td>
          </tr> 
          <tr>
           <td>4</td>
           <td><b>net.connect(port[, host][, connectListener])</b></td>
           <td>Creates a TCP connection to port on host. If host is omitted, 'localhost' will be assumed. The connectListener parameter will be added as an listener for the 'connect' event. Is a factory method which returns a new 'net.Socket'.</td>
          </tr> 
          <tr>
           <td>5</td>
           <td><b>net.createConnection(port[, host][, connectListener])</b></td>
           <td>Creates a TCP connection to port on host. If host is omitted, 'localhost' will be assumed. The connectListener parameter will be added as an listener for the 'connect' event. Is a factory method which returns a new 'net.Socket'.</td>
          </tr> 
          <tr>
           <td>6</td>
           <td><b>net.connect(path[, connectListener])</b></td>
           <td>Creates unix socket connection to path. The connectListener parameter will be added as an listener for the 'connect' event. A factory method which returns a new 'net.Socket'.</td>
          </tr> 
          <tr>
           <td>7</td>
           <td><b>net.createConnection(path[, connectListener])</b></td>
           <td>Creates unix socket connection to path. The connectListener parameter will be added as an listener for the 'connect' event. A factory method which returns a new 'net.Socket'.</td>
          </tr> 
          <tr>
           <td>8</td>
           <td><b>net.isIP(input)</b></td>
           <td>Tests if input is an IP address. Returns 0 for invalid strings, returns 4 for IP version 4 addresses, and returns 6 for IP version 6 addresses.</td>
          </tr> 
          <tr>
           <td>9</td>
           <td><b>net.isIPv4(input)</b></td>
           <td>Returns true if input is a version 4 IP address, otherwise returns false.</td>
          </tr> 
          <tr>
           <td>10</td>
           <td><b>net.isIPv6(input)</b></td>
           <td>Returns true if input is a version 6 IP address, otherwise returns false.</td>
          </tr> 
         </tbody>
        </table> 
        <h2>Class:net.Server</h2> 
        <p>This class is used to create a TCP or local server.</p> 
        <h3>Methods</h3> 
        <table class="src"> 
         <tbody>
          <tr>
           <th>Sr. No.</th>
           <th>method</th>
           <th>Description</th>
          </tr> 
          <tr>
           <td>1</td>
           <td><b>server.listen(port[, host][, backlog][, callback])</b></td>
           <td>Begin accepting connections on the specified port and host. If the host is omitted, the server will accept connections directed to any IPv4 address (INADDR_ANY). A port value of zero will assign a random port.</td>
          </tr> 
          <tr>
           <td>2</td>
           <td><b>server.listen(path[, callback])</b></td>
           <td>Start a local socket server listening for connections on the given path.</td>
          </tr> 
          <tr>
           <td>3</td>
           <td><b>server.listen(handle[, callback])</b></td>
           <td>The handle object can be set to either a server or socket (anything with an underlying _handle member), or a {fd: &lt;n&gt;} object. This will cause the server to accept connections on the specified handle, but it is presumed that the file descriptor or handle has already been bound to a port or domain socket. Listening on a file descriptor is not supported on Windows.</td>
          </tr> 
          <tr>
           <td>4</td>
           <td><b>server.listen(options[, callback])</b></td>
           <td>The port, host, and backlog properties of options, as well as the optional callback function, behave as they do on a call to server.listen(port, [host], [backlog], [callback]) . Alternatively, the path option can be used to specify a UNIX socket.</td>
          </tr> 
          <tr>
           <td>5</td>
           <td><b>server.close([callback])</b></td>
           <td>finally closed when all connections are ended and the server emits a 'close' event.</td>
          </tr> 
          <tr>
           <td>6</td>
           <td><b>server.address()</b></td>
           <td>Returns the bound address, the address family name and port of the server as reported by the operating system.</td>
          </tr> 
          <tr>
           <td>7</td>
           <td><b>server.unref()</b></td>
           <td>Calling unref on a server will allow the program to exit if this is the only active server in the event system. If the server is already unrefd calling unref again will have no effect.</td>
          </tr> 
          <tr>
           <td>8</td>
           <td><b>server.ref()</b></td>
           <td>Opposite of unref, calling ref on a previously unrefd server will not let the program exit if it's the only server left (the default behavior). If the server is refd calling ref again will have no effect.</td>
          </tr> 
          <tr>
           <td>9</td>
           <td><b>server.getConnections(callback)</b></td>
           <td>Asynchronously get the number of concurrent connections on the server. Works when sockets were sent to forks. Callback should take two arguments err and count.</td>
          </tr> 
         </tbody>
        </table> 
        <h3>Events</h3> 
        <table class="src"> 
         <tbody>
          <tr>
           <th>Sr. No.</th>
           <th>event</th>
           <th>Description</th>
          </tr> 
          <tr>
           <td>1</td>
           <td><b>listening</b></td>
           <td>Emitted when the server has been bound after calling server.listen.</td>
          </tr> 
          <tr>
           <td>2</td>
           <td><b>connection</b></td>
           <td> Emitted when a new connection is made. Socket object, The connection object is available to event handler. Socket is an instance of net.Socket.</td>
          </tr> 
          <tr>
           <td>3</td>
           <td><b>close</b></td>
           <td>Emitted when the server closes. Note that if connections exist, this event is not emitted until all connections are ended.</td>
          </tr> 
          <tr>
           <td>4</td>
           <td><b>error</b></td>
           <td>Emitted when an error occurs. The 'close' event will be called directly following this event.</td>
          </tr> 
         </tbody>
        </table> 
        <h2>Class:net.Socket</h2> 
        <p>This object is an abstraction of a TCP or local socket. net.Socket instances implement a duplex Stream interface. They can be created by the user and used as a client (with connect()) or they can be created by Node and passed to the user through the 'connection' event of a server.</p> 
        <h2>Events</h2> 
        <p>net.Socket is an eventEmitter and it emits the following events.</p> 
        <table class="src"> 
         <tbody>
          <tr>
           <th>Sr.No.</th>
           <th>Event</th>
           <th>Description</th>
          </tr> 
          <tr>
           <td>1</td>
           <td><b>lookup</b></td>
           <td>Emitted after resolving the hostname but before connecting. Not applicable to UNIX sockets.</td>
          </tr> 
          <tr>
           <td>2</td>
           <td><b>connect</b></td>
           <td>Emitted when a socket connection is successfully established.</td>
          </tr> 
          <tr>
           <td>3</td>
           <td><b>data</b></td>
           <td>Emitted when data is received. The argument data will be a Buffer or String. Encoding of data is set by socket.setEncoding().</td>
          </tr> 
          <tr>
           <td>4</td>
           <td><b>end</b></td>
           <td>Emitted when the other end of the socket sends a FIN packet.</td>
          </tr> 
          <tr>
           <td>5</td>
           <td><b>timeout</b></td>
           <td>Emitted if the socket times out from inactivity. This is only to notify that the socket has been idle. The user must manually close the connection.</td>
          </tr> 
          <tr>
           <td>6</td>
           <td><b>drain</b></td>
           <td>Emitted when the write buffer becomes empty. Can be used to throttle uploads.</td>
          </tr> 
          <tr>
           <td>7</td>
           <td><b>error</b></td>
           <td>Emitted when an error occurs. The 'close' event will be called directly following this event.</td>
          </tr> 
          <tr>
           <td>8</td>
           <td><b>close</b></td>
           <td>Emitted once the socket is fully closed. The argument had_error is a boolean which says if the socket was closed due to a transmission error.</td>
          </tr> 
         </tbody>
        </table> 
        <h2>Properties</h2> 
        <p>net.Socket provides many useful properties to get better control over socket interactions.</p> 
        <table class="src"> 
         <tbody>
          <tr>
           <th>Sr.No.</th>
           <th>Property</th>
           <th>Description</th>
          </tr> 
          <tr>
           <td>1</td>
           <td><b>socket.bufferSize</b></td>
           <td>This property shows the number of characters currently buffered to be written.</td>
          </tr> 
          <tr>
           <td>2</td>
           <td><b>socket.remoteAddress</b></td>
           <td>The string representation of the remote IP address. For example, '74.125.127.100' or '2001:4860:a005::68'.</td>
          </tr> 
          <tr>
           <td>3</td>
           <td><b>socket.remoteFamily</b></td>
           <td>The string representation of the remote IP family. 'IPv4' or 'IPv6'.</td>
          </tr> 
          <tr>
           <td>4</td>
           <td><b>socket.remotePort</b></td>
           <td>The numeric representation of the remote port. For example, 80 or 21.</td>
          </tr> 
          <tr>
           <td>5</td>
           <td><b>socket.localAddress</b></td>
           <td>The string representation of the local IP address the remote client is connecting on. For example, if you are listening on '0.0.0.0' and the client connects on '192.168.1.1', the value would be '192.168.1.1'.</td>
          </tr> 
          <tr>
           <td>6</td>
           <td><b>socket.localPort</b></td>
           <td>The numeric representation of the local port. For example, 80 or 21.</td>
          </tr> 
          <tr>
           <td>7</td>
           <td><b>socket.bytesRead</b></td>
           <td>The amount of received bytes.</td>
          </tr> 
          <tr>
           <td>8</td>
           <td><b>socket.bytesWritten</b></td>
           <td>The amount of bytes sent.</td>
          </tr> 
         </tbody>
        </table> 
        <h3>Methods</h3> 
        <table class="src"> 
         <tbody>
          <tr>
           <th>Sr. No.</th>
           <th>method</th>
           <th>Description</th>
          </tr> 
          <tr>
           <td>1</td>
           <td><b>new net.Socket([options])</b></td>
           <td>Construct a new socket object.</td>
          </tr> 
          <tr>
           <td>2</td>
           <td><b>socket.connect(port[, host][, connectListener])</b></td>
           <td>Opens the connection for a given socket. If port and host are given, then the socket will be opened as a TCP socket, if host is omitted, localhost will be assumed. If a path is given, the socket will be opened as a unix socket to that path.</td>
          </tr> 
          <tr>
           <td>3</td>
           <td><b>socket.connect(path[, connectListener])</b></td>
           <td>Opens the connection for a given socket. If port and host are given, then the socket will be opened as a TCP socket, if host is omitted, localhost will be assumed. If a path is given, the socket will be opened as a unix socket to that path.</td>
          </tr> 
          <tr>
           <td>4</td>
           <td><b>socket.setEncoding([encoding])</b></td>
           <td>Set the encoding for the socket as a Readable Stream.</td>
          </tr> 
          <tr>
           <td>5</td>
           <td><b>socket.write(data[, encoding][, callback])</b></td>
           <td>Sends data on the socket. The second parameter specifies the encoding in the case of a string--it defaults to UTF8 encoding.</td>
          </tr> 
          <tr>
           <td>6</td>
           <td><b>socket.end([data][, encoding])</b></td>
           <td>Half-closes the socket. i.e., it sends a FIN packet. It is possible the server will still send some data.</td>
          </tr> 
          <tr>
           <td>7</td>
           <td><b>socket.destroy()</b></td>
           <td>Ensures that no more I/O activity happens on this socket. Only necessary in case of errors (parse error or so).</td>
          </tr> 
          <tr>
           <td>8</td>
           <td><b>socket.pause()</b></td>
           <td>Pauses the reading of data. That is, 'data' events will not be emitted. Useful to throttle back an upload.</td>
          </tr> 
          <tr>
           <td>9</td>
           <td><b>socket.resume()</b></td>
           <td>Resumes reading after a call to pause().</td>
          </tr> 
          <tr>
           <td>10</td>
           <td><b>socket.setTimeout(timeout[, callback])</b></td>
           <td>Sets the socket to timeout after timeout milliseconds of inactivity on the socket. By default net.Socket do not have a timeout.</td>
          </tr> 
          <tr>
           <td>11</td>
           <td><b>socket.setNoDelay([noDelay])</b></td>
           <td>Disables the Nagle algorithm. By default TCP connections use the Nagle algorithm, they buffer data before sending it off. Setting true for noDelay will immediately fire off data each time socket.write() is called. noDelay defaults to true.</td>
          </tr> 
          <tr>
           <td>12</td>
           <td><b>socket.setKeepAlive([enable][, initialDelay])</b></td>
           <td>Enable/disable keep-alive functionality, and optionally set the initial delay before the first keepalive probe is sent on an idle socket. enable defaults to false.</td>
          </tr> 
          <tr>
           <td>13</td>
           <td><b>socket.address()</b></td>
           <td>Returns the bound address, the address family name and port of the socket as reported by the operating system. Returns an object with three properties, e.g. { port: 12346, family: 'IPv4', address: '127.0.0.1' }.</td>
          </tr> 
          <tr>
           <td>14</td>
           <td><b>socket.unref()</b></td>
           <td>Calling unref on a socket will allow the program to exit if this is the only active socket in the event system. If the socket is already unrefd calling unref again will have no effect.</td>
          </tr> 
          <tr>
           <td>15</td>
           <td><b>socket.ref()</b></td>
           <td>Opposite of unref, calling ref on a previously unrefd socket will not let the program exit if it's the only socket left (the default behavior). If the socket is refd calling ref again will have no effect.</td>
          </tr> 
         </tbody>
        </table> 
        <h2>Example</h2> 
        <p>Create a js file named server.js in <b>C:\&gt;Nodejs_WorkSpace</b>.</p> 
        <p><i>File: server.js</i></p> 
        <pre class="prettyprint tryit">
var net = require('net');
var server = net.createServer(function(connection) { 
   console.log('client connected');
   connection.on('end', function() {
      console.log('client disconnected');
   });
   connection.write('Hello World!\r\n');
   connection.pipe(connection);
});
server.listen(8080, function() { 
  console.log('server is listening');
});
</pre> 
        <p>Now run the server.js to see the result:</p> 
        <pre class="prettyprint notranslate">
C:\Nodejs_WorkSpace&gt;node server.js
</pre> 
        <p>Verify the Output.</p> 
        <pre class="result notranslate">
server is listening
</pre> 
        <p>Create a js file named client.js in <b>C:\&gt;Nodejs_WorkSpace</b>.</p> 
        <p><i>File: client.js</i></p> 
        <pre class="prettyprint tryit">
var net = require('net');
var client = net.connect({port: 8080}, function() {
   console.log('connected to server!');  
});
client.on('data', function(data) {
   console.log(data.toString());
   client.end();
});
client.on('end', function() { 
   console.log('disconnected from server');
});
</pre> 
        <p>Now run the client.js in another terminal to see the result:</p> 
        <pre class="prettyprint notranslate">
C:\Nodejs_WorkSpace&gt;node client.js
</pre> 
        <p>Verify the Output.</p> 
        <pre class="result notranslate">
connected to server!
Hello World!

disconnected from server
</pre> 
        <p>Verify the Output on terminal where server.js is running.</p> 
        <pre class="result notranslate">
server is listening
client connected
client disconnected
</pre> 
        <h1>Node.js - DNS Module</h1> 
        <p><b>dns</b> module is used to do actual DNS lookup as well as to use underlying operating system name resolution functionalities.. It provides an aynchronous network wrapper. dns module can be imported using following syntax. </p> 
        <pre class="prettyprint notranslate">
var dns = require("dns")
</pre> 
        <h2>Methods</h2> 
        <table class="src"> 
         <tbody>
          <tr>
           <th>Sr. No.</th>
           <th>method</th>
           <th>Description</th>
          </tr> 
          <tr>
           <td>1</td>
           <td><b>dns.lookup(hostname[, options], callback)</b></td>
           <td>Resolves a hostname (e.g. 'google.com') into the first found A (IPv4) or AAAA (IPv6) record. options can be an object or integer. If options is not provided, then IP v4 and v6 addresses are both valid. If options is an integer, then it must be 4 or 6.</td>
          </tr> 
          <tr>
           <td>2</td>
           <td><b>dns.lookupService(address, port, callback)</b></td>
           <td>Resolves the given address and port into a hostname and service using getnameinfo.</td>
          </tr> 
          <tr>
           <td>3</td>
           <td><b>dns.resolve(hostname[, rrtype], callback)</b></td>
           <td>Resolves a hostname (e.g. 'google.com') into an array of the record types specified by rrtype.</td>
          </tr> 
          <tr>
           <td>4</td>
           <td><b>dns.resolve4(hostname, callback)</b></td>
           <td>The same as dns.resolve(), but only for IPv4 queries (A records). addresses is an array of IPv4 addresses (e.g. ['74.125.79.104', '74.125.79.105', '74.125.79.106']).</td>
          </tr> 
          <tr>
           <td>5</td>
           <td><b>dns.resolve6(hostname, callback)</b></td>
           <td>The same as dns.resolve4() except for IPv6 queries (an AAAA query).</td>
          </tr> 
          <tr>
           <td>6</td>
           <td><b>dns.resolveMx(hostname, callback)</b></td>
           <td>The same as dns.resolve(), but only for mail exchange queries (MX records).</td>
          </tr> 
          <tr>
           <td>7</td>
           <td><b>dns.resolveTxt(hostname, callback)</b></td>
           <td>The same as dns.resolve(), but only for text queries (TXT records). addresses is an 2-d array of the text records available for hostname (e.g., [ ['v=spf1 ip4:0.0.0.0 ', '~all' ] ]). Each sub-array contains TXT chunks of one record. Depending on the use case, the could be either joined together or treated separately.</td>
          </tr> 
          <tr>
           <td>8</td>
           <td><b>dns.resolveSrv(hostname, callback)</b></td>
           <td>The same as dns.resolve(), but only for service records (SRV records). addresses is an array of the SRV records available for hostname. Properties of SRV records are priority, weight, port, and name (e.g., [{'priority': 10, 'weight': 5, 'port': 21223, 'name': 'service.example.com'}, ...]).</td>
          </tr> 
          <tr>
           <td>9</td>
           <td><b>dns.resolveSoa(hostname, callback)</b></td>
           <td>The same as dns.resolve(), but only for start of authority record queries (SOA record).</td>
          </tr> 
          <tr>
           <td>10</td>
           <td><b>dns.resolveNs(hostname, callback)</b></td>
           <td>The same as dns.resolve(), but only for name server records (NS records). addresses is an array of the name server records available for hostname (e.g., ['ns1.example.com', 'ns2.example.com']).</td>
          </tr> 
          <tr>
           <td>11</td>
           <td><b>dns.resolveCname(hostname, callback)</b></td>
           <td>The same as dns.resolve(), but only for canonical name records (CNAME records). addresses is an array of the canonical name records available for hostname (e.g., ['bar.example.com']).</td>
          </tr> 
          <tr>
           <td>12</td>
           <td><b>dns.reverse(ip, callback)</b></td>
           <td>Reverse resolves an ip address to an array of hostnames.</td>
          </tr> 
          <tr>
           <td>13</td>
           <td><b>dns.getServers()</b></td>
           <td>Returns an array of IP addresses as strings that are currently being used for resolution.</td>
          </tr> 
          <tr>
           <td>14</td>
           <td><b>dns.setServers(servers)</b></td>
           <td>Given an array of IP addresses as strings, set them as the servers to use for resolving.</td>
          </tr> 
         </tbody>
        </table> 
        <h2>rrtypes</h2> 
        <p>Following is the list of valid rrtypes used by dns.resolve() method</p> 
        <ul class="list"> 
         <li><p><b>A</b> - IPV4 addresses, default </p></li> 
         <li><p><b>AAAA</b> - IPV6 addresses </p></li> 
         <li><p><b>MX</b> - mail exchange records </p></li> 
         <li><p><b>TXT</b> - text records </p></li> 
         <li><p><b>SRV</b> - SRV records </p></li> 
         <li><p><b>PTR</b> - used for reverse IP lookups </p></li> 
         <li><p><b>NS</b> - name server records </p></li> 
         <li><p><b>CNAME</b> - canonical name records </p></li> 
         <li><p><b>SOA</b> - start of authority record </p></li> 
        </ul> 
        <h2>Error Codes</h2> 
        <p>Each DNS query can return one of the following error codes:</p> 
        <ul class="list"> 
         <li><p><b>dns.NODATA</b> - DNS server returned answer with no data.</p></li> 
         <li><p><b>dns.FORMERR</b> - DNS server claims query was misformatted.</p></li> 
         <li><p><b>dns.SERVFAIL</b> - DNS server returned general failure.</p></li> 
         <li><p><b>dns.NOTFOUND</b> - Domain name not found.</p></li> 
         <li><p><b>dns.NOTIMP</b> - DNS server does not implement requested operation.</p></li> 
         <li><p><b>dns.REFUSED</b> - DNS server refused query.</p></li> 
         <li><p><b>dns.BADQUERY</b> - Misformatted DNS query.</p></li> 
         <li><p><b>dns.BADNAME</b> - Misformatted hostname.</p></li> 
         <li><p><b>dns.BADFAMILY</b> - Unsupported address family.</p></li> 
         <li><p><b>dns.BADRESP</b> - Misformatted DNS reply.</p></li> 
         <li><p><b>dns.CONNREFUSED</b> - Could not contact DNS servers.</p></li> 
         <li><p><b>dns.TIMEOUT</b> - Timeout while contacting DNS servers.</p></li> 
         <li><p><b>dns.EOF</b> - End of file.</p></li> 
         <li><p><b>dns.FILE</b> - Error reading file.</p></li> 
         <li><p><b>dns.NOMEM</b> - Out of memory.</p></li> 
         <li><p><b>dns.DESTRUCTION</b> - Channel is being destroyed.</p></li> 
         <li><p><b>dns.BADSTR</b> - Misformatted string.</p></li> 
         <li><p><b>dns.BADFLAGS</b> - Illegal flags specified.</p></li> 
         <li><p><b>dns.NONAME</b> - Given hostname is not numeric.</p></li> 
         <li><p><b>dns.BADHINTS</b> - Illegal hints flags specified.</p></li> 
         <li><p><b>dns.NOTINITIALIZED</b> - c-ares library initialization not yet performed.</p></li> 
         <li><p><b>dns.LOADIPHLPAPI</b> - Error loading iphlpapi.dll.</p></li> 
         <li><p><b>dns.ADDRGETNETWORKPARAMS</b> - Could not find GetNetworkParams function.</p></li> 
         <li><p><b>dns.CANCELLED</b> - DNS query cancelled.</p></li> 
        </ul> 
        <h2>Example</h2> 
        <p>Create a js file named test.js in <b>C:\&gt;Nodejs_WorkSpace</b>.</p> 
        <p><i>File: test.js</i></p> 
        <pre class="prettyprint tryit">
var dns = require('dns');

dns.lookup('www.google.com', function onLookup(err, address, family) {
   console.log('address:', address);
   dns.reverse(address, function (err, hostnames) {
   if (err) {
      console.log(err.stack);
   }

   console.log('reverse for ' + address + ': ' + JSON.stringify(hostnames));
});  
});
</pre> 
        <p>Now run the test.js to see the result:</p> 
        <pre class="prettyprint notranslate">
C:\Nodejs_WorkSpace&gt;node test.js
</pre> 
        <p>Verify the Output.</p> 
        <pre class="result notranslate">
address: 74.125.200.103
reverse for 74.125.200.103: ["sa-in-f103.1e100.net"]
</pre> 
        <h1>Node.js - Domain Module</h1> 
        <p><b>domain</b> module is used to intercept unhandled error. These unhandled error can be intercepted using internal binding or external binding. If errors are not handled at all then they will simply crash the Node application.</p> 
        <ul class="list"> 
         <li><p><b>Internal Binding</b> - Error emmitter is executing its code within run method of a domain.</p></li> 
         <li><p><b>External Binding</b> - Error emmitter is added explicitly to a domain using its add method.</p></li> 
        </ul> 
        <p>domain module can be imported using following syntax. </p> 
        <pre class="prettyprint notranslate">
var domain = require("domain")
</pre> 
        <p>Domain class of domain module is used to provide functionality of routing errors and uncaught exceptions to the active Domain object. It is a child class of EventEmitter. To handle the errors that it catches, listen to its error event. It is created using following syntax:</p> 
        <pre class="prettyprint notranslate">
var domain = require("domain");
var domain1 = domain.create();
</pre> 
        <h2>Methods</h2> 
        <table class="src"> 
         <tbody>
          <tr>
           <th>Sr. No.</th>
           <th>method</th>
           <th>Description</th>
          </tr> 
          <tr>
           <td>1</td>
           <td><b>domain.run(function)</b></td>
           <td>Run the supplied function in the context of the domain, implicitly binding all event emitters, timers, and lowlevel requests that are created in that context.This is the most basic way to use a domain.</td>
          </tr> 
          <tr>
           <td>2</td>
           <td><b>domain.add(emitter)</b></td>
           <td>Explicitly adds an emitter to the domain. If any event handlers called by the emitter throw an error, or if the emitter emits an error event, it will be routed to the domain's error event, just like with implicit binding.</td>
          </tr> 
          <tr>
           <td>3</td>
           <td><b>domain.remove(emitter)</b></td>
           <td>The opposite of domain.add(emitter). Removes domain handling from the specified emitter.</td>
          </tr> 
          <tr>
           <td>4</td>
           <td><b>domain.bind(callback)</b></td>
           <td>The returned function will be a wrapper around the supplied callback function. When the returned function is called, any errors that are thrown will be routed to the domain's error event.</td>
          </tr> 
          <tr>
           <td>5</td>
           <td><b>domain.intercept(callback)</b></td>
           <td>This method is almost identical to domain.bind(callback). However, in addition to catching thrown errors, it will also intercept Error objects sent as the first argument to the function.</td>
          </tr> 
          <tr>
           <td>6</td>
           <td><b>domain.enter()</b></td>
           <td>The enter method is plumbing used by the run, bind, and intercept methods to set the active domain. It sets domain.active and process.domain to the domain, and implicitly pushes the domain onto the domain stack managed by the domain module (see domain.exit() for details on the domain stack). The call to enter delimits the beginning of a chain of asynchronous calls and I/O operations bound to a domain.</td>
          </tr> 
          <tr>
           <td>7</td>
           <td><b>domain.exit()</b></td>
           <td>The exit method exits the current domain, popping it off the domain stack. Any time execution is going to switch to the context of a different chain of asynchronous calls, it's important to ensure that the current domain is exited. The call to exit delimits either the end of or an interruption to the chain of asynchronous calls and I/O operations bound to a domain.</td>
          </tr> 
          <tr>
           <td>8</td>
           <td><b>domain.dispose()</b></td>
           <td>Once dispose has been called, the domain will no longer be used by callbacks bound into the domain via run, bind, or intercept, and a dispose event is emit</td>
          </tr> 
         </tbody>
        </table> 
        <h2>Properties</h2> 
        <table class="src"> 
         <tbody>
          <tr>
           <th>Sr.No.</th>
           <th>Property</th>
           <th>Description</th>
          </tr> 
          <tr>
           <td>1</td>
           <td><b>domain.members</b></td>
           <td>An array of timers and event emitters that have been explicitly added to the domain.</td>
          </tr> 
         </tbody>
        </table> 
        <h2>Example</h2> 
        <p>Create a js file named test.js in <b>C:\&gt;Nodejs_WorkSpace</b>.</p> 
        <p><i>File: test.js</i></p> 
        <pre class="prettyprint tryit">
var EventEmitter = require("events").EventEmitter;
var domain = require("domain");

var emitter1 = new EventEmitter();

//Create a domain
var domain1 = domain.create();

domain1.on('error', function(err){
   console.log("domain1 handled this error ("+err.message+")");
});

//explicit binding 
domain1.add(emitter1);

emitter1.on('error',function(err){
   console.log("listener handled this error ("+err.message+")");
});

emitter1.emit('error',new Error('To be handled by listener'));

emitter1.removeAllListeners('error');

emitter1.emit('error',new Error('To be handled by domain1'));

var domain2 = domain.create();

domain2.on('error', function(err){
   console.log("domain2 handled this error ("+err.message+")");
});

//implicit binding
domain2.run(function(){
   var emitter2 = new EventEmitter();
   
   emitter2.emit('error',new Error('To be handled by domain2'));   
});


domain1.remove(emitter1);

emitter1.emit('error',new Error('Converted to exception. System will crash!'));
</pre> 
        <p>Now run the test.js to see the result:</p> 
        <pre class="prettyprint notranslate">
C:\Nodejs_WorkSpace&gt;node test.js
</pre> 
        <p>Verify the Output.</p> 
        <pre class="result notranslate">
listener handled this error (To be handled by listener)
domain1 handled this error (To be handled by domain1)
domain2 handled this error (To be handled by domain2)

events.js:72
        throw er; // Unhandled 'error' event
              ^
Error: Converted to exception. System will crash!
    at Object.&lt;anonymous&gt; (C:\Nodejs_WorkSpace\test.js:42:23)
    at Module._compile (module.js:456:26)
    at Object.Module._extensions..js (module.js:474:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:312:12)
    at Function.Module.runMain (module.js:497:10)
    at startup (node.js:119:16)
    at node.js:929:3
</pre> 
        <h1>Node.js - Web Module</h1> 
        <h2>Introduction to Web Server</h2> 
        <p>Web Server is a software application which processes request using HTTP protocol and returns web pages as response to the clients. Web servers usually delivers html documents along with images, style sheets and scripts. Most web server also support server side scripts using scripting language or redirect to application server which perform the specific task of getting data from database, perform complex logic etc. Web server then returns the output of the application server to client.</p> 
        <p>Apache web server is one of the most common web server being used. It is an open source project.</p> 
        <h3>Path locating process</h3> 
        <p>Web server maps the path of a file using URL, Uniform Resource Locator. It can be a local file system or a external/internal program. For example:</p> 
        <p>A client makes a request using browser, URL: http://www.test-example-site.com/website/index.htm.</p> 
        <p>Browser will make request as:</p> 
        <p></p>
        <center>
         GET /website/index.htm HTTP /1.1
        </center>
        <p></p> 
        <p></p>
        <center>
         HOST www.test-example-site.com
        </center>
        <p></p> 
        <p>Web Server will append the path to its root directory. Consider,for example the root directory is home/www then actual path will be translated to home/www/website/index.htm.</p> 
        <h2>Introduction to web architecture</h2> 
        <p>Web application are using divided into four layers:</p> 
        <img src="/nodejs/images/web_architecture.jpg" alt="Web Architecture"> 
        <ul class="list"> 
         <li><p><b>Client</b> - This layer consists of web browsers, mobile browsers or applications which can make HTTP request to server.</p></li> 
         <li><p><b>Server</b> - This layer consists of Web server which can intercepts the request made by clients and pass them the response.</p></li> 
         <li><p><b>Business</b> - This layer consists of application server which is utilized by web server to do dynamic tasks. This layer interacts with data layer via data base or some external programs.</p></li> 
         <li><p><b>Data</b> - This layer consists of databases or any source of data.</p></li> 
        </ul> 
        <h2>Creating Web Server using Node</h2> 
        <p>Create an HTTP server using http.createServer method. Pass it a function with parameters request and response. Write the sample implementation to return a requested page. Pass a port 8081 to listen method. </p>
        <p>Create a js file named server.js in <b>C:\&gt;Nodejs_WorkSpace</b>.</p> 
        <p><i>File: server.js</i></p> 
        <pre class="prettyprint tryit">
//http module is required to create a web server
var http = require('http');
//fs module is required to read file from file system
var fs = require('fs');
//url module is required to parse the URL passed to server
var url = require('url');

//create the server
http.createServer(function (request, response) {  
   //parse the pathname containing file name
   var pathname = url.parse(request.url).pathname;
   //print the name of the file for which request is made.
   //if url is http://localhost:8081/test.htm then
   //pathname will be /test.htm
   console.log("Request for " + pathname + " received.");
   //read the requested file content from file system
   fs.readFile(pathname.substr(1), function (err, data) {
      //if error occured during file read
      //send a error response to client
      //that web page is not found.
      if (err) {
         console.log(err.stack);
         // HTTP Status: 404 : NOT FOUND
         // Content Type: text/plain
         response.writeHead(404, {'Content-Type': 'text/html'});
      }else{	
         //Page found	  
         // HTTP Status: 200 : OK
         // Content Type: text/plain
         response.writeHead(200, {'Content-Type': 'text/html'});	
         // write the content of the file to response body
         response.write(data.toString());		
      }
      // send the response body 
      response.end();
   });   
}).listen(8081);
// console will print the message
console.log('Server running at http://127.0.0.1:8081/');
</pre> 
        <p>Create a htm file named test.htm in <b>C:\&gt;Nodejs_WorkSpace</b>.</p> 
        <p><i>File: test.htm</i></p> 
        <pre class="prettyprint notranslate">
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Sample Page&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
Hello World!
&lt;/body&gt;
&lt;/html&gt;
</pre> 
        <p>Now run the server.js to see the result:</p> 
        <pre class="prettyprint notranslate">
C:\Nodejs_WorkSpace&gt;node server.js
</pre> 
        <p>Verify the Output. Server has started</p> 
        <pre class="result notranslate">
Server running at http://127.0.0.1:8081/
</pre> 
        <h2>Make a request to Node.js server</h2> 
        <p>Open http://127.0.0.1:8081/test.htm in any browser and see the below result.</p> 
        <img src="/nodejs/images/nodejs_sample1.jpg" alt="First Server Application"> 
        <p>Verify the Output at server end.</p> 
        <pre class="result notranslate">
Server running at http://127.0.0.1:8081/
Request for /test.htm received.
</pre> 
        <h2>Creating Web client using Node</h2> 
        <p>A web client can be created using http module. See the below example:</p> 
        <p>Create a js file named client.js in <b>C:\&gt;Nodejs_WorkSpace</b>.</p> 
        <p><i>File: client.js</i></p> 
        <pre class="prettyprint tryit">
//http module is required to create a web client
var http = require('http');

//options are to be used by request 
var options = {
   host: 'localhost',
   port: '8081',
   path: '/test.htm'  
};


//callback function is used to deal with response
var callback = function(response){
   // Continuously update stream with data
   var body = '';
   response.on('data', function(data) {
      body += data;
   });
   response.on('end', function() {
      // Data received completely.
      console.log(body);
   });
}
//make a request to the server
var req = http.request(options, callback);
req.end();
</pre> 
        <p>Now run the client.js in a different command terminal other than of server.js to see the result:</p> 
        <pre class="prettyprint notranslate">
C:\Nodejs_WorkSpace&gt;node client.js
</pre> 
        <p>Verify the Output.</p> 
        <pre class="result notranslate">
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Sample Page&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
Hello World!
&lt;/body&gt;
&lt;/html&gt;
</pre> 
        <p>Verify the Output at server end.</p> 
        <pre class="result notranslate">
Server running at http://127.0.0.1:8081/
Request for /test.htm received.
Request for /test.htm received.
</pre> 
        <h1>Node.js - Express Application</h1> 
        <h2>Express Overview</h2> 
        <p>Express JS is a very popular web application framework built to create Node JS Web based applications. It provides an integrated environment to facilitate rapid development of Node based Web applications. Express framework is based on Connect middleware engine and used Jade html template framework for HTML templating. Following are some of the core features of Express framework:</p> 
        <ul class="list"> 
         <li><p>Allows to set up middlewares to respond to HTTP Requests.</p></li> 
         <li><p>Defines a routing table which is used to perform different action based on HTTP Method and URL.</p></li> 
         <li><p>Allows to dynamically render HTML Pages based on passing arguments to templates.</p></li> 
        </ul> 
        <h2>Installing Express</h2> 
        <p>Firstly, install the Express framework globally using npm so that it can be used to create web application using node terminal.</p> 
        <pre class="result notranslate">
C:\Nodejs_WorkSpace&gt;npm install express - g
</pre> 
        <p>Once npm completes the download, you can verify by looking at the content of <b>&lt;user-directory&gt;</b>/npm/node_modules. Or type the following command:</p> 
        <pre class="result notranslate">
C:\Nodejs_WorkSpace&gt;npm ls -g
</pre> 
        <p>You will see the following output:</p> 
        <pre class="result notranslate">
C:\Documents and Settings\Administrator\Application Data\npm
+-- express@4.11.2
  +-- accepts@1.2.3
  | +-- mime-types@2.0.8
  | | +-- mime-db@1.6.1
  | +-- negotiator@0.5.0
  +-- content-disposition@0.5.0
  +-- cookie@0.1.2
  +-- cookie-signature@1.0.5
  +-- debug@2.1.1
  | +-- ms@0.6.2
  +-- depd@1.0.0
  +-- escape-html@1.0.1
  +-- etag@1.5.1
  | +-- crc@3.2.1
  +-- finalhandler@0.3.3
  +-- fresh@0.2.4
  +-- media-typer@0.3.0
  +-- merge-descriptors@0.0.2
  +-- methods@1.1.1
  +-- on-finished@2.2.0
  | +-- ee-first@1.1.0
  +-- parseurl@1.3.0
  +-- path-to-regexp@0.1.3
  +-- proxy-addr@1.0.6
  | +-- forwarded@0.1.0
  | +-- ipaddr.js@0.1.8
  +-- qs@2.3.3
  +-- range-parser@1.0.2
  +-- send@0.11.1
  | +-- destroy@1.0.3
  | +-- mime@1.2.11
  | +-- ms@0.7.0
  +-- serve-static@1.8.1
  +-- type-is@1.5.6
  | +-- mime-types@2.0.8
  |   +-- mime-db@1.6.1
  +-- utils-merge@1.0.0
  +-- vary@1.0.0
</pre> 
        <h2>Express Generator</h2> 
        <p>Now install the express generator using npm. Express generator is used to create an application skeleton using express command.</p> 
        <pre class="result notranslate">
C:\Nodejs_WorkSpace&gt; npm install express-generator -g
</pre> 
        <p>You will see the following output:</p> 
        <pre class="result notranslate">
C:\Nodejs_WorkSpace&gt;npm install express-generator -g
C:\Documents and Settings\Administrator\Application Data\npm\express -&gt; C:\Docum
ents and Settings\Administrator\Application Data\npm\node_modules\express-generator\bin\express
express-generator@4.12.0 C:\Documents and Settings\Administrator\Application Data\npm\node_modules\express-generator
+-- sorted-object@1.0.0
+-- commander@2.6.0
+-- mkdirp@0.5.0 (minimist@0.0.8)
</pre> 
        <h2>Hello world Example</h2> 
        <p>Now create a sample application say firstApplication using the following command:</p> 
        <pre class="result notranslate">
C:\Nodejs_WorkSpace&gt; express firstApplication
</pre> 
        <p>You will see the following output:</p> 
        <pre class="result notranslate">
   create : firstApplication
   create : firstApplication/package.json
   create : firstApplication/app.js
   create : firstApplication/public
   create : firstApplication/public/javascripts
   create : firstApplication/public/images
   create : firstApplication/public/stylesheets
   create : firstApplication/public/stylesheets/style.css
   create : firstApplication/routes
   create : firstApplication/routes/index.js
   create : firstApplication/routes/users.js
   create : firstApplication/views
   create : firstApplication/views/index.jade
   create : firstApplication/views/layout.jade
   create : firstApplication/views/error.jade
   create : firstApplication/bin
   create : firstApplication/bin/www

   install dependencies:
     $ cd firstApplication &amp;&amp; npm install

   run the app:
     $ DEBUG=firstApplication:* ./bin/www
</pre> 
        <p>Move to firstApplication folder and install dependencies of firstApplication using the following command:</p> 
        <pre class="result notranslate">
C:\Nodejs_WorkSpace\firstApplication&gt; npm install
</pre> 
        <p>You will see the following output:</p> 
        <pre class="result notranslate">
debug@2.1.2 node_modules\debug
+-- ms@0.7.0

cookie-parser@1.3.4 node_modules\cookie-parser
+-- cookie-signature@1.0.6
+-- cookie@0.1.2

morgan@1.5.1 node_modules\morgan
+-- basic-auth@1.0.0
+-- depd@1.0.0
+-- on-finished@2.2.0 (ee-first@1.1.0)

serve-favicon@2.2.0 node_modules\serve-favicon
+-- ms@0.7.0
+-- fresh@0.2.4
+-- parseurl@1.3.0
+-- etag@1.5.1 (crc@3.2.1)

jade@1.9.2 node_modules\jade
+-- character-parser@1.2.1
+-- void-elements@2.0.1
+-- commander@2.6.0
+-- mkdirp@0.5.0 (minimist@0.0.8)
+-- transformers@2.1.0 (promise@2.0.0, css@1.0.8, uglify-js@2.2.5)
+-- with@4.0.1 (acorn-globals@1.0.2, acorn@0.11.0)
+-- constantinople@3.0.1 (acorn-globals@1.0.2)

express@4.12.2 node_modules\express
+-- merge-descriptors@1.0.0
+-- cookie-signature@1.0.6
+-- methods@1.1.1
+-- cookie@0.1.2
+-- fresh@0.2.4
+-- utils-merge@1.0.0
+-- range-parser@1.0.2
+-- escape-html@1.0.1
+-- parseurl@1.3.0
+-- vary@1.0.0
+-- content-type@1.0.1
+-- finalhandler@0.3.3
+-- serve-static@1.9.1
+-- content-disposition@0.5.0
+-- path-to-regexp@0.1.3
+-- depd@1.0.0
+-- qs@2.3.3
+-- on-finished@2.2.0 (ee-first@1.1.0)
+-- etag@1.5.1 (crc@3.2.1)
+-- proxy-addr@1.0.6 (forwarded@0.1.0, ipaddr.js@0.1.8)
+-- send@0.12.1 (destroy@1.0.3, ms@0.7.0, mime@1.3.4)
+-- accepts@1.2.4 (negotiator@0.5.1, mime-types@2.0.9)
+-- type-is@1.6.0 (media-typer@0.3.0, mime-types@2.0.9)

body-parser@1.12.0 node_modules\body-parser
+-- content-type@1.0.1
+-- bytes@1.0.0
+-- raw-body@1.3.3
+-- depd@1.0.0
+-- qs@2.3.3
+-- iconv-lite@0.4.7
+-- on-finished@2.2.0 (ee-first@1.1.0)
+-- type-is@1.6.0 (media-typer@0.3.0, mime-types@2.0.9)
</pre> 
        <p>Here express generator has created a complete application structure which you can verify as firstApplication folder gets created in Nodejs_WorkSpace folder with following folders/files:</p> 
        <pre class="result notranslate">
.
+-- app.js
+-- bin
|   +-- www
+-- package.json
+-- public
|   +-- images
|   +-- javascripts
|   +-- stylesheets
|       +-- style.css
+-- routes
|   +-- index.js
|   +-- users.js
+-- views
    +-- error.jade
    +-- index.jade
    +-- layout.jade
</pre> 
        <ul class="list"> 
         <li><p><b>package.json</b> Application descriptor file contains dependencies list and other attributes of the application which Node utilizes.</p></li> 
         <li><p>app.js<b></b> Contains initialization code for server.</p></li> 
         <li><p>bin<b></b> Used to store the applicaion in production mode.</p></li> 
         <li><p>public<b></b> Used to store the images, stylesheets and javascript files</p></li> 
         <li><p>routes<b></b> Contains route handlers</p></li> 
         <li><p>views<b></b> Contains html templates to generate various views for web application.</p></li> 
        </ul> 
        <h2>First Application</h2> 
        <p>app.js is the core engine of express based application. Let's update the default app.js to include port information and creates a server using it. Add the following lines to app.js</p> 
        <pre class="prettyprint tryit">
//set the server port
app.set('port', process.env.PORT || 3000);

//create the server 
http.createServer(app).listen(app.get('port'), function(){
  console.log('Express server listening on port ' + app.get('port'));
});
</pre> 
        <h3>Updated app.js</h3> 
        <p>Following are the full content of the app.js file</p> 
        <p>Update app.js file present in <b>C:\&gt;Nodejs_WorkSpace\firstApplication</b>.</p> 
        <p><i>File: app.js</i></p> 
        <pre class="prettyprint tryit">
var express = require('express');
var path = require('path');
var favicon = require('serve-favicon');
var logger = require('morgan');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');
var http = require('http');

var routes = require('./routes/index');
var users = require('./routes/users');

var app = express();

// view engine setup
app.set('port', process.env.PORT || 3000);
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'jade');

// uncomment after placing your favicon in /public
//app.use(favicon(__dirname + '/public/favicon.ico'));
app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

app.use('/', routes);
app.use('/users', users);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
   var err = new Error('Not Found');
   err.status = 404;
   next(err);
});

// error handlers

// development error handler
// will print stacktrace
if (app.get('env') === 'development') {
   app.use(function(err, req, res, next) {
      res.status(err.status || 500);
      res.render('error', {
         message: err.message,
         error: err
      });
   });
}

// production error handler
// no stacktraces leaked to user
app.use(function(err, req, res, next) {
   res.status(err.status || 500);
   res.render('error', {
      message: err.message,
      error: {}
   });
});

http.createServer(app).listen(app.get('port'), function(){
  console.log('Express server listening on port ' + app.get('port'));
});

module.exports = app;
</pre> 
        <p>Now run the app.js to see the result:</p> 
        <pre class="prettyprint notranslate">
C:\Nodejs_WorkSpace\firstApplication&gt;node app
</pre> 
        <p>Verify the Output. Server has started</p> 
        <pre class="result notranslate">
Express server listening on port 3000
</pre> 
        <h2>Make a request to firstApplication</h2> 
        <p>Open http://localhost:3000/ in any browser and see the below result.</p> 
        <img src="/nodejs/images/nodejs_sample2.jpg" alt="First Express Application"> 
        <h2>Basic Routing</h2> 
        <p>Following code in app.js binds two route handlers.</p> 
        <pre class="prettyprint notranslate">
var routes = require('./routes/index');
var users = require('./routes/users');
...
app.use('/', routes);
app.use('/users', users);
</pre> 
        <ul class="list"> 
         <li><p><b>routes</b> - routes (index.js), route handler handles all request made to home page via localhost:3000</p></li> 
         <li><p><b>users</b> - users (users.js), route handler handles all request made to /users via localhost:3000/users </p></li> 
        </ul> 
        <p>Following is the code of <b>C:\&gt;Nodejs_WorkSpace\firstApplication\routes\index.js</b> created by express generator.</p> 
        <pre class="prettyprint notranslate">
var express = require('express');
var router = express.Router();

/* GET home page. */
router.get('/', function(req, res, next) {
  res.render('index', { title: 'Express' });
});

module.exports = router;
</pre> 
        <p>When node server gets a request for home page, express router render the index page using <b>index.jade</b> template while passing a parameter <b>title</b> with value 'Express'. Following are the contents of <b>C:\&gt;Nodejs_WorkSpace\firstApplication\views\index.jade</b> template. </p> 
        <pre class="prettyprint notranslate">
extends layout

block content
  h1= title
  p Welcome to #{title}
</pre> 
        <h1>Node.js - Enhancing First Application</h1> 
        <h2>Overview</h2> 
        <p>In this article, we'll enhance the express js application created in <a href="/nodejs/nodejs_express_application.htm">Express Application</a> chapter to do the following functionalities:</p> 
        <ul class="list"> 
         <li><p>Show list of all the users.</p></li> 
         <li><p>Show details of a particular user.</p></li> 
         <li><p>Add details of new user.</p></li> 
        </ul> 
        <h2>Step 1: Create a JSON based database</h2> 
        <p>Firstly, let's create a sample json based database of users.</p> 
        <p>Create a json file named user.json in <b>C:\&gt;Nodejs_WorkSpace\firstApplication</b>.</p> 
        <p><i>File: user.json</i></p> 
        <pre class="prettyprint notranslate">
{
   "user1" : {
      "name" : "mahesh",
	  "password" : "password1",
	  "profession" : "teacher"
   },
   "user2" : {
      "name" : "suresh",
	  "password" : "password2",
	  "profession" : "librarian"
   },
   "user3" : {
      "name" : "ramesh",
	  "password" : "password3",
	  "profession" : "clerk"
   }
}
</pre> 
        <h2>Step 2: Create Users specific Jade Views</h2> 
        <p>Create a <b>user</b> directory in <b>C:\&gt;Nodejs_WorkSpace\firstApplication\views</b> directory with the following views.</p> 
        <ul class="list"> 
         <li><p><b>index.jade</b> - View to show list of all users.</p></li> 
         <li><p><b>new.jade</b> - View to show a form to add a new user.</p><p></p></li> 
         <li><p><b>profile.jade</b> - View to show detail of an user</p><p></p></li> 
        </ul> 
        <p>Create a index.jade in <b>C:\&gt;Nodejs_WorkSpace\firstApplication\views\users</b>.</p> 
        <p><i>File: index.jade</i></p> 
        <pre class="prettyprint notranslate">
h1 Users

p 
   a(href="/users/new/") Create new user
ul
   - for (var username in users) {
   li 
      a(href="/users/" + encodeURIComponent(username))= users[username].name
   - };
</pre> 
        <p>Create a new.jade in <b>C:\&gt;Nodejs_WorkSpace\firstApplication\views\users</b>.</p> 
        <p><i>File: index.jade</i></p> 
        <pre class="prettyprint notranslate">
h1 New User

form(method="POST" action="/Users/addUser")
	P 
		label(for="name") Name<br>
		input#name(name="name")
	P 
		label(for="password") Password<br>
		input#name(name="password")
	P 
		label(for="profession") Profession<br>
		input#name(name="profession")
	P
		input(type="submit", value="Create")
</pre> 
        <p>Create a profile.jade in <b>C:\&gt;Nodejs_WorkSpace\firstApplication\views\users</b>.</p> 
        <p><i>File: profile.jade</i></p> 
        <pre class="prettyprint notranslate">
h1 Name: #{user.name}

h2 Profession: #{user.profession}
</pre> 
        <h2>Step 3: Update users route handler, users.js</h2> 
        <p>Update users.js in <b>C:\&gt;Nodejs_WorkSpace\firstApplication\routes</b>.</p> 
        <p><i>File: users.js</i></p> 
        <pre class="prettyprint notranslate">
var express = require('express');
var router = express.Router();

var users = require('../users.json');
/* GET users listing. */
router.get('/', function(req, res) {
   res.render('users/index', { title: 'Users',users:users });
});

/* Get form to add a new user*/
router.get('/new', function(req, res) {
   res.render('users/new', { title: 'New User'});
});

/* Get detail of a new user */
router.get('/:name', function(req, res, next) {
   var user = users[req.params.name] 
   if(user){
      res.render('users/profile', { title: 'User Profile', user:user});
   }else{
      next();
   }   
});

/* post the form to add new user */
router.post('/addUser', function(req, res, next) {   
   if(users[req.body.name]){
      res.send('Conflict', 409);
   }else{
     users[req.body.name] = req.body;
	 res.redirect('/users/');
   }   
});

module.exports = router;
</pre> 
        <p>Now run the app.js to see the result:</p> 
        <pre class="prettyprint notranslate">
C:\Nodejs_WorkSpace\firstApplication&gt;node app
</pre> 
        <p>Verify the Output. Server has started</p> 
        <pre class="result notranslate">
Express server listening on port 3000
</pre> 
        <p>Make a request to firstApplication to get list of all the users. Open http://localhost:3000/users in any browser and see the below result.</p> 
        <img src="/nodejs/images/nodejs_sample3.jpg" alt="Express Application, All users"> 
        <p>Click on Create new User link to see a form.</p> 
        <img src="/nodejs/images/nodejs_sample4.jpg" alt="Express Application, Add user"> 
        <p>Submit form and see the updated list.</p> 
        <img src="/nodejs/images/nodejs_sample5.jpg" alt="Express Application, Updated users"> 
        <p>Click on newly created user to see the details.</p> 
        <img src="/nodejs/images/nodejs_sample6.jpg" alt="Express Application, User detail"> 
        <p>You can check the server status also as following:</p> 
        <pre class="prettyprint notranslate">
C:\Nodejs_WorkSpace\firstApplication&gt;node app
Express server listening on port 3000
GET /users/ 200 809.161 ms - 201
GET /users/new/ 304 101.627 ms - -
GET /users/new/ 304 33.496 ms - -
POST /Users/addUser 302 56.206 ms - 70
GET /users/ 200 43.548 ms - 245
GET /users/naresh 200 12.313 ms - 47
</pre> 
        <h1>Node.js - Restful API</h1> 
        <h2>What is REST architecture?</h2> 
        <p>REST stands for REpresentational State Transfer. REST is web standards based architecture and uses HTTP Protocol. It revolves around resource where every component is a resource and a resource is accessed by a common interface using HTTP standard methods. REST was first introduced by Roy Fielding in 2000.</p> 
        <p>In REST architecture, a REST Server simply provides access to resources and REST client accesses and modifies the resources. Here each resource is identified by URIs/ global IDs. REST uses various representation to represent a resource like text, JSON, XML. JSON is the most popular one.</p> 
        <h3>HTTP methods</h3> 
        <p>Following four HTTP methods are commonly used in REST based architecture.</p> 
        <ul class="list"> 
         <li><p><b>GET</b> - Provides a read only access to a resource.</p></li> 
         <li><p><b>PUT</b> - Used to create a new resource.</p></li> 
         <li><p><b>DELETE</b> - Used to remove a resource.</p></li> 
         <li><p><b>POST</b> - Used to update a existing resource or create a new resource.</p></li> 
        </ul> 
        <h2>Introduction to RESTFul web services</h2> 
        <p>A web service is a collection of open protocols and standards used for exchanging data between applications or systems. Software applications written in various programming languages and running on various platforms can use web services to exchange data over computer networks like the Internet in a manner similar to inter-process communication on a single computer. This interoperability (e.g., between Java and Python, or Windows and Linux applications) is due to the use of open standards.</p> 
        <p>Web services based on REST Architecture are known as RESTful web services. These webservices uses HTTP methods to implement the concept of REST architecture. A RESTful web service usually defines a URI, Uniform Resource Identifier a service, provides resource representation such as JSON and set of HTTP Methods.</p> 
        <h2>Creating RESTFul for A Library</h2> 
        <p>INow, we'll enhance the express js application created in <a href="/nodejs/nodejs_express_sample_application.htm">Express Sample Application</a> chapter to create a webservice say user management with following functionalities:</p> 
        <table class="src"> 
         <tbody>
          <tr>
           <th>Sr. No.</th>
           <th>URI</th>
           <th>HTTP Method</th>
           <th>POST body</th>
           <th>Result</th> 
          </tr>
          <tr>
           <td>1</td>
           <th>/users/</th>
           <th>GET</th>
           <th>empty</th>
           <th>Show list of all the users.</th> 
          </tr>
          <tr>
           <td>2</td>
           <th>/users/addUser</th>
           <th>POST</th>
           <th>JSON String</th>
           <th>Add details of new user.</th> 
          </tr>
          <tr>
           <td>3</td>
           <th>/users/:id</th>
           <th>GET</th>
           <th>empty</th>
           <th>Show details of a user.</th> 
          </tr>
         </tbody>
        </table> 
        <h2>Getting All users</h2> 
        <p>Firstly, let's update a sample json based database of users.</p> 
        <p>Update json file named user.json in <b>C:\&gt;Nodejs_WorkSpace\firstApplication</b>.</p> 
        <p><i>File: user.json</i></p> 
        <pre class="prettyprint notranslate">
{
   "user1" : {
      "name" : "mahesh",
	  "password" : "password1",
	  "profession" : "teacher",
	  "id": 1
   },
   "user2" : {
      "name" : "suresh",
	  "password" : "password2",
	  "profession" : "librarian",
	  "id": 2
   },
   "user3" : {
      "name" : "ramesh",
	  "password" : "password3",
	  "profession" : "clerk",
	  "id": 3
   }
}
</pre> 
        <p>When a client send a GET request to /users, server should send a response containing all the user. Update users route handler, users.js</p> 
        <p>Update users.js in <b>C:\&gt;Nodejs_WorkSpace\firstApplication\routes</b>.</p> 
        <p><i>File: users.js</i></p> 
        <pre class="prettyprint notranslate">
/* GET users listing. */
router.get('/', function(req, res) {
   res.send({ title: 'Users',users:users });
});
</pre> 
        <h2>Add details of new user.</h2> 
        <p>When a client send a POST request to /users/addUser with body containing the JSON String, server should send a response stating the status. Update users route handler, users.js</p> 
        <p>Update users.js in <b>C:\&gt;Nodejs_WorkSpace\firstApplication\routes</b>.</p> 
        <p><i>File: users.js</i></p> 
        <pre class="prettyprint notranslate">
/*add a user*/
router.post('/addUser', function(req, res, next) { 
    var body = '';
    req.on('data', function (data) {
        body += data;
    });
    req.on('end', function () {        
	   var json = JSON.parse(body);	   
       users["user"+json.id] = body;
	   res.send({ Message: 'User Added'});      
    });   	   
});
</pre> 
        <h2>Show details of new user.</h2> 
        <p>When a client send a GET request to /users with an id, server should send a response containing detail of that user. Update users route handler, users.js</p> 
        <p>Update users.js in <b>C:\&gt;Nodejs_WorkSpace\firstApplication\routes</b>.</p> 
        <p><i>File: users.js</i></p> 
        <pre class="prettyprint notranslate">
router.get('/:id', function(req, res, next) {  
   var user = users["user" + req.params.id] 
   if(user){
      res.send({ title: 'User Profile', user:user});
   }else{
      res.send({ Message: 'User not present'});
   }   
});
</pre> 
        <h2>Complete User.js</h2> 
        <p><i>File: users.js</i></p> 
        <pre class="prettyprint notranslate">
var express = require('express');
var router = express.Router();

var users = require('../users.json');
/* GET users listing. */
router.get('/', function(req, res) {
   res.send({ title: 'Users',users:users });
});

router.get('/:id', function(req, res, next) {
   console.log(req.params)
   var user = users["user" + req.params.id] 
   if(user){
      res.send({ title: 'User Profile', user:user});
   }else{
      res.send({ Message: 'User not present'});
   }   
});

router.post('/addUser', function(req, res, next) { 
    var body = '';
    req.on('data', function (data) {
        body += data;
    });
    req.on('end', function () {        
	   var json = JSON.parse(body);	   
       users["user"+json.id] = body;
	   res.send({ Message: 'User Added'});      
    });   	   
});

module.exports = router;
</pre> 
        <h2>Output</h2> 
        <p>We are using <a href="http://www.getpostman.com/" alt="postman"> Postman</a>, a Chrome extension, to test our webservices.</p> 
        <p>Now run the app.js to see the result:</p> 
        <pre class="prettyprint notranslate">
C:\Nodejs_WorkSpace\firstApplication&gt;node app
</pre> 
        <p>Verify the Output. Server has started</p> 
        <pre class="result notranslate">
Express server listening on port 3000
</pre> 
        <p>Make a request to firstApplication to get list of all the users. Put http://localhost:3000/users in POSTMAN with GET request and see the below result.</p> 
        <img src="/nodejs/images/nodejs_postman1.jpg" alt="RESTful API, All users"> 
        <p>Make a request to firstApplication to add a new user. Put http://localhost:3000/users/addUser in POSTMAN with POST request and see the below result.</p> 
        <p>Make sure to add json body in and select POST as method.</p> 
        <pre class="prettyprint notranslate">
{"name":"rakesh","password":"password4","profession":"teacher","id":4}
</pre> 
        <img src="/nodejs/images/nodejs_postman2.jpg" alt="RESTful API, Add user"> 
        <p>Make a request to firstApplication to get a user. Put http://localhost:3000/users/1 in POSTMAN with GET request and see the below result.</p> 
        <img src="/nodejs/images/nodejs_postman3.jpg" alt="RESTful API, View user"> 
        <h1>Node.js - Scaling Application</h1> 
        <p>As node runs in a single thread mode, it uses an event-driven paradigm to handle concurrency. It also facilitates creation of child processes to leverage parallel processing on multi-core cpu based systems.</p> 
        <p>Child processes always have three streams child.stdin, child.stdout, and child.stderr which may be shared with the stdio streams of the parent process. they may be a separate stream objects which can be piped to and from.</p> 
        <p>There are three major ways to create child process.</p> 
        <ul class="list"> 
         <li><p><b>exec</b> - child_process.exec method runs a command in a shell/console and buffers the output.</p></li> 
         <li><p><b>spawn</b> - child_process.spawn launches a new process with a given command</p></li> 
         <li><p><b>fork</b> - The child_process.fork method is a special case of the spawn() to create Node processes.</p></li> 
        </ul> 
        <h2>exec() method</h2> 
        <p>child_process.exec method runs a command in a shell and buffers the output. It has the following signature</p> 
        <pre class="prettyprint notranslate">
child_process.exec(command[, options], callback)
</pre> 
        <ul class="list"> 
         <li><p><b>command</b> String The command to run, with space-separated arguments</p></li> 
         <li><p><b>options</b> Object </p>
          <ul class="list"> 
           <li><p><b>cwd</b> String Current working directory of the child process</p></li> 
           <li><p><b>env</b> Object Environment key-value pairs</p></li> 
           <li><p><b>encoding</b> String (Default: 'utf8')</p></li> 
           <li><p><b>shell</b> String Shell to execute the command with (Default: '/bin/sh' on UNIX, 'cmd.exe' on Windows, The shell should understand the -c switch on UNIX or /s /c on Windows. On Windows, command line parsing should be compatible with cmd.exe.)</p></li> 
           <li><p><b>timeout</b> Number (Default: 0)</p></li> 
           <li><p><b>maxBuffer</b> Number (Default: 200*1024)</p></li> 
           <li><p><b>killSignal</b> String (Default: 'SIGTERM')</p></li> 
           <li><p><b>uid</b> Number Sets the user identity of the process. </p></li> 
           <li><p><b>gid</b> Number Sets the group identity of the process.</p></li> 
          </ul> <p></p></li> 
         <li><p><b>callback</b> Function called with the output when process terminates</p></li> 
         <ul class="list"> 
          <li><p><b>error</b> Error</p></li> 
          <li><p><b>stdout</b> Buffer</p></li> 
          <li><p><b>stderr</b> Buffer</p></li> 
         </ul> 
         <li><p><b>Return:</b> ChildProcess object</p></li> 
        </ul> 
        <p>exec() returns a buffer with a max size and waits for the process to end and tries to return all the buffered data at once</p> 
        <h2>Example</h2> 
        <p>Create two js file named worker.js and master.js in <b>C:\&gt;Nodejs_WorkSpace</b>.</p> 
        <p><i>File: worker.js</i></p> 
        <pre class="prettyprint notranslate">
console.log("Child Process "+ process.argv[2] +" executed." );
</pre> 
        <p><i>File: master.js</i></p> 
        <pre class="prettyprint tryit">
const fs = require('fs');
const child_process = require('child_process');

for(var i=0; i&lt;3; i++) {
   var workerProcess = child_process.exec('node worker.js '+i,
      function (error, stdout, stderr) {
         if (error) {
            console.log(error.stack);
            console.log('Error code: '+error.code);
            console.log('Signal received: '+error.signal);
         }
         console.log('stdout: ' + stdout);
         console.log('stderr: ' + stderr);
      });

      workerProcess.on('exit', function (code) {
      console.log('Child process exited with exit code '+code);
   });
}
</pre> 
        <p>Now run the master.js to see the result:</p> 
        <pre class="prettyprint notranslate">
C:\Nodejs_WorkSpace&gt;node master.js
</pre> 
        <p>Verify the Output. Server has started</p> 
        <pre class="result notranslate">
Child process exited with exit code 0
stdout: Child Process 1 executed.

stderr:
Child process exited with exit code 0
stdout: Child Process 0 executed.

stderr:
Child process exited with exit code 0
stdout: Child Process 2 executed.
</pre> 
        <h2>spawn() method</h2> 
        <p>child_process.spawn method launches a new process with a given command. It has the following signature</p> 
        <pre class="prettyprint notranslate">
child_process.spawn(command[, args][, options])
</pre> 
        <ul class="list"> 
         <li><p><b>command</b> String The command to run</p></li> 
         <li><p><b>args</b> Array List of string arguments</p></li> 
         <li><p><b>options</b> Object </p>
          <ul class="list"> 
           <li><p><b>cwd</b> String Current working directory of the child process</p></li> 
           <li><p><b>env</b> Object Environment key-value pairs</p></li> 
           <li><p><b>stdio</b> Array|String Child's stdio configuration</p></li> 
           <li><p><b>customFds</b> Array Deprecated File descriptors for the child to use for stdio</p></li> 
           <li><p><b>detached</b> Boolean The child will be a process group leader</p></li> 
           <li><p><b>uid</b> Number Sets the user identity of the process. </p></li> 
           <li><p><b>gid</b> Number Sets the group identity of the process.</p></li> 
          </ul> <p></p></li> 
         <li><p><b>Return:</b> ChildProcess object</p></li> 
        </ul> 
        <p>spawn() returns streams (stdout &amp; stderr) and it should be used when the process returns large amount of data. spawn() starts receiving the response as soon as the process starts executing.</p> 
        <h2>Example</h2> 
        <p>Create two js file named worker.js and master.js in <b>C:\&gt;Nodejs_WorkSpace</b>.</p> 
        <p><i>File: worker.js</i></p> 
        <pre class="prettyprint notranslate">
console.log("Child Process "+ process.argv[2] +" executed." );
</pre> 
        <p><i>File: master.js</i></p> 
        <pre class="prettyprint tryit">
const fs = require('fs');
const child_process = require('child_process');
 
for(var i=0; i&lt;3; i++) {
   var workerProcess = child_process.spawn('node', ['worker.js', i]);

   workerProcess.stdout.on('data', function (data) {
      console.log('stdout: ' + data);
   });

   workerProcess.stderr.on('data', function (data) {
      console.log('stderr: ' + data);
   });

   workerProcess.on('close', function (code) {
      console.log('child process exited with code ' + code);
   });
}
</pre> 
        <p>Now run the master.js to see the result:</p> 
        <pre class="prettyprint notranslate">
C:\Nodejs_WorkSpace&gt;node master.js
</pre> 
        <p>Verify the Output. Server has started</p> 
        <pre class="result notranslate">
stdout: Child Process 0 executed.

child process exited with code 0
stdout: Child Process 2 executed.

child process exited with code 0
stdout: Child Process 1 executed.

child process exited with code 0
</pre> 
        <h2>fork method</h2> 
        <p>child_process.fork method is a special case of the spawn() to create Node processes. It has the following signature</p> 
        <pre class="prettyprint notranslate">
child_process.fork(modulePath[, args][, options])
</pre> 
        <ul class="list"> 
         <li><p><b>modulePath</b> String The module to run in the child</p></li> 
         <li><p><b>args</b> Array List of string arguments</p></li> 
         <li><p><b>options</b> Object </p>
          <ul class="list"> 
           <li><p><b>cwd</b> String Current working directory of the child process</p></li> 
           <li><p><b>env</b> Object Environment key-value pairs</p></li> 
           <li><p><b>execPath</b> String Executable used to create the child process</p></li> 
           <li><p><b>execArgv</b> Array List of string arguments passed to the executable (Default: process.execArgv)</p></li> 
           <li><p><b>silent</b> Boolean If true, stdin, stdout, and stderr of the child will be piped to the parent, otherwise they will be inherited from the parent, see the "pipe" and "inherit" options for spawn()'s stdio for more details (default is false)</p></li> 
           <li><p><b>uid</b> Number Sets the user identity of the process. </p></li> 
           <li><p><b>gid</b> Number Sets the group identity of the process.</p></li> 
          </ul> <p></p></li> 
         <li><p><b>Return:</b> ChildProcess object</p></li> 
        </ul> 
        <p>fork returns object with a built-in communication channel in addition to having all the methods in a normal ChildProcess instance.</p> 
        <h2>Example</h2> 
        <p>Create two js file named worker.js and master.js in <b>C:\&gt;Nodejs_WorkSpace</b>.</p> 
        <p><i>File: worker.js</i></p> 
        <pre class="prettyprint notranslate">
console.log("Child Process "+ process.argv[2] +" executed." );
</pre> 
        <p><i>File: master.js</i></p> 
        <pre class="prettyprint tryit">
const fs = require('fs');
const child_process = require('child_process');
 
for(var i=0; i&lt;3; i++) {
   var worker_process = child_process.fork("worker.js", [i]);	

   worker_process.on('close', function (code) {
      console.log('child process exited with code ' + code);
   });
}
</pre> 
        <p>Now run the master.js to see the result:</p> 
        <pre class="prettyprint notranslate">
C:\Nodejs_WorkSpace&gt;node master.js
</pre> 
        <p>Verify the Output. Server has started</p> 
        <pre class="result notranslate">
Child Process 0 executed.
Child Process 1 executed.
Child Process 2 executed.
child process exited with code 0
child process exited with code 0
child process exited with code 0
</pre> 
        <hr> 
        <div class="pre-btn"> 
         <a href="/nodejs/nodejs_questions_answers.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a> 
        </div>
        <div class="print-btn"> 
         <a href="/cgi-bin/printpage.cgi" target="_blank"><i class="icon icon-print big-font"></i> Print</a> 
        </div> 
        <div class="pdf-btn"> 
         <a href="/nodejs/pdf/nodejs_quick_guide.pdf" title="Node.js Quick Guide" target="_blank"><i class="icon icon-file-pdf-o big-font"></i> PDF</a> 
        </div> 
        <div class="nxt-btn"> 
         <a href="/nodejs/nodejs_useful_resources.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a> 
        </div> 
        <hr> 
        <!-- PRINTING ENDS HERE --> 
        <div class="bottomgooglead"> 
         <div class="bottomadtag">
          Advertisements
         </div> 
         <script type="text/javascript"><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script> 
         <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script> 
        </div> 
       </div> 
      </div> 
      <div class="row"> 
       <div class="col-md-3" id="rightbar"> 
        <div class="simple-ad"> 
         <a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('http://www.facebook.com/sharer.php?u=' + 'http://www.tutorialspoint.com/nodejs/nodejs_quick_guide.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;"> <img src="/images/facebookIcon.jpg" alt="img"> </a> 
         <a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('http://twitter.com/share?url=' + 'http://www.tutorialspoint.com/nodejs/nodejs_quick_guide.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;"> <img src="/images/twitterIcon.jpg" alt="img"> </a> 
         <a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'http://www.tutorialspoint.com/nodejs/nodejs_quick_guide.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;"> <img src="/images/linkedinIcon.jpg" alt="img"> </a> 
         <a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=http://www.tutorialspoint.com/nodejs/nodejs_quick_guide.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;"> <img src="/images/googlePlusIcon.jpg" alt="img"> </a> 
         <a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('http://www.stumbleupon.com/submit?url=http://www.tutorialspoint.com/nodejs/nodejs_quick_guide.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;"> <img src="/images/StumbleUponIcon.jpg" alt="img"> </a> 
         <a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('http://reddit.com/submit?url=http://www.tutorialspoint.com/nodejs/nodejs_quick_guide.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;"> <img src="/images/reddit.jpg" alt="img"> </a> 
        </div> 
        <div class="rightgooglead"> 
         <script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script> 
         <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script> 
        </div> 
        <div class="rightgooglead"> 
         <script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 300;
google_ad_height = 600;
google_ad_format = "300x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script> 
         <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script> 
        </div> 
        <div class="rightgooglead"> 
         <script type="text/javascript"><!--
google_ad_client = "ca-pub-2537027957187252";
/* Right Side Ad */
google_ad_slot = "right_side_ad";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script> 
         <script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js">
</script> 
        </div> 
       </div> 
      </div> 
     </div> 
    </div> 
   </div> 
   <div class="footer-copyright"> 
    <div class="container"> 
     <div class="row"> 
      <div class="col-md-1"> 
       <a href="index.htm" class="logo"> <img alt="Tutorials Point" class="img-responsive" src="/scripts/img/logo-footer.png"> </a> 
      </div> 
      <div class="col-md-4 col-sm-12 col-xs-12"> 
       <nav id="sub-menu"> 
        <ul> 
         <li><a href="/about/tutorials_writing.htm">Write for us</a></li> 
         <li><a href="/about/faq.htm">FAQ's</a></li> 
         <li><a href="/about/about_helping.htm">Helping</a></li> 
         <li><a href="/about/contact_us.htm">Contact</a></li> 
        </ul> 
       </nav> 
      </div> 
      <div class="col-md-3 col-sm-12 col-xs-12"> 
       <p>© Copyright 2016. All Rights Reserved.</p> 
      </div> 
      <div class="col-md-4 col-sm-12 col-xs-12"> 
       <div class="news-group"> 
        <input type="text" class="form-control-foot search" name="textemail" id="textemail" autocomplete="off" placeholder="Enter email for newsletter" onfocus="if (this.value == 'Enter email for newsletter...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Enter email for newsletter...';}"> 
        <span class="input-group-btn"> <button class="btn btn-default btn-footer" id="btnemail" type="submit" onclick="javascript:void(0);">go</button> </span> 
        <div id="newsresponse"></div> 
       </div> 
      </div> 
     </div> 
    </div> 
   </div> 
  </div> 
  <!-- Libs --> 
  <script type="text/javascript" src="/theme/js/custom-min.js"></script> 
  <script src="http://www.google-analytics.com/urchin.js">
</script> 
  <script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
$('.pg-icon').click(function(){
   $('.wrapLoader').show();
});
</script> 
  <script type="text/javascript" src="/theme/js/jquery.colorbox-min.js"></script> 
  <script type="text/javascript">
   var tryit = new $.TryIt('/nodejs/try_nodejs.php');
   tryit.compile();
</script>   
 </body>
</html>