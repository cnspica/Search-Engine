http://tutorialspoint.com/nodejs/nodejs_express_framework.htm
<!doctype html>
<!--[if lt IE 7 ]> <html lang="en" class="no-js ie6"> <![endif]-->
<!--[if IE 7 ]> <html lang="en" class="no-js ie7"> <![endif]-->
<!--[if IE 8 ]> <html lang="en" class="no-js ie8"> <![endif]-->
<!--[if IE 9 ]> <html lang="en" class="no-js ie9"> <![endif]-->
<!--[if (gt IE 9)|!(IE)]><!-->
<html lang="en">
 <!--<![endif]-->
 <head> 
  <meta charset="utf-8"> 
  <title>Node.js Express Framework</title> 
  <meta name="description" content="Node.js Express Framework - Learn Node.js framework in simple and easy steps starting from Introduction, Environment Setup, Node Package Manager, Node Callbacks Concept, Node Buffers Module, Node Streams, Node File System, Node Utility Modules, Node Web Module, Node Express Application, Node RESTFul API, Node Scaling Application"> 
  <meta name="keywords" content="Introduction, Environment Setup, Node Package Manager, Global vs Local Installation, Node Callbacks Concept, locking vs non-blocking Code, Event Driven Programming, Event Loop Overview, Event Emitters, Implementing Callbacks, Node Buffers Module,JSON to JS Objects, JS Objects to JSON, Buffer Objects, Node Streams, Reading Stream, Writing Stream, Piping Stream, Node File System, File System Module, Synchronous vs Asynchronous Node, Utility Modules,Node Console Module, Node Process Module, Node OS Module, Node Path Module, Node Net Module, Node DNS Module, Node Domain Module, Node Web Module,HTTP Servers with Node.js, HTTP Clients with Node.js, Node Express Application, Express Overview, Installing Express, Express Generator, Node RESTFul API, Node Scaling Application,The exec function,The spawn function,The fork function"> 
  <base href="http://www.tutorialspoint.com/"> 
  <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon"> 
  <meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes"> 
  <meta property="og:locale" content="en_US"> 
  <meta property="og:type" content="website"> 
  <meta property="fb:app_id" content="471319149685276"> 
  <meta property="og:site_name" content="www.tutorialspoint.com"> 
  <meta name="robots" content="index, follow"> 
  <meta name="apple-mobile-web-app-capable" content="yes"> 
  <meta name="apple-mobile-web-app-status-bar-style" content="black"> 
  <meta name="author" content="tutorialspoint.com"> 
  <script type="text/javascript" src="/theme/js/script-min-v4.js"></script> 
  <link rel="stylesheet" href="/theme/css/style-min.css"> 
  <!-- Head Libs --> 
  <!--[if IE 8]>
<link rel="stylesheet" type="text/css" href="/theme/css/ie8.css">
<![endif]--> 
  <style>
.fa-camera:before{content:"\f03d";font-family:FontAwesome;font-style:normal;font-size:100%}
pre.prettyprint.tryit {min-height:37px; background: #eee url(/nodejs/images/try-it.jpg) top right no-repeat !important}div.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #82af25 url(/images/pattern.png) repeat center center !important;}
.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #82af25 !important;}
.submenu-item{ border-bottom: 2px solid #82af25 !important; border-top: 2px solid #82af25 !important }
</style> 
  <script>
$(document).ready(function() {
  $('input[name="q"]').keydown(function(event){
    if(event.keyCode == 13) {
      event.preventDefault();
      return false;
    }
  });
});
</script> 
 </head> 
 <body onload="prettyPrint()"> 
  <div class="wrapLoader"> 
   <div class="imgLoader"> 
    <img src="/images/loading-cg.gif" alt="" width="70" height="70"> 
   </div> 
  </div> 
  <header> 
   <div class="submenu-item sub-main-menu" id="top-sub-menu"></div> 
   <div class="container"> 
    <h1 class="logo"> <a href="index.htm" title="tutorialspoint"> <img alt="tutorialspoint" src="/nodejs/images/logo.png"> </a> </h1> 
    <button class="btn btn-responsive-nav btn-inverse" data-toggle="collapse" data-target=".nav-main-collapse" id="pull"> <i class="icon icon-bars"></i> </button> 
    <div class="navbar nav-main"> 
     <div class="container"> 
      <nav class="nav-main mega-menu"> 
       <ul class="nav nav-pills nav-main" id="mainMenu"> 
        <li class="dropdown no-sub-menu"> <a class="dropdown" href="index.htm"><i class="icon icon-home"></i> Home</a> </li> 
        <li class="dropdown" id="liTL"><a class="dropdown" href="javascript:void(0);"><span class="tut-lib"> Tutorials Library <i class="fa-caret-down"></i></span></a></li> 
        <li class="dropdown no-sub-menu"><a class="dropdown" href="codingground.htm"><i class="fa-code"></i> Coding Ground </a> </li> 
        <li class="dropdown no-sub-menu"><a class="dropdown" href="tutor_connect/index.php"><i class="fa-user"> </i> Tutor Connect</a></li> 
        <li class="dropdown no-sub-menu"><a class="dropdown" href="online_dev_tools.htm"><span class="dev-tools-menu"> Tools</span></a></li> 
       </ul> 
      </nav> 
      <div class="searchform-popup"> 
       <input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off"> 
       <div class="magnifying-glass">
        <i class="icon-search"></i> Search 
       </div> 
      </div> 
     </div> 
    </div> 
   </div>
  </header> 
  <div style="clear:both;"></div> 
  <div role="main" class="main"> 
   <div class="container"> 
    <div class="row"> 
     <div class="col-md-2"> 
      <aside class="sidebar"> 
       <div class="mini-logo"> 
        <img src="/nodejs/images/nodejs-mini-logo.jpg" alt="Node.js Tutorial"> 
       </div> 
       <ul class="nav nav-list primary left-menu"> 
        <li class="heading">Node.js Tutorial</li> 
        <li><a href="/nodejs/index.htm">Node.js Home</a></li> 
        <li><a href="/nodejs/nodejs_introduction.htm">Node.js Introduction</a></li> 
        <li><a href="/nodejs/nodejs_environment_setup.htm">Node.js Environment Setup</a></li> 
        <li><a href="/nodejs/nodejs_first_application.htm">Node.js First Application</a></li> 
        <li><a href="/nodejs/nodejs_repl_terminal.htm">Node.js REPL Terminal</a></li> 
        <li><a href="/nodejs/nodejs_npm.htm">Node.js Package Manager (NPM)</a></li> 
        <li><a href="/nodejs/nodejs_callbacks_concept.htm">Node.js Callbacks Concept</a></li> 
        <li><a href="/nodejs/nodejs_event_loop.htm">Node.js Event Loop</a></li> 
        <li><a href="/nodejs/nodejs_event_emitter.htm">Node.js Event Emitter</a></li> 
        <li><a href="/nodejs/nodejs_buffers.htm">Node.js Buffers</a></li> 
        <li><a href="/nodejs/nodejs_streams.htm">Node.js Streams</a></li> 
        <li><a href="/nodejs/nodejs_file_system.htm">Node.js File System</a></li> 
        <li><a href="/nodejs/nodejs_global_objects.htm">Node.js Global Objects</a></li> 
        <li><a href="/nodejs/nodejs_utitlity_module.htm">Node.js Utility Modules</a></li> 
        <li><a href="/nodejs/nodejs_web_module.htm">Node.js Web Module</a></li> 
        <li><a href="/nodejs/nodejs_express_framework.htm">Node.js Express Framework</a></li> 
        <li><a href="/nodejs/nodejs_restful_api.htm">Node.js RESTFul API</a></li> 
        <li><a href="/nodejs/nodejs_scaling_application.htm">Node.js Scaling Application</a></li> 
        <li><a href="/nodejs/nodejs_packaging.htm">Node.js Packaging</a></li> 
        <li class="heading">Node.js Useful Resources</li> 
        <li><a href="/nodejs/nodejs_questions_answers.htm">Node.js - Questions and Answers</a></li> 
        <li><a href="/nodejs/nodejs_quick_guide.htm">Node.js - Quick Guide</a></li> 
        <li><a href="/nodejs/nodejs_useful_resources.htm">Node.js - Useful Resources</a></li> 
       </ul> 
       <ul class="nav nav-list primary push-bottom left-menu special"> 
        <li class="sreading">Selected Reading</li> 
        <li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li> 
        <li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li> 
        <li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li> 
        <li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li> 
        <li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li> 
        <li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li> 
       </ul> 
      </aside> 
     </div> 
     <!-- PRINTING STARTS HERE --> 
     <div class="row"> 
      <div class="content"> 
       <div class="col-md-7 middle-col"> 
        <h1>Node.js - Express Framework</h1> 
        <hr> 
        <div class="topgooglead"> 
         <div class="topadtag">
          Advertisements
         </div> 
         <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> 
         <ins class="adsbygoogle top_ad_slot" style="display:inline-block;" data-ad-client="ca-pub-7133395778201029" data-ad-slot="2813390526"> </ins> 
         <script>(adsbygoogle = window.adsbygoogle || []).push({});</script> 
        </div> 
        <hr> 
        <div class="pre-btn"> 
         <a href="/nodejs/nodejs_web_module.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a> 
        </div> 
        <div class="nxt-btn"> 
         <a href="/nodejs/nodejs_restful_api.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a> 
        </div> 
        <div class="clearer"></div> 
        <hr> 
        <h2>Express Overview</h2> 
        <p>Express is a minimal and flexible Node.js web application framework that provides a robust set of features to develop web and mobile applications. It facilitates a rapid development of Node based Web applications. Following are some of the core features of Express framework:</p> 
        <ul class="list"> 
         <li><p>Allows to set up middlewares to respond to HTTP Requests.</p></li> 
         <li><p>Defines a routing table which is used to perform different action based on HTTP Method and URL.</p></li> 
         <li><p>Allows to dynamically render HTML Pages based on passing arguments to templates.</p></li> 
        </ul> 
        <h2>Installing Express</h2> 
        <p>Firstly, install the Express framework globally using npm so that it can be used to create web application using node terminal.</p> 
        <pre class="result notranslate">
$ npm install express --save
</pre> 
        <p>Above command saves installation locally in <b>node_modules</b> directory and creates a directory express inside node_modules. There are following important modules which you should install along with express:</p> 
        <ul class="list"> 
         <li><p><b>body-parser</b> - This is a node.js middleware for handling JSON, Raw, Text and URL encoded form data.</p></li> 
         <li><p><b>cookie-parser</b> - Parse Cookie header and populate req.cookies with an object keyed by the cookie names.</p></li> 
         <li><p><b>multer</b> - This is a node.js middleware for handling multipart/form-data.</p></li> 
        </ul> 
        <pre class="result notranslate">
$ npm install body-parser --save
$ npm install cookie-parser --save
$ npm install multer --save
</pre> 
        <h2>Hello world Example</h2> 
        <p>Following is a very basic Express app which starts a server and listens on port 3000 for connection. This app responds with <b>Hello World!</b> for requests to the homepage. For every other path, it will respond with a <b>404 Not Found.</b></p> 
        <pre class="prettyprint notranslate">
var express = require('express');
var app = express();

app.get('/', function (req, res) {
   res.send('Hello World');
})

var server = app.listen(8081, function () {

  var host = server.address().address
  var port = server.address().port

  console.log("Example app listening at http://%s:%s", host, port)

})
</pre> 
        <p>Save the above code in a file named server.js and run it with the following command.</p> 
        <pre class="result notranslate">
$ node server.js
</pre> 
        <p>You will see the following output:</p> 
        <pre class="result notranslate">
Example app listening at http://0.0.0.0:8081
</pre> 
        <p>Open http://127.0.0.1:8081/ in any browser and see the below result.</p> 
        <img src="/nodejs/images/nodejs_sample.jpg" alt="First Application"> 
        <h2>Request &amp; Response</h2> 
        <p>Express application makes use of a callback function whose parameters are <b>request</b> and <b>response</b> objects.</p> 
        <pre class="prettyprint notranslate">
app.get('/', function (req, res) {
   // --
})
</pre> 
        <p>You can check further detail on both the objects:</p> 
        <ul class="list"> 
         <li><p><a href="/nodejs/nodejs_request_object.htm">Request Object</a> - The request object represents the HTTP request and has properties for the request query string, parameters, body, HTTP headers, and so on.</p></li> 
         <li><p><a href="/nodejs/nodejs_response_object.htm">Response Object</a> - The response object represents the HTTP response that an Express app sends when it gets an HTTP request.</p></li> 
        </ul> 
        <p>You can print <b>req</b> and <b>res</b> objects which provide lot of information related to HTTP request and response including cookies, sessions, URL etc.</p> 
        <h2>Basic Routing</h2> 
        <p>We have seen a basic application which serves HTTP request for the homepage. Routing refers to determining how an application responds to a client request to a particular endpoint, which is a URI (or path) and a specific HTTP request method (GET, POST, and so on).</p> 
        <p>We will extend our Hello World program to add functionality to handle more type HTTP requests.</p> 
        <pre class="prettyprint notranslate">
var express = require('express');
var app = express();

// This responds with "Hello World" on the homepage
app.get('/', function (req, res) {
   console.log("Got a GET request for the homepage");
   res.send('Hello GET');
})


// This responds a POST request for the homepage
app.post('/', function (req, res) {
   console.log("Got a POST request for the homepage");
   res.send('Hello POST');
})

// This responds a DELETE request for the /del_user page.
app.delete('/del_user', function (req, res) {
   console.log("Got a DELETE request for /del_user");
   res.send('Hello DELETE');
})

// This responds a GET request for the /list_user page.
app.get('/list_user', function (req, res) {
   console.log("Got a GET request for /list_user");
   res.send('Page Listing');
})

// This responds a GET request for abcd, abxcd, ab123cd, and so on
app.get('/ab*cd', function(req, res) {   
   console.log("Got a GET request for /ab*cd");
   res.send('Page Pattern Match');
})


var server = app.listen(8081, function () {

  var host = server.address().address
  var port = server.address().port

  console.log("Example app listening at http://%s:%s", host, port)

})
</pre> 
        <p>Save the above code in a file named server.js and run it with the following command.</p> 
        <pre class="result notranslate">
$ node server.js
</pre> 
        <p>You will see the following output:</p> 
        <pre class="result notranslate">
Example app listening at http://0.0.0.0:8081
</pre> 
        <p>Now you can try different requests at http://127.0.0.1:8081 to see the output generated by server.js. Following are few screens showing different responses for different URLs.</p> 
        <p>Screen showing again http://127.0.0.1:8081/list_user</p> 
        <img src="/nodejs/images/nodejs_sample2.jpg" alt="Second Application"> 
        <p>Screen showing again http://127.0.0.1:8081/abcd</p> 
        <img src="/nodejs/images/nodejs_sample3.jpg" alt="Third Application"> 
        <p>Screen showing again http://127.0.0.1:8081/abcdefg</p> 
        <img src="/nodejs/images/nodejs_sample4.jpg" alt="Fourth Application"> 
        <h2>Serving Static Files</h2> 
        <p>Express provides a built-in middleware <b>express.static</b> to serve static files, such as images, CSS, JavaScript etc.</p> 
        <p>You simply needs to pass the name of the directory where you keep your static assets, to the <b>express.static</b> middleware to start serving the files directly. For example, if you keep your images, CSS, and JavaScript files in a directory named public, you can do this:</p> 
        <pre class="prettyprint notranslate">
app.use(express.static('public'));
</pre> 
        <p>We will keep few images in <b>public/images</b> sub-directory as follows:</p> 
        <pre class="result notranslate">
node_modules
server.js
public/
public/images
public/images/logo.png
</pre> 
        <p>Let's modify "Hello Word" app to add the functionality to handle static files.</p> 
        <pre class="prettyprint notranslate">
var express = require('express');
var app = express();

app.use(express.static('public'));

app.get('/', function (req, res) {
   res.send('Hello World');
})

var server = app.listen(8081, function () {

  var host = server.address().address
  var port = server.address().port

  console.log("Example app listening at http://%s:%s", host, port)

})
</pre> 
        <p>Save the above code in a file named server.js and run it with the following command.</p> 
        <pre class="result notranslate">
$ node server.js
</pre> 
        <p>Now open http://127.0.0.1:8081/images/logo.png in any browser and see the below result.</p> 
        <img src="/nodejs/images/nodejs_sample5.jpg" alt="Fifth Application"> 
        <h2>GET Method</h2> 
        <p>Here is a simple example which passes two values using HTML FORM GET method. We are going to use <b>process_get</b> router inside server.js to handle this input.</p> 
        <pre class="prettyprint">
&lt;html&gt;
&lt;body&gt;
&lt;form action="http://127.0.0.1:8081/process_get" method="GET"&gt;
First Name: &lt;input type="text" name="first_name"&gt;  &lt;br&gt;

Last Name: &lt;input type="text" name="last_name"&gt;
&lt;input type="submit" value="Submit"&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre> 
        <p>Let's save above code in index.htm and modify server.js to handle home page request as well as input sent by the HTML form.</p> 
        <pre class="prettyprint notranslate">
var express = require('express');
var app = express();

app.use(express.static('public'));

app.get('/index.htm', function (req, res) {
   res.sendFile( __dirname + "/" + "index.htm" );
})

app.get('/process_get', function (req, res) {

   // Prepare output in JSON format
   response = {
       first_name:req.query.first_name,
       last_name:req.query.last_name
   };
   console.log(response);
   res.end(JSON.stringify(response));
})

var server = app.listen(8081, function () {

  var host = server.address().address
  var port = server.address().port

  console.log("Example app listening at http://%s:%s", host, port)

})
</pre> 
        <p>Now accessing HTML document using <i>http://127.0.0.1:8081/index.htm</i> will generate following form:</p> 
        <pre class="result notranslate">

         <form action="http://127.0.0.1:8081/process_post" method="POST">

          <table> 
           <tbody>
            <tr>
             <td>First Name:</td>
             <td> <input type="text" name="first_name"></td>
            </tr> 
            <tr>
             <td>Last Name:</td>
             <td> <input type="text" name="last_name"></td>
            </tr> 
            <tr>
             <td colspan="2"><input type="button" value="Submit"></td>
            </tr> 
           </tbody>
          </table>

         </form>
</pre> 
        <p>Now you can enter First and Last Name and then click submit button to see the result and it should give result as follows:</p> 
        <pre class="prettyprint notranslate">
{"first_name":"John","last_name":"Paul"}
</pre> 
        <h2>POST Method</h2> 
        <p>Here is a simple example which passes two values using HTML FORM POST method. We are going to use <b>process_get</b> router inside server.js to handle this input.</p> 
        <pre class="prettyprint">
&lt;html&gt;
&lt;body&gt;
&lt;form action="http://127.0.0.1:8081/process_post" method="POST"&gt;
First Name: &lt;input type="text" name="first_name"&gt;  &lt;br&gt;

Last Name: &lt;input type="text" name="last_name"&gt;
&lt;input type="submit" value="Submit"&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre> 
        <p>Let's save above code in index.htm and modify server.js to handle home page request as well as input sent by the HTML form.</p> 
        <pre class="prettyprint notranslate">
var express = require('express');
var app = express();
var bodyParser = require('body-parser');

// Create application/x-www-form-urlencoded parser
var urlencodedParser = bodyParser.urlencoded({ extended: false })

app.use(express.static('public'));

app.get('/index.htm', function (req, res) {
   res.sendFile( __dirname + "/" + "index.htm" );
})

app.post('/process_post', urlencodedParser, function (req, res) {

   // Prepare output in JSON format
   response = {
       first_name:req.body.first_name,
       last_name:req.body.last_name
   };
   console.log(response);
   res.end(JSON.stringify(response));
})

var server = app.listen(8081, function () {

  var host = server.address().address
  var port = server.address().port

  console.log("Example app listening at http://%s:%s", host, port)

})
</pre> 
        <p>Now accessing HTML document using <i>http://127.0.0.1:8081/index.htm</i> will generate following form:</p> 
        <pre class="result notranslate">

         <form action="http://127.0.0.1:8081/process_post" method="POST">

          <table> 
           <tbody>
            <tr>
             <td>First Name:</td>
             <td> <input type="text" name="first_name"></td>
            </tr> 
            <tr>
             <td>Last Name:</td>
             <td> <input type="text" name="last_name"></td>
            </tr> 
            <tr>
             <td colspan="2"><input type="button" value="Submit"></td>
            </tr> 
           </tbody>
          </table>

         </form>
</pre> 
        <p>Now you can enter First and Last Name and then click submit button to see the result and it should give result as follows:</p> 
        <pre class="prettyprint notranslate">
{"first_name":"John","last_name":"Paul"}
</pre> 
        <h2>File Upload</h2> 
        <p>The following HTML code creates a file uploader form. This form is having method attribute set to <b>POST</b> and enctype attribute is set to <b>multipart/form-data</b></p> 
        <pre class="prettyprint notranslate">
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;File Uploading Form&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h3&gt;File Upload:&lt;/h3&gt;
Select a file to upload: &lt;br /&gt;
&lt;form action="http://127.0.0.1:8081/file_upload" method="POST" 
      enctype="multipart/form-data"&gt;
&lt;input type="file" name="file" size="50" /&gt;
&lt;br /&gt;
&lt;input type="submit" value="Upload File" /&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre> 
        <p>Let's save above code in index.htm and modify server.js to handle home page request as well as file upload.</p> 
        <pre class="prettyprint notranslate">
var express = require('express');
var app = express();
var fs = require("fs");

var bodyParser = require('body-parser');
var multer  = require('multer');

app.use(express.static('public'));
app.use(bodyParser.urlencoded({ extended: false }));
app.use(multer({ dest: '/tmp/'}));

app.get('/index.htm', function (req, res) {
   res.sendFile( __dirname + "/" + "index.htm" );
})

app.post('/file_upload', function (req, res) {

   console.log(req.files.file.name);
   console.log(req.files.file.path);
   console.log(req.files.file.type);

   var file = __dirname + "/" + req.files.file.name;
   fs.readFile( req.files.file.path, function (err, data) {
        fs.writeFile(file, data, function (err) {
         if( err ){
              console.log( err );
         }else{
               response = {
                   message:'File uploaded successfully',
                   filename:req.files.file.name
              };
          }
          console.log( response );
          res.end( JSON.stringify( response ) );
       });
   });
})

var server = app.listen(8081, function () {

  var host = server.address().address
  var port = server.address().port

  console.log("Example app listening at http://%s:%s", host, port)

})
</pre> 
        <p>Now accessing HTML document using <i>http://127.0.0.1:8081/index.htm</i> will generate following form:</p> 
        <pre class="result notranslate">
<b>File Upload:</b>
Select a file to upload: <br>
<input type="file" name="file" size="50">
<br>
<input type="button" value="Upload File">
NOTE: This is just dummy form and would not work, but it must work at your server.
</pre> 
        <h2>Cookies Management</h2> 
        <p>You can send cookies to Node.js server which can handle the using the following middleware option. Following is a simple example to print all the cookies sent by the client.</p> 
        <pre class="prettyprint notranslate">
var express      = require('express')
var cookieParser = require('cookie-parser')

var app = express()
app.use(cookieParser())

app.get('/', function(req, res) {
  console.log("Cookies: ", req.cookies)
})

app.listen(8081)
</pre> 
        <hr> 
        <div class="pre-btn"> 
         <a href="/nodejs/nodejs_web_module.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a> 
        </div>
        <div class="print-btn"> 
         <a href="/cgi-bin/printpage.cgi" target="_blank"><i class="icon icon-print big-font"></i> Print</a> 
        </div> 
        <div class="pdf-btn"> 
         <a href="/nodejs/pdf/nodejs_express_framework.pdf" title="Node.js Express Framework" target="_blank"><i class="icon icon-file-pdf-o big-font"></i> PDF</a> 
        </div> 
        <div class="nxt-btn"> 
         <a href="/nodejs/nodejs_restful_api.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a> 
        </div> 
        <hr> 
        <!-- PRINTING ENDS HERE --> 
        <div class="bottomgooglead"> 
         <div class="bottomadtag">
          Advertisements
         </div> 
         <script type="text/javascript"><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script> 
         <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script> 
        </div> 
       </div> 
      </div> 
      <div class="row"> 
       <div class="col-md-3" id="rightbar"> 
        <div class="simple-ad"> 
         <a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('http://www.facebook.com/sharer.php?u=' + 'http://www.tutorialspoint.com/nodejs/nodejs_express_framework.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;"> <img src="/images/facebookIcon.jpg" alt="img"> </a> 
         <a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('http://twitter.com/share?url=' + 'http://www.tutorialspoint.com/nodejs/nodejs_express_framework.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;"> <img src="/images/twitterIcon.jpg" alt="img"> </a> 
         <a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'http://www.tutorialspoint.com/nodejs/nodejs_express_framework.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;"> <img src="/images/linkedinIcon.jpg" alt="img"> </a> 
         <a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=http://www.tutorialspoint.com/nodejs/nodejs_express_framework.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;"> <img src="/images/googlePlusIcon.jpg" alt="img"> </a> 
         <a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('http://www.stumbleupon.com/submit?url=http://www.tutorialspoint.com/nodejs/nodejs_express_framework.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;"> <img src="/images/StumbleUponIcon.jpg" alt="img"> </a> 
         <a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('http://reddit.com/submit?url=http://www.tutorialspoint.com/nodejs/nodejs_express_framework.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;"> <img src="/images/reddit.jpg" alt="img"> </a> 
        </div> 
        <div class="rightgooglead"> 
         <script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script> 
         <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script> 
        </div> 
        <div class="rightgooglead"> 
         <script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 300;
google_ad_height = 600;
google_ad_format = "300x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script> 
         <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script> 
        </div> 
        <div class="rightgooglead"> 
         <script type="text/javascript"><!--
google_ad_client = "ca-pub-2537027957187252";
/* Right Side Ad */
google_ad_slot = "right_side_ad";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script> 
         <script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js">
</script> 
        </div> 
       </div> 
      </div> 
     </div> 
    </div> 
   </div> 
   <div class="footer-copyright"> 
    <div class="container"> 
     <div class="row"> 
      <div class="col-md-1"> 
       <a href="index.htm" class="logo"> <img alt="Tutorials Point" class="img-responsive" src="/scripts/img/logo-footer.png"> </a> 
      </div> 
      <div class="col-md-4 col-sm-12 col-xs-12"> 
       <nav id="sub-menu"> 
        <ul> 
         <li><a href="/about/tutorials_writing.htm">Write for us</a></li> 
         <li><a href="/about/faq.htm">FAQ's</a></li> 
         <li><a href="/about/about_helping.htm">Helping</a></li> 
         <li><a href="/about/contact_us.htm">Contact</a></li> 
        </ul> 
       </nav> 
      </div> 
      <div class="col-md-3 col-sm-12 col-xs-12"> 
       <p>© Copyright 2016. All Rights Reserved.</p> 
      </div> 
      <div class="col-md-4 col-sm-12 col-xs-12"> 
       <div class="news-group"> 
        <input type="text" class="form-control-foot search" name="textemail" id="textemail" autocomplete="off" placeholder="Enter email for newsletter" onfocus="if (this.value == 'Enter email for newsletter...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Enter email for newsletter...';}"> 
        <span class="input-group-btn"> <button class="btn btn-default btn-footer" id="btnemail" type="submit" onclick="javascript:void(0);">go</button> </span> 
        <div id="newsresponse"></div> 
       </div> 
      </div> 
     </div> 
    </div> 
   </div> 
  </div> 
  <!-- Libs --> 
  <script type="text/javascript" src="/theme/js/custom-min.js"></script> 
  <script src="http://www.google-analytics.com/urchin.js">
</script> 
  <script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
$('.pg-icon').click(function(){
   $('.wrapLoader').show();
});
</script> 
  <script type="text/javascript" src="/theme/js/jquery.colorbox-min.js"></script> 
  <script type="text/javascript">
   var tryit = new $.TryIt('/nodejs/try_nodejs.php');
   tryit.compile();
</script>   
 </body>
</html>